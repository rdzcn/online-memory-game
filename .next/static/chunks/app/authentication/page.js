/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/authentication/page"],{

/***/ "(app-client)/./node_modules/ably/build/ably-commonjs.js":
/*!**************************************************!*\
  !*** ./node_modules/ably/build/ably-commonjs.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-client)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/*!\n * @license Copyright 2015-2022 Ably Real-time Ltd (ably.com)\n * \n * Ably JavaScript Library v1.2.49\n * https://github.com/ably/ably-js\n * \n * Released under the Apache Licence v2.0\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_723__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_723__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_723__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_723__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_723__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_723__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_723__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_723__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_723__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_723__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_723__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_723__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_723__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_723__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_723__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_723__(__nested_webpack_require_723__.s = 42);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_4200__) {\n\n\"use strict\";\n__nested_webpack_require_4200__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__param\", function() { return __param; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__createBinding\", function() { return __createBinding; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__values\", function() { return __values; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__read\", function() { return __read; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__spreadArrays\", function() { return __spreadArrays; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__spreadArray\", function() { return __spreadArray; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__await\", function() { return __await; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__classPrivateFieldGet\", function() { return __classPrivateFieldGet; });\n/* harmony export (binding) */ __nested_webpack_require_4200__.d(__webpack_exports__, \"__classPrivateFieldSet\", function() { return __classPrivateFieldSet; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_19043__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.allToUpperCase = exports.allToLowerCase = exports.encodeBody = exports.decodeBody = exports.Format = exports.promisify = exports.trim = exports.arrChooseN = exports.randomHexString = exports.randomString = exports.cheapRandStr = exports.dataSizeBytes = exports.inspectBody = exports.inspectError = exports.isErrorInfoOrPartialErrorInfo = exports.now = exports.parseQueryString = exports.toQueryString = exports.arrPopRandomElement = exports.defaultPostHeaders = exports.defaultGetHeaders = exports.allSame = exports.arrEvery = exports.arrFilter = exports.arrMap = exports.safeArrForEach = exports.arrForEach = exports.forInOwnNonNullProperties = exports.valuesArray = exports.keysArray = exports.arrWithoutValue = exports.arrDeleteValue = exports.arrIn = exports.arrIndexOf = exports.arrSubtract = exports.arrIntersectOb = exports.arrIntersect = exports.intersect = exports.containsValue = exports.inherits = exports.prototypicalClone = exports.shallowClone = exports.isEmptyArg = exports.isOnlyPropIn = exports.isEmpty = exports.isObject = exports.ensureArray = exports.isArray = exports.copy = exports.mixin = void 0;\nexports.arrEquals = exports.toBase64 = exports.matchDerivedChannel = exports.shallowEquals = exports.getGlobalObject = exports.getRetryTime = exports.getJitterCoefficient = exports.getBackoffCoefficient = void 0;\nvar tslib_1 = __nested_webpack_require_19043__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_19043__(3));\nvar defaults_1 = tslib_1.__importStar(__nested_webpack_require_19043__(8));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_19043__(4));\nvar enc_base64_1 = __nested_webpack_require_19043__(11);\nvar enc_utf8_1 = __nested_webpack_require_19043__(31);\nfunction randomPosn(arrOrStr) {\n    return Math.floor(Math.random() * arrOrStr.length);\n}\n/*\n * Add a set of properties to a target object\n * target: the target object\n * props:  an object whose enumerable properties are\n *         added, by reference only\n */\nfunction mixin(target) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < args.length; i++) {\n        var source = args[i];\n        if (!source) {\n            break;\n        }\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        for (var key in source) {\n            if (!hasOwnProperty || hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\nexports.mixin = mixin;\n/*\n * Add a set of properties to a target object\n * target: the target object\n * props:  an object whose enumerable properties are\n *         added, by reference only\n */\nfunction copy(src) {\n    return mixin({}, src);\n}\nexports.copy = copy;\n/*\n * Determine whether or not a given object is\n * an array.\n */\nexports.isArray = Array.isArray ||\n    function (value) {\n        return Object.prototype.toString.call(value) == '[object Array]';\n    };\n/*\n * Ensures that an Array object is always returned\n * returning the original Array of obj is an Array\n * else wrapping the obj in a single element Array\n */\nfunction ensureArray(obj) {\n    if (isEmptyArg(obj)) {\n        return [];\n    }\n    if ((0, exports.isArray)(obj)) {\n        return obj;\n    }\n    return [obj];\n}\nexports.ensureArray = ensureArray;\nfunction isObject(ob) {\n    return Object.prototype.toString.call(ob) == '[object Object]';\n}\nexports.isObject = isObject;\n/*\n * Determine whether or not an object contains\n * any enumerable properties.\n * ob: the object\n */\nfunction isEmpty(ob) {\n    for (var prop in ob)\n        return false;\n    return true;\n}\nexports.isEmpty = isEmpty;\nfunction isOnlyPropIn(ob, property) {\n    for (var prop in ob) {\n        if (prop !== property) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isOnlyPropIn = isOnlyPropIn;\n/*\n * Determine whether or not an argument to an overloaded function is\n * undefined (missing) or null.\n * This method is useful when constructing functions such as (WebIDL terminology):\n *   off([TreatUndefinedAs=Null] DOMString? event)\n * as you can then confirm the argument using:\n *   Utils.isEmptyArg(event)\n */\nfunction isEmptyArg(arg) {\n    return arg === null || arg === undefined;\n}\nexports.isEmptyArg = isEmptyArg;\n/*\n * Perform a simple shallow clone of an object.\n * Result is an object irrespective of whether\n * the input is an object or array. All\n * enumerable properties are copied.\n * ob: the object\n */\nfunction shallowClone(ob) {\n    var result = new Object();\n    for (var prop in ob)\n        result[prop] = ob[prop];\n    return result;\n}\nexports.shallowClone = shallowClone;\n/*\n * Clone an object by creating a new object with the\n * given object as its prototype. Optionally\n * a set of additional own properties can be\n * supplied to be added to the newly created clone.\n * ob:            the object to be cloned\n * ownProperties: optional object with additional\n *                properties to add\n */\nfunction prototypicalClone(ob, ownProperties) {\n    var F = /** @class */ (function () {\n        function F() {\n        }\n        return F;\n    }());\n    F.prototype = ob;\n    var result = new F();\n    if (ownProperties)\n        mixin(result, ownProperties);\n    return result;\n}\nexports.prototypicalClone = prototypicalClone;\n/*\n * Declare a constructor to represent a subclass\n * of another constructor\n * If platform has a built-in version we use that from Platform, else we\n * define here (so can make use of other Utils fns)\n * See node.js util.inherits\n */\nvar inherits = function (ctor, superCtor) {\n    if (platform_1.default.Config.inherits) {\n        platform_1.default.Config.inherits(ctor, superCtor);\n        return;\n    }\n    ctor.super_ = superCtor;\n    ctor.prototype = prototypicalClone(superCtor.prototype, { constructor: ctor });\n};\nexports.inherits = inherits;\n/*\n * Determine whether or not an object has an enumerable\n * property whose value equals a given value.\n * ob:  the object\n * val: the value to find\n */\nfunction containsValue(ob, val) {\n    for (var i in ob) {\n        if (ob[i] == val)\n            return true;\n    }\n    return false;\n}\nexports.containsValue = containsValue;\nfunction intersect(arr, ob) {\n    return (0, exports.isArray)(ob) ? arrIntersect(arr, ob) : arrIntersectOb(arr, ob);\n}\nexports.intersect = intersect;\nfunction arrIntersect(arr1, arr2) {\n    var result = [];\n    for (var i = 0; i < arr1.length; i++) {\n        var member = arr1[i];\n        if ((0, exports.arrIndexOf)(arr2, member) != -1)\n            result.push(member);\n    }\n    return result;\n}\nexports.arrIntersect = arrIntersect;\nfunction arrIntersectOb(arr, ob) {\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var member = arr[i];\n        if (member in ob)\n            result.push(member);\n    }\n    return result;\n}\nexports.arrIntersectOb = arrIntersectOb;\nfunction arrSubtract(arr1, arr2) {\n    var result = [];\n    for (var i = 0; i < arr1.length; i++) {\n        var element = arr1[i];\n        if ((0, exports.arrIndexOf)(arr2, element) == -1)\n            result.push(element);\n    }\n    return result;\n}\nexports.arrSubtract = arrSubtract;\nexports.arrIndexOf = Array.prototype.indexOf\n    ? function (arr, elem, fromIndex) {\n        return arr.indexOf(elem, fromIndex);\n    }\n    : function (arr, elem, fromIndex) {\n        fromIndex = fromIndex || 0;\n        var len = arr.length;\n        for (; fromIndex < len; fromIndex++) {\n            if (arr[fromIndex] === elem) {\n                return fromIndex;\n            }\n        }\n        return -1;\n    };\nfunction arrIn(arr, val) {\n    return (0, exports.arrIndexOf)(arr, val) !== -1;\n}\nexports.arrIn = arrIn;\nfunction arrDeleteValue(arr, val) {\n    var idx = (0, exports.arrIndexOf)(arr, val);\n    var res = idx != -1;\n    if (res)\n        arr.splice(idx, 1);\n    return res;\n}\nexports.arrDeleteValue = arrDeleteValue;\nfunction arrWithoutValue(arr, val) {\n    var newArr = arr.slice();\n    arrDeleteValue(newArr, val);\n    return newArr;\n}\nexports.arrWithoutValue = arrWithoutValue;\n/*\n * Construct an array of the keys of the enumerable\n * properties of a given object, optionally limited\n * to only the own properties.\n * ob:      the object\n * ownOnly: boolean, get own properties only\n */\nfunction keysArray(ob, ownOnly) {\n    var result = [];\n    for (var prop in ob) {\n        if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n            continue;\n        result.push(prop);\n    }\n    return result;\n}\nexports.keysArray = keysArray;\n/*\n * Construct an array of the values of the enumerable\n * properties of a given object, optionally limited\n * to only the own properties.\n * ob:      the object\n * ownOnly: boolean, get own properties only\n */\nfunction valuesArray(ob, ownOnly) {\n    var result = [];\n    for (var prop in ob) {\n        if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n            continue;\n        result.push(ob[prop]);\n    }\n    return result;\n}\nexports.valuesArray = valuesArray;\nfunction forInOwnNonNullProperties(ob, fn) {\n    for (var prop in ob) {\n        if (Object.prototype.hasOwnProperty.call(ob, prop) && ob[prop]) {\n            fn(prop);\n        }\n    }\n}\nexports.forInOwnNonNullProperties = forInOwnNonNullProperties;\nexports.arrForEach = Array.prototype.forEach\n    ? function (arr, fn) {\n        arr.forEach(fn);\n    }\n    : function (arr, fn) {\n        var len = arr.length;\n        for (var i = 0; i < len; i++) {\n            fn(arr[i], i, arr);\n        }\n    };\n/* Useful when the function may mutate the array */\nfunction safeArrForEach(arr, fn) {\n    return (0, exports.arrForEach)(arr.slice(), fn);\n}\nexports.safeArrForEach = safeArrForEach;\nexports.arrMap = Array.prototype.map\n    ? function (arr, fn) {\n        return arr.map(fn);\n    }\n    : function (arr, fn) {\n        var result = [];\n        var len = arr.length;\n        for (var i = 0; i < len; i++) {\n            result.push(fn(arr[i], i, arr));\n        }\n        return result;\n    };\nexports.arrFilter = Array.prototype.filter\n    ? function (arr, fn) {\n        return arr.filter(fn);\n    }\n    : function (arr, fn) {\n        var result = [], len = arr.length;\n        for (var i = 0; i < len; i++) {\n            if (fn(arr[i])) {\n                result.push(arr[i]);\n            }\n        }\n        return result;\n    };\nexports.arrEvery = Array.prototype.every\n    ? function (arr, fn) {\n        return arr.every(fn);\n    }\n    : function (arr, fn) {\n        var len = arr.length;\n        for (var i = 0; i < len; i++) {\n            if (!fn(arr[i], i, arr)) {\n                return false;\n            }\n        }\n        return true;\n    };\nfunction allSame(arr, prop) {\n    if (arr.length === 0) {\n        return true;\n    }\n    var first = arr[0][prop];\n    return (0, exports.arrEvery)(arr, function (item) {\n        return item[prop] === first;\n    });\n}\nexports.allSame = allSame;\nvar contentTypes = {\n    json: 'application/json',\n    jsonp: 'application/javascript',\n    xml: 'application/xml',\n    html: 'text/html',\n    msgpack: 'application/x-msgpack',\n};\nfunction defaultGetHeaders(options, format) {\n    var accept = contentTypes[format || Format.json];\n    return {\n        accept: accept,\n        'X-Ably-Version': defaults_1.default.protocolVersion.toString(),\n        'Ably-Agent': (0, defaults_1.getAgentString)(options),\n    };\n}\nexports.defaultGetHeaders = defaultGetHeaders;\nfunction defaultPostHeaders(options, format) {\n    var contentType;\n    var accept = (contentType = contentTypes[format || Format.json]);\n    return {\n        accept: accept,\n        'content-type': contentType,\n        'X-Ably-Version': defaults_1.default.protocolVersion.toString(),\n        'Ably-Agent': (0, defaults_1.getAgentString)(options),\n    };\n}\nexports.defaultPostHeaders = defaultPostHeaders;\nfunction arrPopRandomElement(arr) {\n    return arr.splice(randomPosn(arr), 1)[0];\n}\nexports.arrPopRandomElement = arrPopRandomElement;\nfunction toQueryString(params) {\n    var parts = [];\n    if (params) {\n        for (var key in params)\n            parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n    }\n    return parts.length ? '?' + parts.join('&') : '';\n}\nexports.toQueryString = toQueryString;\nfunction parseQueryString(query) {\n    var match;\n    var search = /([^?&=]+)=?([^&]*)/g;\n    var result = {};\n    while ((match = search.exec(query)))\n        result[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);\n    return result;\n}\nexports.parseQueryString = parseQueryString;\nexports.now = Date.now ||\n    function () {\n        /* IE 8 */\n        return new Date().getTime();\n    };\nfunction isErrorInfoOrPartialErrorInfo(err) {\n    return (typeof err == 'object' &&\n        err !== null &&\n        (err.constructor.name == 'ErrorInfo' || err.constructor.name == 'PartialErrorInfo'));\n}\nexports.isErrorInfoOrPartialErrorInfo = isErrorInfoOrPartialErrorInfo;\nfunction inspectError(err) {\n    var _a, _b;\n    if (err instanceof Error ||\n        ((_a = err === null || err === void 0 ? void 0 : err.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'ErrorInfo' ||\n        ((_b = err === null || err === void 0 ? void 0 : err.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'PartialErrorInfo')\n        return err.toString();\n    return platform_1.default.Config.inspect(err);\n}\nexports.inspectError = inspectError;\nfunction inspectBody(body) {\n    if (platform_1.default.BufferUtils.isBuffer(body)) {\n        return body.toString();\n    }\n    else if (typeof body === 'string') {\n        return body;\n    }\n    else {\n        return platform_1.default.Config.inspect(body);\n    }\n}\nexports.inspectBody = inspectBody;\n/* Data is assumed to be either a string or a buffer. */\nfunction dataSizeBytes(data) {\n    if (platform_1.default.BufferUtils.isBuffer(data)) {\n        return platform_1.default.BufferUtils.byteLength(data);\n    }\n    if (typeof data === 'string') {\n        return platform_1.default.Config.stringByteSize(data);\n    }\n    throw new Error('Expected input of Utils.dataSizeBytes to be a buffer or string, but was: ' + typeof data);\n}\nexports.dataSizeBytes = dataSizeBytes;\nfunction cheapRandStr() {\n    return String(Math.random()).substr(2);\n}\nexports.cheapRandStr = cheapRandStr;\n/* Takes param the minimum number of bytes of entropy the string must\n * include, not the length of the string. String length produced is not\n * guaranteed. */\nvar randomString = function (numBytes) {\n    if (platform_1.default.Config.getRandomValues && typeof Uint8Array !== 'undefined') {\n        var uIntArr = new Uint8Array(numBytes);\n        platform_1.default.Config.getRandomValues(uIntArr);\n        return platform_1.default.BufferUtils.base64Encode(uIntArr);\n    }\n    /* Old browser; fall back to Math.random. Could just use a\n     * CryptoJS version of the above, but want this to still work in nocrypto\n     * versions of the library */\n    var charset = platform_1.default.BufferUtils.base64CharSet;\n    /* base64 has 33% overhead; round length up */\n    var length = Math.round((numBytes * 4) / 3);\n    var result = '';\n    for (var i = 0; i < length; i++) {\n        result += charset[randomPosn(charset)];\n    }\n    return result;\n};\nexports.randomString = randomString;\nvar randomHexString = function (numBytes) {\n    if (platform_1.default.Config.getRandomValues && typeof Uint8Array !== 'undefined') {\n        var uIntArr = new Uint8Array(numBytes);\n        platform_1.default.Config.getRandomValues(uIntArr);\n        return platform_1.default.BufferUtils.hexEncode(uIntArr);\n    }\n    var charset = platform_1.default.BufferUtils.hexCharSet;\n    var length = numBytes * 2;\n    var result = '';\n    for (var i = 0; i < length; i++) {\n        result += charset[randomPosn(charset)];\n    }\n    return result;\n};\nexports.randomHexString = randomHexString;\n/* Pick n elements at random without replacement from an array */\nfunction arrChooseN(arr, n) {\n    var numItems = Math.min(n, arr.length), mutableArr = arr.slice(), result = [];\n    for (var i = 0; i < numItems; i++) {\n        result.push(arrPopRandomElement(mutableArr));\n    }\n    return result;\n}\nexports.arrChooseN = arrChooseN;\nexports.trim = String.prototype.trim\n    ? function (str) {\n        return str.trim();\n    }\n    : function (str) {\n        return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n    };\nfunction promisify(ob, fnName, args) {\n    return new Promise(function (resolve, reject) {\n        ob[fnName].apply(ob, tslib_1.__spreadArray(tslib_1.__spreadArray([], args, false), [function (err, res) {\n                err ? reject(err) : resolve(res);\n            }], false));\n    });\n}\nexports.promisify = promisify;\nvar Format;\n(function (Format) {\n    Format[\"msgpack\"] = \"msgpack\";\n    Format[\"json\"] = \"json\";\n})(Format = exports.Format || (exports.Format = {}));\nfunction decodeBody(body, format) {\n    return format == 'msgpack' ? platform_1.default.Config.msgpack.decode(body) : JSON.parse(String(body));\n}\nexports.decodeBody = decodeBody;\nfunction encodeBody(body, format) {\n    return format == 'msgpack' ? platform_1.default.Config.msgpack.encode(body, true) : JSON.stringify(body);\n}\nexports.encodeBody = encodeBody;\nfunction allToLowerCase(arr) {\n    return arr.map(function (element) {\n        return element && element.toLowerCase();\n    });\n}\nexports.allToLowerCase = allToLowerCase;\nfunction allToUpperCase(arr) {\n    return arr.map(function (element) {\n        return element && element.toUpperCase();\n    });\n}\nexports.allToUpperCase = allToUpperCase;\nfunction getBackoffCoefficient(count) {\n    return Math.min((count + 2) / 3, 2);\n}\nexports.getBackoffCoefficient = getBackoffCoefficient;\nfunction getJitterCoefficient() {\n    return 1 - Math.random() * 0.2;\n}\nexports.getJitterCoefficient = getJitterCoefficient;\n/**\n *\n * @param initialTimeout initial timeout value\n * @param retryAttempt integer indicating retryAttempt\n * @returns RetryTimeout value for given timeout and retryAttempt.\n * If x is the value generated then,\n * Upper bound = min((retryAttempt + 2) / 3, 2) * initialTimeout,\n * Lower bound = 0.8 * Upper bound,\n * Lower bound < x < Upper bound\n */\nfunction getRetryTime(initialTimeout, retryAttempt) {\n    return initialTimeout * getBackoffCoefficient(retryAttempt) * getJitterCoefficient();\n}\nexports.getRetryTime = getRetryTime;\nfunction getGlobalObject() {\n    if (global) {\n        return global;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    return self;\n}\nexports.getGlobalObject = getGlobalObject;\nfunction shallowEquals(source, target) {\n    return (Object.keys(source).every(function (key) { return source[key] === target[key]; }) &&\n        Object.keys(target).every(function (key) { return target[key] === source[key]; }));\n}\nexports.shallowEquals = shallowEquals;\nfunction matchDerivedChannel(name) {\n    /**\n     * This regex check is to retain existing channel params if any e.g [?rewind=1]foo to\n     * [filter=xyz?rewind=1]foo. This is to keep channel compatibility around use of\n     * channel params that work with derived channels.\n     *\n     * This eslint unsafe regex warning is triggered because the RegExp uses nested quantifiers,\n     * but it does not create any situation where the regex engine has to\n     * explore a large number of possible matches so it’s safe to ignore\n     */\n    var regex = /^(\\[([^?]*)(?:(.*))\\])?(.+)$/; // eslint-disable-line\n    var match = name.match(regex);\n    if (!match || !match.length || match.length < 5) {\n        throw new errorinfo_1.default('regex match failed', 400, 40010);\n    }\n    // Fail if there is already a channel qualifier, eg [meta]foo should fail instead of just overriding with [filter=xyz]foo\n    if (match[2]) {\n        throw new errorinfo_1.default(\"cannot use a derived option with a \".concat(match[2], \" channel\"), 400, 40010);\n    }\n    // Return match values to be added to derive channel quantifier.\n    return {\n        qualifierParam: match[3] || '',\n        channelName: match[4],\n    };\n}\nexports.matchDerivedChannel = matchDerivedChannel;\nfunction toBase64(str) {\n    if (platform_1.default.Config.createHmac) {\n        return Buffer.from(str, 'ascii').toString('base64');\n    }\n    return (0, enc_base64_1.stringify)((0, enc_utf8_1.parse)(str));\n}\nexports.toBase64 = toBase64;\nfunction arrEquals(a, b) {\n    return (a.length === b.length &&\n        (0, exports.arrEvery)(a, function (val, i) {\n            return val === b[i];\n        }));\n}\nexports.arrEquals = arrEquals;\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_19043__(13)))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __nested_webpack_require_39803__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_39803__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_39803__(3));\n// Workaround for salesforce lightning locker compatibility\n// This is a shorthand version of Utils.getGlobalObject (which we can't use here without creating a circular import)\nvar globalObject = global || (typeof window !== 'undefined' ? window : self);\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[LogLevels[\"None\"] = 0] = \"None\";\n    LogLevels[LogLevels[\"Error\"] = 1] = \"Error\";\n    LogLevels[LogLevels[\"Major\"] = 2] = \"Major\";\n    LogLevels[LogLevels[\"Minor\"] = 3] = \"Minor\";\n    LogLevels[LogLevels[\"Micro\"] = 4] = \"Micro\";\n})(LogLevels || (LogLevels = {}));\nfunction pad(timeSegment, three) {\n    return \"\".concat(timeSegment).padStart(three ? 3 : 2, '0');\n}\nfunction getHandler(logger) {\n    return platform_1.default.Config.logTimestamps\n        ? function (msg) {\n            var time = new Date();\n            logger(pad(time.getHours()) +\n                ':' +\n                pad(time.getMinutes()) +\n                ':' +\n                pad(time.getSeconds()) +\n                '.' +\n                pad(time.getMilliseconds(), 1) +\n                ' ' +\n                msg);\n        }\n        : logger;\n}\nvar getDefaultLoggers = function () {\n    var _a, _b;\n    var consoleLogger;\n    var errorLogger;\n    /* Can't just check for console && console.log; fails in IE <=9 */\n    if ((typeof Window === 'undefined' && typeof WorkerGlobalScope === 'undefined') /* node */ ||\n        typeof ((_b = (_a = globalObject === null || globalObject === void 0 ? void 0 : globalObject.console) === null || _a === void 0 ? void 0 : _a.log) === null || _b === void 0 ? void 0 : _b.apply) === 'function' /* sensible browsers */) {\n        consoleLogger = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            console.log.apply(console, args);\n        };\n        errorLogger = console.warn\n            ? function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                console.warn.apply(console, args);\n            }\n            : consoleLogger;\n    }\n    else if (globalObject === null || globalObject === void 0 ? void 0 : globalObject.console.log) {\n        /* IE <= 9 with the console open -- console.log does not\n         * inherit from Function, so has no apply method */\n        consoleLogger = errorLogger = function () {\n            Function.prototype.apply.call(console.log, console, arguments);\n        };\n    }\n    else {\n        /* IE <= 9 when dev tools are closed - window.console not even defined */\n        consoleLogger = errorLogger = function () { };\n    }\n    return [consoleLogger, errorLogger].map(getHandler);\n};\nvar Logger = /** @class */ (function () {\n    function Logger() {\n        Logger.logLevel = Logger.LOG_DEFAULT;\n    }\n    Logger.initLogHandlers = function () {\n        var _a = getDefaultLoggers(), logHandler = _a[0], logErrorHandler = _a[1];\n        this.logHandler = logHandler;\n        this.logErrorHandler = logErrorHandler;\n    };\n    Logger.logLevel = LogLevels.Error; // default logLevel\n    // public constants\n    Logger.LOG_NONE = LogLevels.None;\n    Logger.LOG_ERROR = LogLevels.Error;\n    Logger.LOG_MAJOR = LogLevels.Major;\n    Logger.LOG_MINOR = LogLevels.Minor;\n    Logger.LOG_MICRO = LogLevels.Micro;\n    // aliases\n    Logger.LOG_DEFAULT = LogLevels.Error;\n    Logger.LOG_DEBUG = LogLevels.Micro;\n    /* public static functions */\n    Logger.logAction = function (level, action, message) {\n        if (Logger.shouldLog(level)) {\n            (level === LogLevels.Error ? Logger.logErrorHandler : Logger.logHandler)('Ably: ' + action + ': ' + message);\n        }\n    };\n    Logger.deprecated = function (original, replacement) {\n        Logger.deprecatedWithMsg(original, \"Please use '\" + replacement + \"' instead.\");\n    };\n    Logger.deprecatedWithMsg = function (funcName, msg) {\n        if (Logger.shouldLog(LogLevels.Error)) {\n            Logger.logErrorHandler(\"Ably: Deprecation warning - '\" + funcName + \"' is deprecated and will be removed from a future version. \" + msg);\n        }\n    };\n    /* Where a logging operation is expensive, such as serialisation of data, use shouldLog will prevent\n         the object being serialised if the log level will not output the message */\n    Logger.shouldLog = function (level) {\n        return level <= Logger.logLevel;\n    };\n    Logger.setLog = function (level, handler) {\n        if (level !== undefined)\n            Logger.logLevel = level;\n        if (handler !== undefined)\n            Logger.logHandler = Logger.logErrorHandler = handler;\n    };\n    return Logger;\n}());\nexports.default = Logger;\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_39803__(13)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Platform = /** @class */ (function () {\n    function Platform() {\n    }\n    return Platform;\n}());\nexports.default = Platform;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_45217__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartialErrorInfo = void 0;\nvar tslib_1 = __nested_webpack_require_45217__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_45217__(3));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_45217__(1));\nfunction toString(err) {\n    var result = '[' + err.constructor.name;\n    if (err.message)\n        result += ': ' + err.message;\n    if (err.statusCode)\n        result += '; statusCode=' + err.statusCode;\n    if (err.code)\n        result += '; code=' + err.code;\n    if (err.cause)\n        result += '; cause=' + Utils.inspectError(err.cause);\n    if (err.href && !(err.message && err.message.indexOf('help.ably.io') > -1))\n        result += '; see ' + err.href + ' ';\n    result += ']';\n    return result;\n}\nvar ErrorInfo = /** @class */ (function (_super) {\n    tslib_1.__extends(ErrorInfo, _super);\n    function ErrorInfo(message, code, statusCode, cause) {\n        var _this = _super.call(this, message) || this;\n        if (typeof Object.setPrototypeOf !== 'undefined') {\n            Object.setPrototypeOf(_this, ErrorInfo.prototype);\n        }\n        _this.code = code;\n        _this.statusCode = statusCode;\n        _this.cause = cause;\n        return _this;\n    }\n    ErrorInfo.prototype.toString = function () {\n        return toString(this);\n    };\n    ErrorInfo.fromValues = function (values) {\n        var _a = values, message = _a.message, code = _a.code, statusCode = _a.statusCode;\n        if (typeof message !== 'string' || typeof code !== 'number' || typeof statusCode !== 'number') {\n            throw new Error('ErrorInfo.fromValues(): invalid values: ' + platform_1.default.Config.inspect(values));\n        }\n        var result = Object.assign(new ErrorInfo(message, code, statusCode), values);\n        if (result.code && !result.href) {\n            result.href = 'https://help.ably.io/error/' + result.code;\n        }\n        return result;\n    };\n    return ErrorInfo;\n}(Error));\nexports.default = ErrorInfo;\nvar PartialErrorInfo = /** @class */ (function (_super) {\n    tslib_1.__extends(PartialErrorInfo, _super);\n    function PartialErrorInfo(message, code, statusCode, cause) {\n        var _this = _super.call(this, message) || this;\n        if (typeof Object.setPrototypeOf !== 'undefined') {\n            Object.setPrototypeOf(_this, PartialErrorInfo.prototype);\n        }\n        _this.code = code;\n        _this.statusCode = statusCode;\n        _this.cause = cause;\n        return _this;\n    }\n    PartialErrorInfo.prototype.toString = function () {\n        return toString(this);\n    };\n    return PartialErrorInfo;\n}(Error));\nexports.PartialErrorInfo = PartialErrorInfo;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_47972__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_47972__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __nested_webpack_require_50110__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse {}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && \"function\" === 'function') {\n\t        try {\n\t            crypto = __nested_webpack_require_50110__(44);\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_50110__(13)))\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_73476__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_73476__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_73476__(1));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_73476__(2));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_73476__(3));\n/* Call the listener, catch any exceptions and log, but continue operation*/\nfunction callListener(eventThis, listener, args) {\n    try {\n        listener.apply(eventThis, args);\n    }\n    catch (e) {\n        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'EventEmitter.emit()', 'Unexpected listener exception: ' + e + '; stack = ' + (e && e.stack));\n    }\n}\n/**\n * Remove listeners that match listener\n * @param targetListeners is an array of listener arrays or event objects with arrays of listeners\n * @param listener the listener callback to remove\n * @param eventFilter (optional) event name instructing the function to only remove listeners for the specified event\n */\nfunction removeListener(targetListeners, listener, eventFilter) {\n    var listeners;\n    var index;\n    var eventName;\n    for (var targetListenersIndex = 0; targetListenersIndex < targetListeners.length; targetListenersIndex++) {\n        listeners = targetListeners[targetListenersIndex];\n        if (eventFilter) {\n            listeners = listeners[eventFilter];\n        }\n        if (Utils.isArray(listeners)) {\n            while ((index = Utils.arrIndexOf(listeners, listener)) !== -1) {\n                listeners.splice(index, 1);\n            }\n            /* If events object has an event name key with no listeners then\n                          remove the key to stop the list growing indefinitely */\n            if (eventFilter && listeners.length === 0) {\n                delete targetListeners[targetListenersIndex][eventFilter];\n            }\n        }\n        else if (Utils.isObject(listeners)) {\n            /* events */\n            for (eventName in listeners) {\n                if (Object.prototype.hasOwnProperty.call(listeners, eventName) && Utils.isArray(listeners[eventName])) {\n                    removeListener([listeners], listener, eventName);\n                }\n            }\n        }\n    }\n}\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.any = [];\n        this.events = Object.create(null);\n        this.anyOnce = [];\n        this.eventsOnce = Object.create(null);\n    }\n    EventEmitter.prototype.on = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length === 1) {\n            var listener = args[0];\n            if (typeof listener === 'function') {\n                this.any.push(listener);\n            }\n            else {\n                throw new Error('EventListener.on(): Invalid arguments: ' + platform_1.default.Config.inspect(args));\n            }\n        }\n        if (args.length === 2) {\n            var event_1 = args[0], listener_1 = args[1];\n            if (typeof listener_1 !== 'function') {\n                throw new Error('EventListener.on(): Invalid arguments: ' + platform_1.default.Config.inspect(args));\n            }\n            if (Utils.isEmptyArg(event_1)) {\n                this.any.push(listener_1);\n            }\n            else if (Utils.isArray(event_1)) {\n                event_1.forEach(function (eventName) {\n                    _this.on(eventName, listener_1);\n                });\n            }\n            else {\n                if (typeof event_1 !== 'string') {\n                    throw new Error('EventListener.on(): Invalid arguments: ' + platform_1.default.Config.inspect(args));\n                }\n                var listeners = this.events[event_1] || (this.events[event_1] = []);\n                listeners.push(listener_1);\n            }\n        }\n    };\n    EventEmitter.prototype.off = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length == 0 || (Utils.isEmptyArg(args[0]) && Utils.isEmptyArg(args[1]))) {\n            this.any = [];\n            this.events = Object.create(null);\n            this.anyOnce = [];\n            this.eventsOnce = Object.create(null);\n            return;\n        }\n        var firstArg = args[0], secondArg = args[1];\n        var listener = null;\n        var event = null;\n        if (args.length === 1 || !secondArg) {\n            if (typeof firstArg === 'function') {\n                /* we take this to be the listener and treat the event as \"any\" .. */\n                listener = firstArg;\n            }\n            else {\n                event = firstArg;\n            }\n            /* ... or we take event to be the actual event name and listener to be all */\n        }\n        else {\n            if (typeof secondArg !== 'function') {\n                throw new Error('EventEmitter.off(): invalid arguments:' + platform_1.default.Config.inspect(args));\n            }\n            _a = [firstArg, secondArg], event = _a[0], listener = _a[1];\n        }\n        if (listener && Utils.isEmptyArg(event)) {\n            removeListener([this.any, this.events, this.anyOnce, this.eventsOnce], listener);\n            return;\n        }\n        if (Utils.isArray(event)) {\n            event.forEach(function (eventName) {\n                _this.off(eventName, listener);\n            });\n            return;\n        }\n        /* \"normal\" case where event is an actual event */\n        if (typeof event !== 'string') {\n            throw new Error('EventEmitter.off(): invalid arguments:' + platform_1.default.Config.inspect(args));\n        }\n        if (listener) {\n            removeListener([this.events, this.eventsOnce], listener, event);\n        }\n        else {\n            delete this.events[event];\n            delete this.eventsOnce[event];\n        }\n    };\n    /**\n     * Get the array of listeners for a given event; excludes once events\n     * @param event (optional) the name of the event, or none for 'any'\n     * @return array of events, or null if none\n     */\n    EventEmitter.prototype.listeners = function (event) {\n        if (event) {\n            var listeners = this.events[event] || [];\n            if (this.eventsOnce[event])\n                Array.prototype.push.apply(listeners, this.eventsOnce[event]);\n            return listeners.length ? listeners : null;\n        }\n        return this.any.length ? this.any : null;\n    };\n    /**\n     * Emit an event\n     * @param event the event name\n     * @param args the arguments to pass to the listener\n     */\n    EventEmitter.prototype.emit = function (event) {\n        var args = []; /* , args... */\n        for (var _i = 1 /* , args... */; _i < arguments.length /* , args... */; _i++ /* , args... */) {\n            args[_i - 1] = arguments[_i]; /* , args... */\n        }\n        var eventThis = { event: event };\n        var listeners = [];\n        if (this.anyOnce.length) {\n            Array.prototype.push.apply(listeners, this.anyOnce);\n            this.anyOnce = [];\n        }\n        if (this.any.length) {\n            Array.prototype.push.apply(listeners, this.any);\n        }\n        var eventsOnceListeners = this.eventsOnce[event];\n        if (eventsOnceListeners) {\n            Array.prototype.push.apply(listeners, eventsOnceListeners);\n            delete this.eventsOnce[event];\n        }\n        var eventsListeners = this.events[event];\n        if (eventsListeners) {\n            Array.prototype.push.apply(listeners, eventsListeners);\n        }\n        Utils.arrForEach(listeners, function (listener) {\n            callListener(eventThis, listener, args);\n        });\n    };\n    EventEmitter.prototype.once = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argCount = args.length;\n        if ((argCount === 0 || (argCount === 1 && typeof args[0] !== 'function')) && platform_1.default.Config.Promise) {\n            var event_2 = args[0];\n            return new platform_1.default.Config.Promise(function (resolve) {\n                _this.once(event_2, resolve);\n            });\n        }\n        var firstArg = args[0], secondArg = args[1];\n        if (args.length === 1 && typeof firstArg === 'function') {\n            this.anyOnce.push(firstArg);\n        }\n        else if (Utils.isEmptyArg(firstArg)) {\n            if (typeof secondArg !== 'function') {\n                throw new Error('EventEmitter.once(): Invalid arguments:' + platform_1.default.Config.inspect(args));\n            }\n            this.anyOnce.push(secondArg);\n        }\n        else if (Utils.isArray(firstArg)) {\n            var self_1 = this;\n            var listenerWrapper_1 = function () {\n                var innerArgs = Array.prototype.slice.call(arguments);\n                Utils.arrForEach(firstArg, function (eventName) {\n                    self_1.off(eventName, listenerWrapper_1);\n                });\n                if (typeof secondArg !== 'function') {\n                    throw new Error('EventEmitter.once(): Invalid arguments:' + platform_1.default.Config.inspect(args));\n                }\n                secondArg.apply(this, innerArgs);\n            };\n            Utils.arrForEach(firstArg, function (eventName) {\n                self_1.on(eventName, listenerWrapper_1);\n            });\n        }\n        else {\n            if (typeof firstArg !== 'string') {\n                throw new Error('EventEmitter.once(): Invalid arguments:' + platform_1.default.Config.inspect(args));\n            }\n            var listeners = this.eventsOnce[firstArg] || (this.eventsOnce[firstArg] = []);\n            if (secondArg) {\n                if (typeof secondArg !== 'function') {\n                    throw new Error('EventEmitter.once(): Invalid arguments:' + platform_1.default.Config.inspect(args));\n                }\n                listeners.push(secondArg);\n            }\n        }\n    };\n    /**\n     * Private API\n     *\n     * Listen for a single occurrence of a state event and fire immediately if currentState matches targetState\n     * @param targetState the name of the state event to listen to\n     * @param currentState the name of the current state of this object\n     * @param listener the listener to be called\n     * @param listenerArgs\n     */\n    EventEmitter.prototype.whenState = function (targetState, currentState, listener) {\n        var _this = this;\n        var listenerArgs = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            listenerArgs[_i - 3] = arguments[_i];\n        }\n        var eventThis = { event: targetState };\n        if (typeof targetState !== 'string' || typeof currentState !== 'string') {\n            throw 'whenState requires a valid event String argument';\n        }\n        if (typeof listener !== 'function' && platform_1.default.Config.Promise) {\n            return new platform_1.default.Config.Promise(function (resolve) {\n                EventEmitter.prototype.whenState.apply(_this, [targetState, currentState, resolve].concat(listenerArgs));\n            });\n        }\n        if (targetState === currentState) {\n            callListener(eventThis, listener, listenerArgs);\n        }\n        else {\n            this.once(targetState, listener);\n        }\n    };\n    return EventEmitter;\n}());\nexports.default = EventEmitter;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_85072__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaults = exports.normaliseOptions = exports.objectifyOptions = exports.getAgentString = exports.getHosts = exports.getFallbackHosts = exports.environmentFallbackHosts = exports.getHttpScheme = exports.getPort = exports.getHost = void 0;\nvar tslib_1 = __nested_webpack_require_85072__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_85072__(3));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_85072__(1));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_85072__(2));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_85072__(4));\nvar package_json_1 = __nested_webpack_require_85072__(43);\nvar agent = 'ably-js/' + package_json_1.version;\nvar Defaults = {\n    ENVIRONMENT: '',\n    REST_HOST: 'rest.ably.io',\n    REALTIME_HOST: 'realtime.ably.io',\n    FALLBACK_HOSTS: [\n        'A.ably-realtime.com',\n        'B.ably-realtime.com',\n        'C.ably-realtime.com',\n        'D.ably-realtime.com',\n        'E.ably-realtime.com',\n    ],\n    PORT: 80,\n    TLS_PORT: 443,\n    TIMEOUTS: {\n        /* Documented as options params: */\n        disconnectedRetryTimeout: 15000,\n        suspendedRetryTimeout: 30000,\n        /* Undocumented, but part of the api and can be used by customers: */\n        httpRequestTimeout: 15000,\n        channelRetryTimeout: 15000,\n        fallbackRetryTimeout: 600000,\n        /* For internal / test use only: */\n        connectionStateTtl: 120000,\n        realtimeRequestTimeout: 10000,\n        recvTimeout: 90000,\n        preferenceConnectTimeout: 6000,\n        parallelUpgradeDelay: 6000,\n    },\n    httpMaxRetryCount: 3,\n    maxMessageSize: 65536,\n    version: package_json_1.version,\n    protocolVersion: 2,\n    agent: agent,\n    getHost: getHost,\n    getPort: getPort,\n    getHttpScheme: getHttpScheme,\n    environmentFallbackHosts: environmentFallbackHosts,\n    getFallbackHosts: getFallbackHosts,\n    getHosts: getHosts,\n    checkHost: checkHost,\n    objectifyOptions: objectifyOptions,\n    normaliseOptions: normaliseOptions,\n};\nfunction getHost(options, host, ws) {\n    if (ws)\n        host = (host == options.restHost && options.realtimeHost) || host || options.realtimeHost;\n    else\n        host = host || options.restHost;\n    return host;\n}\nexports.getHost = getHost;\nfunction getPort(options, tls) {\n    return tls || options.tls ? options.tlsPort : options.port;\n}\nexports.getPort = getPort;\nfunction getHttpScheme(options) {\n    return options.tls ? 'https://' : 'http://';\n}\nexports.getHttpScheme = getHttpScheme;\n// construct environment fallback hosts as per RSC15i\nfunction environmentFallbackHosts(environment) {\n    return [\n        environment + '-a-fallback.ably-realtime.com',\n        environment + '-b-fallback.ably-realtime.com',\n        environment + '-c-fallback.ably-realtime.com',\n        environment + '-d-fallback.ably-realtime.com',\n        environment + '-e-fallback.ably-realtime.com',\n    ];\n}\nexports.environmentFallbackHosts = environmentFallbackHosts;\nfunction getFallbackHosts(options) {\n    var fallbackHosts = options.fallbackHosts, httpMaxRetryCount = typeof options.httpMaxRetryCount !== 'undefined' ? options.httpMaxRetryCount : Defaults.httpMaxRetryCount;\n    return fallbackHosts ? Utils.arrChooseN(fallbackHosts, httpMaxRetryCount) : [];\n}\nexports.getFallbackHosts = getFallbackHosts;\nfunction getHosts(options) {\n    return [options.restHost].concat(getFallbackHosts(options));\n}\nexports.getHosts = getHosts;\nfunction checkHost(host) {\n    if (typeof host !== 'string') {\n        throw new errorinfo_1.default('host must be a string; was a ' + typeof host, 40000, 400);\n    }\n    if (!host.length) {\n        throw new errorinfo_1.default('host must not be zero-length', 40000, 400);\n    }\n}\nfunction getRealtimeHost(options, production, environment) {\n    if (options.realtimeHost)\n        return options.realtimeHost;\n    /* prefer setting realtimeHost to restHost as a custom restHost typically indicates\n     * a development environment is being used that can't be inferred by the library */\n    if (options.restHost) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Defaults.normaliseOptions', 'restHost is set to \"' +\n            options.restHost +\n            '\" but realtimeHost is not set, so setting realtimeHost to \"' +\n            options.restHost +\n            '\" too. If this is not what you want, please set realtimeHost explicitly.');\n        return options.restHost;\n    }\n    return production ? Defaults.REALTIME_HOST : environment + '-' + Defaults.REALTIME_HOST;\n}\nfunction getTimeouts(options) {\n    /* Allow values passed in options to override default timeouts */\n    var timeouts = {};\n    for (var prop in Defaults.TIMEOUTS) {\n        timeouts[prop] = options[prop] || Defaults.TIMEOUTS[prop];\n    }\n    return timeouts;\n}\nfunction getAgentString(options) {\n    var agentStr = Defaults.agent;\n    if (options.agents) {\n        for (var agent in options.agents) {\n            agentStr += ' ' + agent + '/' + options.agents[agent];\n        }\n    }\n    return agentStr;\n}\nexports.getAgentString = getAgentString;\nfunction objectifyOptions(options) {\n    if (typeof options == 'string') {\n        return options.indexOf(':') == -1 ? { token: options } : { key: options };\n    }\n    return options;\n}\nexports.objectifyOptions = objectifyOptions;\nfunction normaliseOptions(options) {\n    /* Deprecated options */\n    if (options.host) {\n        logger_1.default.deprecated('host', 'restHost');\n        options.restHost = options.host;\n    }\n    if (options.wsHost) {\n        logger_1.default.deprecated('wsHost', 'realtimeHost');\n        options.realtimeHost = options.wsHost;\n    }\n    if (options.queueEvents) {\n        logger_1.default.deprecated('queueEvents', 'queueMessages');\n        options.queueMessages = options.queueEvents;\n    }\n    if (options.fallbackHostsUseDefault) {\n        /* fallbackHostsUseDefault and fallbackHosts are mutually exclusive as per TO3k7 */\n        if (options.fallbackHosts) {\n            var msg = 'fallbackHosts and fallbackHostsUseDefault cannot both be set';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Defaults.normaliseOptions', msg);\n            throw new errorinfo_1.default(msg, 40000, 400);\n        }\n        /* default fallbacks can't be used with custom ports */\n        if (options.port || options.tlsPort) {\n            var msg = 'fallbackHostsUseDefault cannot be set when port or tlsPort are set';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Defaults.normaliseOptions', msg);\n            throw new errorinfo_1.default(msg, 40000, 400);\n        }\n        /* emit an appropriate deprecation warning */\n        if (options.environment) {\n            logger_1.default.deprecatedWithMsg('fallbackHostsUseDefault', 'There is no longer a need to set this when the environment option is also set since the library will now generate the correct fallback hosts using the environment option.');\n        }\n        else {\n            logger_1.default.deprecated('fallbackHostsUseDefault', 'fallbackHosts: Ably.Defaults.FALLBACK_HOSTS');\n        }\n        /* use the default fallback hosts as requested */\n        options.fallbackHosts = Defaults.FALLBACK_HOSTS;\n    }\n    /* options.recover as a boolean is deprecated, and therefore is not part of the public typing */\n    if (options.recover === true) {\n        logger_1.default.deprecated('{recover: true}', '{recover: function(lastConnectionDetails, cb) { cb(true); }}');\n        options.recover = function (lastConnectionDetails, cb) {\n            cb(true);\n        };\n    }\n    if (typeof options.recover === 'function' && options.closeOnUnload === true) {\n        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Defaults.normaliseOptions', 'closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter');\n        options.recover = undefined;\n    }\n    if (!('closeOnUnload' in options)) {\n        /* Have closeOnUnload default to true unless we have any indication that\n         * the user may want to recover the connection */\n        options.closeOnUnload = !options.recover;\n    }\n    if (options.transports && Utils.arrIn(options.transports, 'xhr')) {\n        logger_1.default.deprecated('transports: [\"xhr\"]', 'transports: [\"xhr_streaming\"]');\n        Utils.arrDeleteValue(options.transports, 'xhr');\n        options.transports.push('xhr_streaming');\n    }\n    if (!('queueMessages' in options))\n        options.queueMessages = true;\n    /* infer hosts and fallbacks based on the configured environment */\n    var environment = (options.environment && String(options.environment).toLowerCase()) || Defaults.ENVIRONMENT;\n    var production = !environment || environment === 'production';\n    if (!options.fallbackHosts && !options.restHost && !options.realtimeHost && !options.port && !options.tlsPort) {\n        options.fallbackHosts = production ? Defaults.FALLBACK_HOSTS : environmentFallbackHosts(environment);\n    }\n    var restHost = options.restHost || (production ? Defaults.REST_HOST : environment + '-' + Defaults.REST_HOST);\n    var realtimeHost = getRealtimeHost(options, production, environment);\n    Utils.arrForEach((options.fallbackHosts || []).concat(restHost, realtimeHost), checkHost);\n    options.port = options.port || Defaults.PORT;\n    options.tlsPort = options.tlsPort || Defaults.TLS_PORT;\n    if (!('tls' in options))\n        options.tls = true;\n    var timeouts = getTimeouts(options);\n    if ('useBinaryProtocol' in options) {\n        options.useBinaryProtocol = platform_1.default.Config.supportsBinary && options.useBinaryProtocol;\n    }\n    else {\n        options.useBinaryProtocol = platform_1.default.Config.preferBinary;\n    }\n    if (options.clientId) {\n        var headers = (options.headers = options.headers || {});\n        headers['X-Ably-ClientId'] = platform_1.default.BufferUtils.base64Encode(platform_1.default.BufferUtils.utf8Encode(options.clientId));\n    }\n    if (!('idempotentRestPublishing' in options)) {\n        options.idempotentRestPublishing = true;\n    }\n    if (options.promises && !platform_1.default.Config.Promise) {\n        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Defaults.normaliseOptions', '{promises: true} was specified, but no Promise constructor found; disabling promises');\n        options.promises = false;\n    }\n    var connectivityCheckParams = null;\n    var connectivityCheckUrl = options.connectivityCheckUrl;\n    if (options.connectivityCheckUrl) {\n        var _a = options.connectivityCheckUrl.split('?'), uri = _a[0], qs = _a[1];\n        connectivityCheckParams = qs ? Utils.parseQueryString(qs) : {};\n        if (uri.indexOf('://') === -1) {\n            uri = 'https://' + uri;\n        }\n        connectivityCheckUrl = uri;\n    }\n    return tslib_1.__assign(tslib_1.__assign({}, options), { useBinaryProtocol: 'useBinaryProtocol' in options\n            ? platform_1.default.Config.supportsBinary && options.useBinaryProtocol\n            : platform_1.default.Config.preferBinary, realtimeHost: realtimeHost, restHost: restHost, maxMessageSize: options.maxMessageSize || Defaults.maxMessageSize, timeouts: timeouts, connectivityCheckParams: connectivityCheckParams, connectivityCheckUrl: connectivityCheckUrl });\n}\nexports.normaliseOptions = normaliseOptions;\nexports.default = Defaults;\nfunction getDefaults(platformDefaults) {\n    return Object.assign(Defaults, platformDefaults);\n}\nexports.getDefaults = getDefaults;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __nested_webpack_require_96658__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_96658__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_96658__(3));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_96658__(2));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_96658__(4));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_96658__(1));\nfunction normaliseContext(context) {\n    if (!context || !context.channelOptions) {\n        return {\n            channelOptions: context,\n            plugins: {},\n            baseEncodedPreviousPayload: undefined,\n        };\n    }\n    return context;\n}\nfunction normalizeCipherOptions(options) {\n    if (options && options.cipher) {\n        if (!platform_1.default.Crypto)\n            throw new Error('Encryption not enabled; use ably.encryption.js instead');\n        var cipher = platform_1.default.Crypto.getCipher(options.cipher);\n        return {\n            cipher: cipher.cipherParams,\n            channelCipher: cipher.cipher,\n        };\n    }\n    return options !== null && options !== void 0 ? options : {};\n}\nfunction getMessageSize(msg) {\n    var size = 0;\n    if (msg.name) {\n        size += msg.name.length;\n    }\n    if (msg.clientId) {\n        size += msg.clientId.length;\n    }\n    if (msg.extras) {\n        size += JSON.stringify(msg.extras).length;\n    }\n    if (msg.data) {\n        size += Utils.dataSizeBytes(msg.data);\n    }\n    return size;\n}\nvar Message = /** @class */ (function () {\n    function Message() {\n    }\n    /**\n     * Overload toJSON() to intercept JSON.stringify()\n     * @return {*}\n     */\n    Message.prototype.toJSON = function () {\n        /* encode data to base64 if present and we're returning real JSON;\n         * although msgpack calls toJSON(), we know it is a stringify()\n         * call if it has a non-empty arguments list */\n        var encoding = this.encoding;\n        var data = this.data;\n        if (data && platform_1.default.BufferUtils.isBuffer(data)) {\n            if (arguments.length > 0) {\n                /* stringify call */\n                encoding = encoding ? encoding + '/base64' : 'base64';\n                data = platform_1.default.BufferUtils.base64Encode(data);\n            }\n            else {\n                /* Called by msgpack. toBuffer returns a datatype understandable by\n                 * that platform's msgpack implementation (Buffer in node, Uint8Array\n                 * in browsers) */\n                data = platform_1.default.BufferUtils.toBuffer(data);\n            }\n        }\n        return {\n            name: this.name,\n            id: this.id,\n            clientId: this.clientId,\n            connectionId: this.connectionId,\n            connectionKey: this.connectionKey,\n            extras: this.extras,\n            encoding: encoding,\n            data: data,\n        };\n    };\n    Message.prototype.toString = function () {\n        var result = '[Message';\n        if (this.name)\n            result += '; name=' + this.name;\n        if (this.id)\n            result += '; id=' + this.id;\n        if (this.timestamp)\n            result += '; timestamp=' + this.timestamp;\n        if (this.clientId)\n            result += '; clientId=' + this.clientId;\n        if (this.connectionId)\n            result += '; connectionId=' + this.connectionId;\n        if (this.encoding)\n            result += '; encoding=' + this.encoding;\n        if (this.extras)\n            result += '; extras =' + JSON.stringify(this.extras);\n        if (this.data) {\n            if (typeof this.data == 'string')\n                result += '; data=' + this.data;\n            else if (platform_1.default.BufferUtils.isBuffer(this.data))\n                result += '; data (buffer)=' + platform_1.default.BufferUtils.base64Encode(this.data);\n            else\n                result += '; data (json)=' + JSON.stringify(this.data);\n        }\n        if (this.extras)\n            result += '; extras=' + JSON.stringify(this.extras);\n        result += ']';\n        return result;\n    };\n    Message.encrypt = function (msg, options, callback) {\n        var data = msg.data, encoding = msg.encoding, cipher = options.channelCipher;\n        encoding = encoding ? encoding + '/' : '';\n        if (!platform_1.default.BufferUtils.isBuffer(data)) {\n            data = platform_1.default.BufferUtils.utf8Encode(String(data));\n            encoding = encoding + 'utf-8/';\n        }\n        cipher.encrypt(data, function (err, data) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            msg.data = data;\n            msg.encoding = encoding + 'cipher+' + cipher.algorithm;\n            callback(null, msg);\n        });\n    };\n    Message.encode = function (msg, options, callback) {\n        var data = msg.data;\n        var nativeDataType = typeof data == 'string' || platform_1.default.BufferUtils.isBuffer(data) || data === null || data === undefined;\n        if (!nativeDataType) {\n            if (Utils.isObject(data) || Utils.isArray(data)) {\n                msg.data = JSON.stringify(data);\n                msg.encoding = msg.encoding ? msg.encoding + '/json' : 'json';\n            }\n            else {\n                throw new errorinfo_1.default('Data type is unsupported', 40013, 400);\n            }\n        }\n        if (options != null && options.cipher) {\n            Message.encrypt(msg, options, callback);\n        }\n        else {\n            callback(null, msg);\n        }\n    };\n    Message.encodeArray = function (messages, options, callback) {\n        var processed = 0;\n        for (var i = 0; i < messages.length; i++) {\n            Message.encode(messages[i], options, function (err) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                processed++;\n                if (processed == messages.length) {\n                    callback(null, messages);\n                }\n            });\n        }\n    };\n    Message.decode = function (message, inputContext) {\n        var context = normaliseContext(inputContext);\n        var lastPayload = message.data;\n        var encoding = message.encoding;\n        if (encoding) {\n            var xforms = encoding.split('/');\n            var lastProcessedEncodingIndex = void 0, encodingsToProcess = xforms.length, data = message.data;\n            var xform = '';\n            try {\n                while ((lastProcessedEncodingIndex = encodingsToProcess) > 0) {\n                    // eslint-disable-next-line security/detect-unsafe-regex\n                    var match = xforms[--encodingsToProcess].match(/([-\\w]+)(\\+([\\w-]+))?/);\n                    if (!match)\n                        break;\n                    xform = match[1];\n                    switch (xform) {\n                        case 'base64':\n                            data = platform_1.default.BufferUtils.base64Decode(String(data));\n                            if (lastProcessedEncodingIndex == xforms.length) {\n                                lastPayload = data;\n                            }\n                            continue;\n                        case 'utf-8':\n                            data = platform_1.default.BufferUtils.utf8Decode(data);\n                            continue;\n                        case 'json':\n                            data = JSON.parse(data);\n                            continue;\n                        case 'cipher':\n                            if (context.channelOptions != null &&\n                                context.channelOptions.cipher &&\n                                context.channelOptions.channelCipher) {\n                                var xformAlgorithm = match[3], cipher = context.channelOptions.channelCipher;\n                                /* don't attempt to decrypt unless the cipher params are compatible */\n                                if (xformAlgorithm != cipher.algorithm) {\n                                    throw new Error('Unable to decrypt message with given cipher; incompatible cipher params');\n                                }\n                                data = cipher.decrypt(data);\n                                continue;\n                            }\n                            else {\n                                throw new Error('Unable to decrypt message; not an encrypted channel');\n                            }\n                        case 'vcdiff':\n                            if (!context.plugins || !context.plugins.vcdiff) {\n                                throw new errorinfo_1.default('Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)', 40019, 400);\n                            }\n                            if (typeof Uint8Array === 'undefined') {\n                                throw new errorinfo_1.default('Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)', 40020, 400);\n                            }\n                            try {\n                                var deltaBase = context.baseEncodedPreviousPayload;\n                                if (typeof deltaBase === 'string') {\n                                    deltaBase = platform_1.default.BufferUtils.utf8Encode(deltaBase);\n                                }\n                                /* vcdiff expects Uint8Arrays, can't copy with ArrayBuffers. (also, if we\n                                 * don't have a TextDecoder, deltaBase might be a WordArray here, so need\n                                 * to process it into a buffer anyway) */\n                                deltaBase = platform_1.default.BufferUtils.toBuffer(deltaBase);\n                                data = platform_1.default.BufferUtils.toBuffer(data);\n                                data = platform_1.default.BufferUtils.typedArrayToBuffer(context.plugins.vcdiff.decode(data, deltaBase));\n                                lastPayload = data;\n                            }\n                            catch (e) {\n                                throw new errorinfo_1.default('Vcdiff delta decode failed with ' + e, 40018, 400);\n                            }\n                            continue;\n                        default:\n                            throw new Error('Unknown encoding');\n                    }\n                }\n            }\n            catch (e) {\n                var err = e;\n                throw new errorinfo_1.default('Error processing the ' + xform + ' encoding, decoder returned ‘' + err.message + '’', err.code || 40013, 400);\n            }\n            finally {\n                message.encoding =\n                    lastProcessedEncodingIndex <= 0 ? null : xforms.slice(0, lastProcessedEncodingIndex).join('/');\n                message.data = data;\n            }\n        }\n        context.baseEncodedPreviousPayload = lastPayload;\n    };\n    Message.fromResponseBody = function (body, options, format) {\n        if (format) {\n            body = Utils.decodeBody(body, format);\n        }\n        for (var i = 0; i < body.length; i++) {\n            var msg = (body[i] = Message.fromValues(body[i]));\n            try {\n                Message.decode(msg, options);\n            }\n            catch (e) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Message.fromResponseBody()', e.toString());\n            }\n        }\n        return body;\n    };\n    Message.fromValues = function (values) {\n        return Object.assign(new Message(), values);\n    };\n    Message.fromValuesArray = function (values) {\n        var count = values.length, result = new Array(count);\n        for (var i = 0; i < count; i++)\n            result[i] = Message.fromValues(values[i]);\n        return result;\n    };\n    Message.fromEncoded = function (encoded, inputOptions) {\n        var msg = Message.fromValues(encoded);\n        var options = normalizeCipherOptions(inputOptions !== null && inputOptions !== void 0 ? inputOptions : null);\n        /* if decoding fails at any point, catch and return the message decoded to\n         * the fullest extent possible */\n        try {\n            Message.decode(msg, options);\n        }\n        catch (e) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Message.fromEncoded()', e.toString());\n        }\n        return msg;\n    };\n    Message.fromEncodedArray = function (encodedArray, options) {\n        return encodedArray.map(function (encoded) {\n            return Message.fromEncoded(encoded, options);\n        });\n    };\n    /* This should be called on encode()d (and encrypt()d) Messages (as it\n     * assumes the data is a string or buffer) */\n    Message.getMessagesSize = function (messages) {\n        var msg, total = 0;\n        for (var i = 0; i < messages.length; i++) {\n            msg = messages[i];\n            total += msg.size || (msg.size = getMessageSize(msg));\n        }\n        return total;\n    };\n    Message.serialize = Utils.encodeBody;\n    return Message;\n}());\nexports.default = Message;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __nested_webpack_require_109721__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_109721__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_109721__(1));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_109721__(4));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_109721__(9));\nvar presencemessage_1 = tslib_1.__importDefault(__nested_webpack_require_109721__(15));\nvar actions = {\n    HEARTBEAT: 0,\n    ACK: 1,\n    NACK: 2,\n    CONNECT: 3,\n    CONNECTED: 4,\n    DISCONNECT: 5,\n    DISCONNECTED: 6,\n    CLOSE: 7,\n    CLOSED: 8,\n    ERROR: 9,\n    ATTACH: 10,\n    ATTACHED: 11,\n    DETACH: 12,\n    DETACHED: 13,\n    PRESENCE: 14,\n    MESSAGE: 15,\n    SYNC: 16,\n    AUTH: 17,\n    ACTIVATE: 18,\n};\nvar ActionName = [];\nObject.keys(actions).forEach(function (name) {\n    ActionName[actions[name]] = name;\n});\nvar flags = {\n    /* Channel attach state flags */\n    HAS_PRESENCE: 1 << 0,\n    HAS_BACKLOG: 1 << 1,\n    RESUMED: 1 << 2,\n    TRANSIENT: 1 << 4,\n    ATTACH_RESUME: 1 << 5,\n    /* Channel mode flags */\n    PRESENCE: 1 << 16,\n    PUBLISH: 1 << 17,\n    SUBSCRIBE: 1 << 18,\n    PRESENCE_SUBSCRIBE: 1 << 19,\n};\nvar flagNames = Object.keys(flags);\nflags.MODE_ALL = flags.PRESENCE | flags.PUBLISH | flags.SUBSCRIBE | flags.PRESENCE_SUBSCRIBE;\nfunction toStringArray(array) {\n    var result = [];\n    if (array) {\n        for (var i = 0; i < array.length; i++) {\n            result.push(array[i].toString());\n        }\n    }\n    return '[ ' + result.join(', ') + ' ]';\n}\nvar simpleAttributes = 'id channel channelSerial connectionId count msgSerial timestamp'.split(' ');\nvar ProtocolMessage = /** @class */ (function () {\n    function ProtocolMessage() {\n        var _this = this;\n        this.hasFlag = function (flag) {\n            return (_this.flags & flags[flag]) > 0;\n        };\n    }\n    ProtocolMessage.prototype.setFlag = function (flag) {\n        return (this.flags = this.flags | flags[flag]);\n    };\n    ProtocolMessage.prototype.getMode = function () {\n        return this.flags && this.flags & flags.MODE_ALL;\n    };\n    ProtocolMessage.prototype.encodeModesToFlags = function (modes) {\n        var _this = this;\n        modes.forEach(function (mode) { return _this.setFlag(mode); });\n    };\n    ProtocolMessage.prototype.decodeModesFromFlags = function () {\n        var _this = this;\n        var modes = [];\n        ProtocolMessage.channelModes.forEach(function (mode) {\n            if (_this.hasFlag(mode)) {\n                modes.push(mode);\n            }\n        });\n        return modes.length > 0 ? modes : undefined;\n    };\n    ProtocolMessage.fromValues = function (values) {\n        return Object.assign(new ProtocolMessage(), values);\n    };\n    ProtocolMessage.Action = actions;\n    ProtocolMessage.channelModes = ['PRESENCE', 'PUBLISH', 'SUBSCRIBE', 'PRESENCE_SUBSCRIBE'];\n    ProtocolMessage.ActionName = ActionName;\n    ProtocolMessage.serialize = Utils.encodeBody;\n    ProtocolMessage.deserialize = function (serialized, format) {\n        var deserialized = Utils.decodeBody(serialized, format);\n        return ProtocolMessage.fromDeserialized(deserialized);\n    };\n    ProtocolMessage.fromDeserialized = function (deserialized) {\n        var error = deserialized.error;\n        if (error)\n            deserialized.error = errorinfo_1.default.fromValues(error);\n        var messages = deserialized.messages;\n        if (messages)\n            for (var i = 0; i < messages.length; i++)\n                messages[i] = message_1.default.fromValues(messages[i]);\n        var presence = deserialized.presence;\n        if (presence)\n            for (var i = 0; i < presence.length; i++)\n                presence[i] = presencemessage_1.default.fromValues(presence[i], true);\n        return Object.assign(new ProtocolMessage(), deserialized);\n    };\n    ProtocolMessage.stringify = function (msg) {\n        var result = '[ProtocolMessage';\n        if (msg.action !== undefined)\n            result += '; action=' + ProtocolMessage.ActionName[msg.action] || 0;\n        var attribute;\n        for (var attribIndex = 0; attribIndex < simpleAttributes.length; attribIndex++) {\n            attribute = simpleAttributes[attribIndex];\n            if (msg[attribute] !== undefined)\n                result += '; ' + attribute + '=' + msg[attribute];\n        }\n        if (msg.messages)\n            result += '; messages=' + toStringArray(message_1.default.fromValuesArray(msg.messages));\n        if (msg.presence)\n            result += '; presence=' + toStringArray(presencemessage_1.default.fromValuesArray(msg.presence));\n        if (msg.error)\n            result += '; error=' + errorinfo_1.default.fromValues(msg.error).toString();\n        if (msg.auth && msg.auth.accessToken)\n            result += '; token=' + msg.auth.accessToken;\n        if (msg.flags)\n            result += '; flags=' + flagNames.filter(msg.hasFlag).join(',');\n        if (msg.params) {\n            var stringifiedParams_1 = '';\n            Utils.forInOwnNonNullProperties(msg.params, function (prop) {\n                if (stringifiedParams_1.length > 0) {\n                    stringifiedParams_1 += '; ';\n                }\n                stringifiedParams_1 += prop + '=' + msg.params[prop];\n            });\n            if (stringifiedParams_1.length > 0) {\n                result += '; params=[' + stringifiedParams_1 + ']';\n            }\n        }\n        result += ']';\n        return result;\n    };\n    return ProtocolMessage;\n}());\nexports.default = ProtocolMessage;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_115275__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_115275__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        }\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_119298__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_119298__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_119298__(1));\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(10));\nvar transport_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(26));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(2));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(8));\nvar connectionerrors_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(20));\nvar auth_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(17));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(4));\nvar XHRStates_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(21));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_119298__(3));\n/* TODO: can remove once realtime sends protocol message responses for comet errors */\nfunction shouldBeErrorAction(err) {\n    var UNRESOLVABLE_ERROR_CODES = [80015, 80017, 80030];\n    if (err.code) {\n        if (auth_1.default.isTokenErr(err))\n            return false;\n        if (Utils.arrIn(UNRESOLVABLE_ERROR_CODES, err.code))\n            return true;\n        return err.code >= 40000 && err.code < 50000;\n    }\n    else {\n        /* Likely a network or transport error of some kind. Certainly not fatal to the connection */\n        return false;\n    }\n}\nfunction protocolMessageFromRawError(err) {\n    /* err will be either a legacy (non-protocolmessage) comet error response\n     * (which will have an err.code), or a xhr/network error (which won't). */\n    if (shouldBeErrorAction(err)) {\n        return [protocolmessage_1.default.fromValues({ action: protocolmessage_1.default.Action.ERROR, error: err })];\n    }\n    else {\n        return [protocolmessage_1.default.fromValues({ action: protocolmessage_1.default.Action.DISCONNECTED, error: err })];\n    }\n}\n/*\n * A base comet transport class\n */\nvar CometTransport = /** @class */ (function (_super) {\n    tslib_1.__extends(CometTransport, _super);\n    function CometTransport(connectionManager, auth, params) {\n        var _this = _super.call(this, connectionManager, auth, params, /* binary not supported for comet so force JSON protocol */ true) || this;\n        /* For comet, we could do the auth update by aborting the current recv and\n         * starting a new one with the new token, that'd be sufficient for realtime.\n         * Problem is JSONP - you can't cancel truly abort a recv once started. So\n         * we need to send an AUTH for jsonp. In which case it's simpler to keep all\n         * comet transports the same and do it for all of them. So we send the AUTH\n         * instead, and don't need to abort the recv */\n        _this.onAuthUpdated = function (tokenDetails) {\n            _this.authParams = { access_token: tokenDetails.token };\n        };\n        _this.stream = 'stream' in params ? params.stream : true;\n        _this.sendRequest = null;\n        _this.recvRequest = null;\n        _this.pendingCallback = null;\n        _this.pendingItems = null;\n        return _this;\n    }\n    CometTransport.prototype.connect = function () {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.connect()', 'starting');\n        transport_1.default.prototype.connect.call(this);\n        var params = this.params;\n        var options = params.options;\n        var host = defaults_1.default.getHost(options, params.host);\n        var port = defaults_1.default.getPort(options);\n        var cometScheme = options.tls ? 'https://' : 'http://';\n        this.baseUri = cometScheme + host + ':' + port + '/comet/';\n        var connectUri = this.baseUri + 'connect';\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.connect()', 'uri: ' + connectUri);\n        this.auth.getAuthParams(function (err, authParams) {\n            if (err) {\n                _this.disconnect(err);\n                return;\n            }\n            if (_this.isDisposed) {\n                return;\n            }\n            _this.authParams = authParams;\n            var connectParams = _this.params.getConnectParams(authParams);\n            if ('stream' in connectParams)\n                _this.stream = connectParams.stream;\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.connect()', 'connectParams:' + Utils.toQueryString(connectParams));\n            /* this will be the 'recvRequest' so this connection can stream messages */\n            var preconnected = false;\n            var connectRequest = (_this.recvRequest = _this.createRequest(connectUri, null, connectParams, null, _this.stream ? XHRStates_1.default.REQ_RECV_STREAM : XHRStates_1.default.REQ_RECV));\n            connectRequest.on('data', function (data) {\n                if (!_this.recvRequest) {\n                    /* the transport was disposed before we connected */\n                    return;\n                }\n                if (!preconnected) {\n                    preconnected = true;\n                    _this.emit('preconnect');\n                }\n                _this.onData(data);\n            });\n            connectRequest.on('complete', function (err) {\n                if (!_this.recvRequest) {\n                    /* the transport was disposed before we connected */\n                    err = err || new errorinfo_1.default('Request cancelled', 80003, 400);\n                }\n                _this.recvRequest = null;\n                /* Connect request may complete without a emitting 'data' event since that is not\n                 * emitted for e.g. a non-streamed error response. Still implies preconnect. */\n                if (!preconnected && !err) {\n                    preconnected = true;\n                    _this.emit('preconnect');\n                }\n                _this.onActivity();\n                if (err) {\n                    if (err.code) {\n                        /* A protocol error received from realtime. TODO: once realtime\n                         * consistendly sends errors wrapped in protocol messages, should be\n                         * able to remove this */\n                        _this.onData(protocolMessageFromRawError(err));\n                    }\n                    else {\n                        /* A network/xhr error. Don't bother wrapping in a protocol message,\n                         * just disconnect the transport */\n                        _this.disconnect(err);\n                    }\n                    return;\n                }\n                platform_1.default.Config.nextTick(function () {\n                    _this.recv();\n                });\n            });\n            connectRequest.exec();\n        });\n    };\n    CometTransport.prototype.requestClose = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.requestClose()');\n        this._requestCloseOrDisconnect(true);\n    };\n    CometTransport.prototype.requestDisconnect = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.requestDisconnect()');\n        this._requestCloseOrDisconnect(false);\n    };\n    CometTransport.prototype._requestCloseOrDisconnect = function (closing) {\n        var _this = this;\n        var closeOrDisconnectUri = closing ? this.closeUri : this.disconnectUri;\n        if (closeOrDisconnectUri) {\n            var request = this.createRequest(closeOrDisconnectUri, null, this.authParams, null, XHRStates_1.default.REQ_SEND);\n            request.on('complete', function (err) {\n                if (err) {\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'CometTransport.request' + (closing ? 'Close()' : 'Disconnect()'), 'request returned err = ' + Utils.inspectError(err));\n                    _this.finish('disconnected', err);\n                }\n            });\n            request.exec();\n        }\n    };\n    CometTransport.prototype.dispose = function () {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.dispose()', '');\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            if (this.recvRequest) {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'CometTransport.dispose()', 'aborting recv request');\n                this.recvRequest.abort();\n                this.recvRequest = null;\n            }\n            /* In almost all cases the transport will be finished before it's\n             * disposed. Finish here just to make sure. */\n            this.finish('disconnected', connectionerrors_1.default.disconnected());\n            platform_1.default.Config.nextTick(function () {\n                _this.emit('disposed');\n            });\n        }\n    };\n    CometTransport.prototype.onConnect = function (message) {\n        var _a;\n        /* if this transport has been disposed whilst awaiting connection, do nothing */\n        if (this.isDisposed) {\n            return;\n        }\n        /* the connectionKey in a comet connected response is really\n         * <instId>-<connectionKey> */\n        var connectionStr = (_a = message.connectionDetails) === null || _a === void 0 ? void 0 : _a.connectionKey;\n        transport_1.default.prototype.onConnect.call(this, message);\n        var baseConnectionUri = this.baseUri + connectionStr;\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'CometTransport.onConnect()', 'baseUri = ' + baseConnectionUri);\n        this.sendUri = baseConnectionUri + '/send';\n        this.recvUri = baseConnectionUri + '/recv';\n        this.closeUri = baseConnectionUri + '/close';\n        this.disconnectUri = baseConnectionUri + '/disconnect';\n    };\n    CometTransport.prototype.send = function (message) {\n        if (this.sendRequest) {\n            /* there is a pending send, so queue this message */\n            this.pendingItems = this.pendingItems || [];\n            this.pendingItems.push(message);\n            return;\n        }\n        /* send this, plus any pending, now */\n        var pendingItems = this.pendingItems || [];\n        pendingItems.push(message);\n        this.pendingItems = null;\n        this.sendItems(pendingItems);\n    };\n    CometTransport.prototype.sendAnyPending = function () {\n        var pendingItems = this.pendingItems;\n        if (!pendingItems) {\n            return;\n        }\n        this.pendingItems = null;\n        this.sendItems(pendingItems);\n    };\n    CometTransport.prototype.sendItems = function (items) {\n        var _this = this;\n        var sendRequest = (this.sendRequest = this.createRequest(this.sendUri, null, this.authParams, this.encodeRequest(items), XHRStates_1.default.REQ_SEND));\n        sendRequest.on('complete', function (err, data) {\n            if (err)\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'CometTransport.sendItems()', 'on complete: err = ' + Utils.inspectError(err));\n            _this.sendRequest = null;\n            /* the result of the request, even if a nack, is usually a protocol response\n             * contained in the data. An err is anomolous, and indicates some issue with the\n             * network,transport, or connection */\n            if (err) {\n                if (err.code) {\n                    /* A protocol error received from realtime. TODO: once realtime\n                     * consistendly sends errors wrapped in protocol messages, should be\n                     * able to remove this */\n                    _this.onData(protocolMessageFromRawError(err));\n                }\n                else {\n                    /* A network/xhr error. Don't bother wrapping in a protocol message,\n                     * just disconnect the transport */\n                    _this.disconnect(err);\n                }\n                return;\n            }\n            if (data) {\n                _this.onData(data);\n            }\n            if (_this.pendingItems) {\n                platform_1.default.Config.nextTick(function () {\n                    /* If there's a new send request by now, any pending items will have\n                     * been picked up by that; any new ones added since then will be\n                     * picked up after that one completes */\n                    if (!_this.sendRequest) {\n                        _this.sendAnyPending();\n                    }\n                });\n            }\n        });\n        sendRequest.exec();\n    };\n    CometTransport.prototype.recv = function () {\n        var _this = this;\n        /* do nothing if there is an active request, which might be streaming */\n        if (this.recvRequest)\n            return;\n        /* If we're no longer connected, do nothing */\n        if (!this.isConnected)\n            return;\n        var recvRequest = (this.recvRequest = this.createRequest(this.recvUri, null, this.authParams, null, this.stream ? XHRStates_1.default.REQ_RECV_STREAM : XHRStates_1.default.REQ_RECV_POLL));\n        recvRequest.on('data', function (data) {\n            _this.onData(data);\n        });\n        recvRequest.on('complete', function (err) {\n            _this.recvRequest = null;\n            /* A request completing must be considered activity, as realtime sends\n             * heartbeats every 15s since a request began, not every 15s absolutely */\n            _this.onActivity();\n            if (err) {\n                if (err.code) {\n                    /* A protocol error received from realtime. TODO: once realtime\n                     * consistently sends errors wrapped in protocol messages, should be\n                     * able to remove this */\n                    _this.onData(protocolMessageFromRawError(err));\n                }\n                else {\n                    /* A network/xhr error. Don't bother wrapping in a protocol message,\n                     * just disconnect the transport */\n                    _this.disconnect(err);\n                }\n                return;\n            }\n            platform_1.default.Config.nextTick(function () {\n                _this.recv();\n            });\n        });\n        recvRequest.exec();\n    };\n    CometTransport.prototype.onData = function (responseData) {\n        try {\n            var items = this.decodeResponse(responseData);\n            if (items && items.length)\n                for (var i = 0; i < items.length; i++)\n                    this.onProtocolMessage(protocolmessage_1.default.fromDeserialized(items[i]));\n        }\n        catch (e) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'CometTransport.onData()', 'Unexpected exception handing channel event: ' + e.stack);\n        }\n    };\n    CometTransport.prototype.encodeRequest = function (requestItems) {\n        return JSON.stringify(requestItems);\n    };\n    CometTransport.prototype.decodeResponse = function (responseData) {\n        if (typeof responseData == 'string')\n            return JSON.parse(responseData);\n        return responseData;\n    };\n    return CometTransport;\n}(transport_1.default));\nexports.default = CometTransport;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_134922__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_134922__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_134922__(3));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_134922__(1));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_134922__(2));\nvar auth_1 = tslib_1.__importDefault(__nested_webpack_require_134922__(17));\nvar HttpMethods_1 = tslib_1.__importDefault(__nested_webpack_require_134922__(18));\nvar errorinfo_1 = __nested_webpack_require_134922__(4);\nfunction withAuthDetails(rest, headers, params, errCallback, opCallback) {\n    if (rest.http.supportsAuthHeaders) {\n        rest.auth.getAuthHeaders(function (err, authHeaders) {\n            if (err)\n                errCallback(err);\n            else\n                opCallback(Utils.mixin(authHeaders, headers), params);\n        });\n    }\n    else {\n        rest.auth.getAuthParams(function (err, authParams) {\n            if (err)\n                errCallback(err);\n            else\n                opCallback(headers, Utils.mixin(authParams, params));\n        });\n    }\n}\nfunction unenvelope(callback, format) {\n    return function (err, body, outerHeaders, unpacked, outerStatusCode) {\n        if (err && !body) {\n            callback(err);\n            return;\n        }\n        if (!unpacked) {\n            try {\n                body = Utils.decodeBody(body, format);\n            }\n            catch (e) {\n                if (Utils.isErrorInfoOrPartialErrorInfo(e)) {\n                    callback(e);\n                }\n                else {\n                    callback(new errorinfo_1.PartialErrorInfo(Utils.inspectError(e), null));\n                }\n                return;\n            }\n        }\n        if (!body) {\n            callback(new errorinfo_1.PartialErrorInfo('unenvelope(): Response body is missing', null));\n            return;\n        }\n        var _a = body, wrappedStatusCode = _a.statusCode, response = _a.response, wrappedHeaders = _a.headers;\n        if (wrappedStatusCode === undefined) {\n            /* Envelope already unwrapped by the transport */\n            callback(err, body, outerHeaders, true, outerStatusCode);\n            return;\n        }\n        if (wrappedStatusCode < 200 || wrappedStatusCode >= 300) {\n            /* handle wrapped errors */\n            var wrappedErr = (response && response.error) || err;\n            if (!wrappedErr) {\n                wrappedErr = new Error('Error in unenveloping ' + body);\n                wrappedErr.statusCode = wrappedStatusCode;\n            }\n            callback(wrappedErr, response, wrappedHeaders, true, wrappedStatusCode);\n            return;\n        }\n        callback(err, response, wrappedHeaders, true, wrappedStatusCode);\n    };\n}\nfunction paramString(params) {\n    var paramPairs = [];\n    if (params) {\n        for (var needle in params) {\n            paramPairs.push(needle + '=' + params[needle]);\n        }\n    }\n    return paramPairs.join('&');\n}\nfunction urlFromPathAndParams(path, params) {\n    return path + (params ? '?' : '') + paramString(params);\n}\nfunction logResponseHandler(callback, method, path, params) {\n    return function (err, body, headers, unpacked, statusCode) {\n        if (err) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Resource.' + method + '()', 'Received Error; ' + urlFromPathAndParams(path, params) + '; Error: ' + Utils.inspectError(err));\n        }\n        else {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Resource.' + method + '()', 'Received; ' +\n                urlFromPathAndParams(path, params) +\n                '; Headers: ' +\n                paramString(headers) +\n                '; StatusCode: ' +\n                statusCode +\n                '; Body: ' +\n                (platform_1.default.BufferUtils.isBuffer(body) ? body.toString() : body));\n        }\n        if (callback) {\n            callback(err, body, headers, unpacked, statusCode);\n        }\n    };\n}\nvar Resource = /** @class */ (function () {\n    function Resource() {\n    }\n    Resource.get = function (rest, path, headers, params, envelope, callback) {\n        Resource.do(HttpMethods_1.default.Get, rest, path, null, headers, params, envelope, callback);\n    };\n    Resource.delete = function (rest, path, headers, params, envelope, callback) {\n        Resource.do(HttpMethods_1.default.Delete, rest, path, null, headers, params, envelope, callback);\n    };\n    Resource.post = function (rest, path, body, headers, params, envelope, callback) {\n        Resource.do(HttpMethods_1.default.Post, rest, path, body, headers, params, envelope, callback);\n    };\n    Resource.patch = function (rest, path, body, headers, params, envelope, callback) {\n        Resource.do(HttpMethods_1.default.Patch, rest, path, body, headers, params, envelope, callback);\n    };\n    Resource.put = function (rest, path, body, headers, params, envelope, callback) {\n        Resource.do(HttpMethods_1.default.Put, rest, path, body, headers, params, envelope, callback);\n    };\n    Resource.do = function (method, rest, path, body, headers, params, envelope, callback) {\n        if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n            callback = logResponseHandler(callback, method, path, params);\n        }\n        if (envelope) {\n            callback = callback && unenvelope(callback, envelope);\n            (params = params || {})['envelope'] = envelope;\n        }\n        function doRequest(headers, params) {\n            var _a;\n            if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Resource.' + method + '()', 'Sending; ' + urlFromPathAndParams(path, params));\n            }\n            if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n                var decodedBody = body;\n                if (((_a = headers['content-type']) === null || _a === void 0 ? void 0 : _a.indexOf('msgpack')) > 0) {\n                    try {\n                        decodedBody = platform_1.default.Config.msgpack.decode(body);\n                    }\n                    catch (decodeErr) {\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Resource.' + method + '()', 'Sending MsgPack Decoding Error: ' + Utils.inspectError(decodeErr));\n                    }\n                }\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Resource.' + method + '()', 'Sending; ' + urlFromPathAndParams(path, params) + '; Body: ' + decodedBody);\n            }\n            rest.http.do(method, rest, path, headers, body, params, function (err, res, resHeaders, unpacked, statusCode) {\n                if (err && auth_1.default.isTokenErr(err)) {\n                    /* token has expired, so get a new one */\n                    rest.auth.authorize(null, null, function (err) {\n                        if (err) {\n                            callback(err);\n                            return;\n                        }\n                        /* retry ... */\n                        withAuthDetails(rest, headers, params, callback, doRequest);\n                    });\n                    return;\n                }\n                callback(err, res, resHeaders, unpacked, statusCode);\n            });\n        }\n        withAuthDetails(rest, headers, params, callback, doRequest);\n    };\n    return Resource;\n}());\nexports.default = Resource;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_142403__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_142403__(0);\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_142403__(2));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_142403__(3));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_142403__(9));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_142403__(1));\nfunction toActionValue(actionString) {\n    return PresenceMessage.Actions.indexOf(actionString);\n}\nvar PresenceMessage = /** @class */ (function () {\n    function PresenceMessage() {\n    }\n    /* Returns whether this presenceMessage is synthesized, i.e. was not actually\n     * sent by the connection (usually means a leave event sent 15s after a\n     * disconnection). This is useful because synthesized messages cannot be\n     * compared for newness by id lexicographically - RTP2b1\n     */\n    PresenceMessage.prototype.isSynthesized = function () {\n        if (!this.id || !this.connectionId) {\n            return true;\n        }\n        return this.id.substring(this.connectionId.length, 0) !== this.connectionId;\n    };\n    /* RTP2b2 */\n    PresenceMessage.prototype.parseId = function () {\n        if (!this.id)\n            throw new Error('parseId(): Presence message does not contain an id');\n        var parts = this.id.split(':');\n        return {\n            connectionId: parts[0],\n            msgSerial: parseInt(parts[1], 10),\n            index: parseInt(parts[2], 10),\n        };\n    };\n    /**\n     * Overload toJSON() to intercept JSON.stringify()\n     * @return {*}\n     */\n    PresenceMessage.prototype.toJSON = function () {\n        /* encode data to base64 if present and we're returning real JSON;\n         * although msgpack calls toJSON(), we know it is a stringify()\n         * call if it has a non-empty arguments list */\n        var data = this.data;\n        var encoding = this.encoding;\n        if (data && platform_1.default.BufferUtils.isBuffer(data)) {\n            if (arguments.length > 0) {\n                /* stringify call */\n                encoding = encoding ? encoding + '/base64' : 'base64';\n                data = platform_1.default.BufferUtils.base64Encode(data);\n            }\n            else {\n                /* Called by msgpack. toBuffer returns a datatype understandable by\n                 * that platform's msgpack implementation (Buffer in node, Uint8Array\n                 * in browsers) */\n                data = platform_1.default.BufferUtils.toBuffer(data);\n            }\n        }\n        return {\n            id: this.id,\n            clientId: this.clientId,\n            /* Convert presence action back to an int for sending to Ably */\n            action: toActionValue(this.action),\n            data: data,\n            encoding: encoding,\n            extras: this.extras,\n        };\n    };\n    PresenceMessage.prototype.toString = function () {\n        var result = '[PresenceMessage';\n        result += '; action=' + this.action;\n        if (this.id)\n            result += '; id=' + this.id;\n        if (this.timestamp)\n            result += '; timestamp=' + this.timestamp;\n        if (this.clientId)\n            result += '; clientId=' + this.clientId;\n        if (this.connectionId)\n            result += '; connectionId=' + this.connectionId;\n        if (this.encoding)\n            result += '; encoding=' + this.encoding;\n        if (this.data) {\n            if (typeof this.data == 'string')\n                result += '; data=' + this.data;\n            else if (platform_1.default.BufferUtils.isBuffer(this.data))\n                result += '; data (buffer)=' + platform_1.default.BufferUtils.base64Encode(this.data);\n            else\n                result += '; data (json)=' + JSON.stringify(this.data);\n        }\n        if (this.extras) {\n            result += '; extras=' + JSON.stringify(this.extras);\n        }\n        result += ']';\n        return result;\n    };\n    PresenceMessage.fromResponseBody = function (body, options, format) {\n        var messages = [];\n        if (format) {\n            body = Utils.decodeBody(body, format);\n        }\n        for (var i = 0; i < body.length; i++) {\n            var msg = (messages[i] = PresenceMessage.fromValues(body[i], true));\n            try {\n                PresenceMessage.decode(msg, options);\n            }\n            catch (e) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'PresenceMessage.fromResponseBody()', e.toString());\n            }\n        }\n        return messages;\n    };\n    PresenceMessage.fromValues = function (values, stringifyAction) {\n        if (stringifyAction) {\n            values.action = PresenceMessage.Actions[values.action];\n        }\n        return Object.assign(new PresenceMessage(), values);\n    };\n    PresenceMessage.fromValuesArray = function (values) {\n        var count = values.length, result = new Array(count);\n        for (var i = 0; i < count; i++)\n            result[i] = PresenceMessage.fromValues(values[i]);\n        return result;\n    };\n    PresenceMessage.fromEncoded = function (encoded, options) {\n        var msg = PresenceMessage.fromValues(encoded, true);\n        /* if decoding fails at any point, catch and return the message decoded to\n         * the fullest extent possible */\n        try {\n            PresenceMessage.decode(msg, options !== null && options !== void 0 ? options : {});\n        }\n        catch (e) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'PresenceMessage.fromEncoded()', e.toString());\n        }\n        return msg;\n    };\n    PresenceMessage.fromEncodedArray = function (encodedArray, options) {\n        return encodedArray.map(function (encoded) {\n            return PresenceMessage.fromEncoded(encoded, options);\n        });\n    };\n    PresenceMessage.fromData = function (data) {\n        if (data instanceof PresenceMessage) {\n            return data;\n        }\n        return PresenceMessage.fromValues({\n            data: data,\n        });\n    };\n    PresenceMessage.Actions = ['absent', 'present', 'enter', 'leave', 'update'];\n    PresenceMessage.encode = message_1.default.encode;\n    PresenceMessage.decode = message_1.default.decode;\n    PresenceMessage.getMessagesSize = message_1.default.getMessagesSize;\n    return PresenceMessage;\n}());\nexports.default = PresenceMessage;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_148797__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_148797__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_148797__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_148797__(7));\nvar errorinfo_1 = tslib_1.__importStar(__nested_webpack_require_148797__(4));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_148797__(2));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_148797__(8));\nvar XHRStates_1 = tslib_1.__importDefault(__nested_webpack_require_148797__(21));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_148797__(3));\nfunction isAblyError(responseBody, headers) {\n    return Utils.arrIn(Utils.allToLowerCase(Utils.keysArray(headers)), 'x-ably-errorcode');\n}\nfunction getAblyError(responseBody, headers) {\n    if (isAblyError(responseBody, headers)) {\n        return responseBody.error && errorinfo_1.default.fromValues(responseBody.error);\n    }\n}\nvar noop = function () { };\nvar idCounter = 0;\nvar pendingRequests = {};\nvar isIE = typeof global !== 'undefined' && global.XDomainRequest;\nfunction ieVersion() {\n    var match = navigator.userAgent.toString().match(/MSIE\\s([\\d.]+)/);\n    return match && Number(match[1]);\n}\nfunction needJsonEnvelope() {\n    /* IE 10 xhr bug: http://stackoverflow.com/a/16320339 */\n    var version;\n    return isIE && (version = ieVersion()) && version === 10;\n}\nfunction getHeader(xhr, header) {\n    return xhr.getResponseHeader && xhr.getResponseHeader(header);\n}\n/* Safari mysteriously returns 'Identity' for transfer-encoding when in fact\n * it is 'chunked'. So instead, decide that it is chunked when\n * transfer-encoding is present or content-length is absent.  ('or' because\n * when using http2 streaming, there's no transfer-encoding header, but can\n * still deduce streaming from lack of content-length) */\nfunction isEncodingChunked(xhr) {\n    return (xhr.getResponseHeader && (xhr.getResponseHeader('transfer-encoding') || !xhr.getResponseHeader('content-length')));\n}\nfunction getHeadersAsObject(xhr) {\n    var headerPairs = Utils.trim(xhr.getAllResponseHeaders()).split('\\r\\n');\n    var headers = {};\n    for (var i = 0; i < headerPairs.length; i++) {\n        var parts = headerPairs[i].split(':').map(Utils.trim);\n        headers[parts[0].toLowerCase()] = parts[1];\n    }\n    return headers;\n}\nvar XHRRequest = /** @class */ (function (_super) {\n    tslib_1.__extends(XHRRequest, _super);\n    function XHRRequest(uri, headers, params, body, requestMode, timeouts, method) {\n        var _this = _super.call(this) || this;\n        params = params || {};\n        params.rnd = Utils.cheapRandStr();\n        if (needJsonEnvelope() && !params.envelope)\n            params.envelope = 'json';\n        _this.uri = uri + Utils.toQueryString(params);\n        _this.headers = headers || {};\n        _this.body = body;\n        _this.method = method ? method.toUpperCase() : Utils.isEmptyArg(body) ? 'GET' : 'POST';\n        _this.requestMode = requestMode;\n        _this.timeouts = timeouts;\n        _this.timedOut = false;\n        _this.requestComplete = false;\n        _this.id = String(++idCounter);\n        pendingRequests[_this.id] = _this;\n        return _this;\n    }\n    XHRRequest.createRequest = function (uri, headers, params, body, requestMode, timeouts, method) {\n        /* XHR requests are used either with the context being a realtime\n         * transport, or with timeouts passed in (for when used by a rest client),\n         * or completely standalone.  Use the appropriate timeouts in each case */\n        var _timeouts = timeouts || defaults_1.default.TIMEOUTS;\n        return new XHRRequest(uri, headers, Utils.copy(params), body, requestMode, _timeouts, method);\n    };\n    XHRRequest.prototype.complete = function (err, body, headers, unpacked, statusCode) {\n        if (!this.requestComplete) {\n            this.requestComplete = true;\n            if (!err && body) {\n                this.emit('data', body);\n            }\n            this.emit('complete', err, body, headers, unpacked, statusCode);\n            this.dispose();\n        }\n    };\n    XHRRequest.prototype.abort = function () {\n        this.dispose();\n    };\n    XHRRequest.prototype.exec = function () {\n        var _this = this;\n        var headers = this.headers;\n        var timeout = this.requestMode == XHRStates_1.default.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout, timer = (this.timer = setTimeout(function () {\n            _this.timedOut = true;\n            xhr.abort();\n        }, timeout)), method = this.method, xhr = (this.xhr = new XMLHttpRequest()), accept = headers['accept'];\n        var body = this.body;\n        var responseType = 'text';\n        if (!accept) {\n            // Default to JSON\n            headers['accept'] = 'application/json';\n        }\n        else if (accept.indexOf('application/x-msgpack') === 0) {\n            // Msgpack responses will be typed as ArrayBuffer\n            responseType = 'arraybuffer';\n        }\n        if (body) {\n            var contentType = headers['content-type'] || (headers['content-type'] = 'application/json');\n            if (contentType.indexOf('application/json') > -1 && typeof body != 'string')\n                body = JSON.stringify(body);\n        }\n        // Can probably remove this directive if https://github.com/nodesecurity/eslint-plugin-security/issues/26 is resolved\n        // eslint-disable-next-line security/detect-non-literal-fs-filename\n        xhr.open(method, this.uri, true);\n        xhr.responseType = responseType;\n        if ('authorization' in headers) {\n            xhr.withCredentials = true;\n        }\n        for (var h in headers)\n            xhr.setRequestHeader(h, headers[h]);\n        var errorHandler = function (errorEvent, message, code, statusCode) {\n            var _a;\n            var errorMessage = message + ' (event type: ' + errorEvent.type + ')';\n            if ((_a = _this === null || _this === void 0 ? void 0 : _this.xhr) === null || _a === void 0 ? void 0 : _a.statusText)\n                errorMessage += ', current statusText is ' + _this.xhr.statusText;\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Request.on' + errorEvent.type + '()', errorMessage);\n            _this.complete(new errorinfo_1.PartialErrorInfo(errorMessage, code, statusCode));\n        };\n        xhr.onerror = function (errorEvent) {\n            errorHandler(errorEvent, 'XHR error occurred', null, 400);\n        };\n        xhr.onabort = function (errorEvent) {\n            if (_this.timedOut) {\n                errorHandler(errorEvent, 'Request aborted due to request timeout expiring', null, 408);\n            }\n            else {\n                errorHandler(errorEvent, 'Request cancelled', null, 400);\n            }\n        };\n        xhr.ontimeout = function (errorEvent) {\n            errorHandler(errorEvent, 'Request timed out', null, 408);\n        };\n        var streaming;\n        var statusCode;\n        var successResponse;\n        var streamPos = 0;\n        var unpacked = false;\n        var onResponse = function () {\n            clearTimeout(timer);\n            successResponse = statusCode < 400;\n            if (statusCode == 204) {\n                _this.complete(null, null, null, null, statusCode);\n                return;\n            }\n            streaming = _this.requestMode == XHRStates_1.default.REQ_RECV_STREAM && successResponse && isEncodingChunked(xhr);\n        };\n        var onEnd = function () {\n            var parsedResponse;\n            try {\n                var contentType = getHeader(xhr, 'content-type');\n                /* Be liberal in what we accept; buggy auth servers may respond\n                 * without the correct contenttype, but assume they're still\n                 * responding with json */\n                var json = contentType ? contentType.indexOf('application/json') >= 0 : xhr.responseType == 'text';\n                if (json) {\n                    /* If we requested msgpack but server responded with json, then since\n                     * we set the responseType expecting msgpack, the response will be\n                     * an ArrayBuffer containing json */\n                    var jsonResponseBody = xhr.responseType === 'arraybuffer'\n                        ? platform_1.default.BufferUtils.utf8Decode(xhr.response)\n                        : String(xhr.responseText);\n                    if (jsonResponseBody.length) {\n                        parsedResponse = JSON.parse(jsonResponseBody);\n                    }\n                    else {\n                        parsedResponse = jsonResponseBody;\n                    }\n                    unpacked = true;\n                }\n                else {\n                    parsedResponse = xhr.response;\n                }\n                if (parsedResponse.response !== undefined) {\n                    /* unwrap JSON envelope */\n                    statusCode = parsedResponse.statusCode;\n                    successResponse = statusCode < 400;\n                    headers = parsedResponse.headers;\n                    parsedResponse = parsedResponse.response;\n                }\n                else {\n                    headers = getHeadersAsObject(xhr);\n                }\n            }\n            catch (e) {\n                _this.complete(new errorinfo_1.PartialErrorInfo('Malformed response body from server: ' + e.message, null, 400));\n                return;\n            }\n            /* If response is an array, it's an array of protocol messages -- even if\n             * is contains an error action (hence the nonsuccess statuscode), we can\n             * consider the request to have succeeded, just pass it on to\n             * onProtocolMessage to decide what to do */\n            if (successResponse || Utils.isArray(parsedResponse)) {\n                _this.complete(null, parsedResponse, headers, unpacked, statusCode);\n                return;\n            }\n            var err = getAblyError(parsedResponse, headers);\n            if (!err) {\n                err = new errorinfo_1.PartialErrorInfo('Error response received from server: ' +\n                    statusCode +\n                    ' body was: ' +\n                    platform_1.default.Config.inspect(parsedResponse), null, statusCode);\n            }\n            _this.complete(err, parsedResponse, headers, unpacked, statusCode);\n        };\n        function onProgress() {\n            var responseText = xhr.responseText;\n            var bodyEnd = responseText.length - 1;\n            var idx, chunk;\n            while (streamPos < bodyEnd && (idx = responseText.indexOf('\\n', streamPos)) > -1) {\n                chunk = responseText.slice(streamPos, idx);\n                streamPos = idx + 1;\n                onChunk(chunk);\n            }\n        }\n        var onChunk = function (chunk) {\n            try {\n                chunk = JSON.parse(chunk);\n            }\n            catch (e) {\n                _this.complete(new errorinfo_1.PartialErrorInfo('Malformed response body from server: ' + e.message, null, 400));\n                return;\n            }\n            _this.emit('data', chunk);\n        };\n        var onStreamEnd = function () {\n            onProgress();\n            _this.streamComplete = true;\n            platform_1.default.Config.nextTick(function () {\n                _this.complete();\n            });\n        };\n        xhr.onreadystatechange = function () {\n            var readyState = xhr.readyState;\n            if (readyState < 3)\n                return;\n            if (xhr.status !== 0) {\n                if (statusCode === undefined) {\n                    statusCode = xhr.status;\n                    /* IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450 */\n                    if (statusCode === 1223)\n                        statusCode = 204;\n                    onResponse();\n                }\n                if (readyState == 3 && streaming) {\n                    onProgress();\n                }\n                else if (readyState == 4) {\n                    if (streaming)\n                        onStreamEnd();\n                    else\n                        onEnd();\n                }\n            }\n        };\n        xhr.send(body);\n    };\n    XHRRequest.prototype.dispose = function () {\n        var xhr = this.xhr;\n        if (xhr) {\n            xhr.onreadystatechange = xhr.onerror = xhr.onabort = xhr.ontimeout = noop;\n            this.xhr = null;\n            var timer = this.timer;\n            if (timer) {\n                clearTimeout(timer);\n                this.timer = null;\n            }\n            if (!this.requestComplete)\n                xhr.abort();\n        }\n        delete pendingRequests[this.id];\n    };\n    return XHRRequest;\n}(eventemitter_1.default));\nexports.default = XHRRequest;\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_148797__(13)))\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_161753__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_161753__(0);\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(2));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_161753__(1));\nvar multicaster_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(23));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(4));\nvar hmac_sha256_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(45));\nvar enc_base64_1 = __nested_webpack_require_161753__(11);\nvar HttpMethods_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(18));\nvar HttpStatusCodes_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(25));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(3));\nvar resource_1 = tslib_1.__importDefault(__nested_webpack_require_161753__(14));\nvar MAX_TOKEN_LENGTH = Math.pow(2, 17);\nfunction noop() { }\nfunction random() {\n    return ('000000' + Math.floor(Math.random() * 1e16)).slice(-16);\n}\nfunction isRealtime(client) {\n    return !!client.connection;\n}\n/* A client auth callback may give errors in any number of formats; normalise to an ErrorInfo or PartialErrorInfo */\nfunction normaliseAuthcallbackError(err) {\n    if (!Utils.isErrorInfoOrPartialErrorInfo(err)) {\n        return new errorinfo_1.default(Utils.inspectError(err), err.code || 40170, err.statusCode || 401);\n    }\n    /* network errors will not have an inherent error code */\n    if (!err.code) {\n        if (err.statusCode === 403) {\n            err.code = 40300;\n        }\n        else {\n            err.code = 40170;\n            /* normalise statusCode to 401 per RSA4e */\n            err.statusCode = 401;\n        }\n    }\n    return err;\n}\nvar hmac = function (text, key) {\n    if (platform_1.default.Config.createHmac) {\n        var inst = platform_1.default.Config.createHmac('SHA256', key);\n        inst.update(text);\n        return inst.digest('base64');\n    }\n    return (0, enc_base64_1.stringify)((0, hmac_sha256_1.default)(text, key));\n};\nfunction c14n(capability) {\n    if (!capability)\n        return '';\n    if (typeof capability == 'string')\n        capability = JSON.parse(capability);\n    var c14nCapability = Object.create(null);\n    var keys = Utils.keysArray(capability, true);\n    if (!keys)\n        return '';\n    keys.sort();\n    for (var i = 0; i < keys.length; i++) {\n        c14nCapability[keys[i]] = capability[keys[i]].sort();\n    }\n    return JSON.stringify(c14nCapability);\n}\nfunction logAndValidateTokenAuthMethod(authOptions) {\n    if (authOptions.authCallback) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth()', 'using token auth with authCallback');\n    }\n    else if (authOptions.authUrl) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth()', 'using token auth with authUrl');\n    }\n    else if (authOptions.key) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth()', 'using token auth with client-side signing');\n    }\n    else if (authOptions.tokenDetails) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth()', 'using token auth with supplied token only');\n    }\n    else {\n        var msg = 'authOptions must include valid authentication parameters';\n        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth()', msg);\n        throw new Error(msg);\n    }\n}\nfunction basicAuthForced(options) {\n    return 'useTokenAuth' in options && !options.useTokenAuth;\n}\n/* RSA4 */\nfunction useTokenAuth(options) {\n    return (options.useTokenAuth ||\n        (!basicAuthForced(options) && (options.authCallback || options.authUrl || options.token || options.tokenDetails)));\n}\n/* RSA4a */\nfunction noWayToRenew(options) {\n    return !options.key && !options.authCallback && !options.authUrl;\n}\nvar trId = 0;\nfunction getTokenRequestId() {\n    return trId++;\n}\nvar Auth = /** @class */ (function () {\n    function Auth(client, options) {\n        // This initialization is always overwritten and only used to prevent a TypeScript compiler error\n        this.authOptions = {};\n        this.client = client;\n        this.tokenParams = options.defaultTokenParams || {};\n        /* The id of the current token request if one is in progress, else null */\n        this.currentTokenRequestId = null;\n        this.waitingForTokenRequest = null;\n        if (useTokenAuth(options)) {\n            /* Token auth */\n            if (options.key && !hmac) {\n                var msg = 'client-side token request signing not supported';\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth()', msg);\n                throw new Error(msg);\n            }\n            if (noWayToRenew(options)) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth()', 'Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help');\n            }\n            this._saveTokenOptions(options.defaultTokenParams, options);\n            logAndValidateTokenAuthMethod(this.authOptions);\n        }\n        else {\n            /* Basic auth */\n            if (!options.key) {\n                var msg = 'No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)';\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth()', msg);\n                throw new errorinfo_1.default(msg, 40160, 401);\n            }\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth()', 'anonymous, using basic auth');\n            this._saveBasicOptions(options);\n        }\n    }\n    Auth.prototype.authorize = function (tokenParams, authOptions, callback) {\n        var _this = this;\n        var _authOptions;\n        /* shuffle and normalise arguments as necessary */\n        if (typeof tokenParams == 'function' && !callback) {\n            callback = tokenParams;\n            _authOptions = tokenParams = null;\n        }\n        else if (typeof authOptions == 'function' && !callback) {\n            callback = authOptions;\n            _authOptions = null;\n        }\n        else {\n            _authOptions = authOptions;\n        }\n        if (!callback) {\n            if (this.client.options.promises) {\n                return Utils.promisify(this, 'authorize', arguments);\n            }\n        }\n        /* RSA10a: authorize() call implies token auth. If a key is passed it, we\n         * just check if it doesn't clash and assume we're generating a token from it */\n        if (_authOptions && _authOptions.key && this.authOptions.key !== _authOptions.key) {\n            throw new errorinfo_1.default('Unable to update auth options with incompatible key', 40102, 401);\n        }\n        if (_authOptions && 'force' in _authOptions) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.authorize', 'Deprecation warning: specifying {force: true} in authOptions is no longer necessary, authorize() now always gets a new token. Please remove this, as in version 1.0 and later, having a non-null authOptions will overwrite stored library authOptions, which may not be what you want');\n            /* Emulate the old behaviour: if 'force' was the only member of authOptions,\n             * set it to null so it doesn't overwrite stored. TODO: remove in version 1.0 */\n            if (Utils.isOnlyPropIn(_authOptions, 'force')) {\n                _authOptions = null;\n            }\n        }\n        this._forceNewToken(tokenParams, _authOptions, function (err, tokenDetails) {\n            if (err) {\n                if (_this.client.connection && err.statusCode === HttpStatusCodes_1.default.Forbidden) {\n                    /* Per RSA4d & RSA4d1, if the auth server explicitly repudiates our right to\n                     * stay connecticed by returning a 403, we actively disconnect the connection\n                     * even though we may well still have time left in the old token. */\n                    _this.client.connection.connectionManager.actOnErrorFromAuthorize(err);\n                }\n                callback === null || callback === void 0 ? void 0 : callback(err);\n                return;\n            }\n            /* RTC8\n             * - When authorize called by an end user and have a realtime connection,\n             * don't call back till new token has taken effect.\n             * - Use this.client.connection as a proxy for (this.client instanceof Realtime),\n             * which doesn't work in node as Realtime isn't part of the vm context for Rest clients */\n            if (isRealtime(_this.client)) {\n                _this.client.connection.connectionManager.onAuthUpdated(tokenDetails, callback || noop);\n            }\n            else {\n                callback === null || callback === void 0 ? void 0 : callback(null, tokenDetails);\n            }\n        });\n    };\n    Auth.prototype.authorise = function (tokenParams, authOptions, callback) {\n        logger_1.default.deprecated('Auth.authorise', 'Auth.authorize');\n        this.authorize(tokenParams, authOptions, callback);\n    };\n    /* For internal use, eg by connectionManager - useful when want to call back\n     * as soon as we have the new token, rather than waiting for it to take\n     * effect on the connection as #authorize does */\n    Auth.prototype._forceNewToken = function (tokenParams, authOptions, callback) {\n        var _this = this;\n        /* get rid of current token even if still valid */\n        this.tokenDetails = null;\n        /* _save normalises the tokenParams and authOptions and updates the auth\n         * object. All subsequent operations should use the values on `this`,\n         * not the passed in ones. */\n        this._saveTokenOptions(tokenParams, authOptions);\n        logAndValidateTokenAuthMethod(this.authOptions);\n        this._ensureValidAuthCredentials(true, function (err, tokenDetails) {\n            /* RSA10g */\n            delete _this.tokenParams.timestamp;\n            delete _this.authOptions.queryTime;\n            callback(err, tokenDetails);\n        });\n    };\n    Auth.prototype.requestToken = function (tokenParams, authOptions, callback) {\n        var _this = this;\n        /* shuffle and normalise arguments as necessary */\n        if (typeof tokenParams == 'function' && !callback) {\n            callback = tokenParams;\n            authOptions = tokenParams = null;\n        }\n        else if (typeof authOptions == 'function' && !callback) {\n            callback = authOptions;\n            authOptions = null;\n        }\n        if (!callback && this.client.options.promises) {\n            return Utils.promisify(this, 'requestToken', arguments);\n        }\n        /* RSA8e: if authOptions passed in, they're used instead of stored, don't merge them */\n        authOptions = authOptions || this.authOptions;\n        tokenParams = tokenParams || Utils.copy(this.tokenParams);\n        var _callback = callback || noop;\n        /* first set up whatever callback will be used to get signed\n         * token requests */\n        var tokenRequestCallback, client = this.client;\n        if (authOptions.authCallback) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authCallback');\n            tokenRequestCallback = authOptions.authCallback;\n        }\n        else if (authOptions.authUrl) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authUrl');\n            tokenRequestCallback = function (params, cb) {\n                var authHeaders = Utils.mixin({ accept: 'application/json, text/plain' }, authOptions.authHeaders);\n                var usePost = authOptions.authMethod && authOptions.authMethod.toLowerCase() === 'post';\n                var providedQsParams;\n                /* Combine authParams with any qs params given in the authUrl */\n                var queryIdx = authOptions.authUrl.indexOf('?');\n                if (queryIdx > -1) {\n                    providedQsParams = Utils.parseQueryString(authOptions.authUrl.slice(queryIdx));\n                    authOptions.authUrl = authOptions.authUrl.slice(0, queryIdx);\n                    if (!usePost) {\n                        /* In case of conflict, authParams take precedence over qs params in the authUrl */\n                        authOptions.authParams = Utils.mixin(providedQsParams, authOptions.authParams);\n                    }\n                }\n                /* RSA8c2 */\n                var authParams = Utils.mixin({}, authOptions.authParams || {}, params);\n                var authUrlRequestCallback = function (err, body, headers, unpacked) {\n                    var contentType;\n                    if (err) {\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Auth.requestToken().tokenRequestCallback', 'Received Error: ' + Utils.inspectError(err));\n                    }\n                    else {\n                        contentType = headers['content-type'];\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Auth.requestToken().tokenRequestCallback', 'Received; content-type: ' + contentType + '; body: ' + Utils.inspectBody(body));\n                    }\n                    if (err || unpacked)\n                        return cb(err, body);\n                    if (platform_1.default.BufferUtils.isBuffer(body))\n                        body = body.toString();\n                    if (!contentType) {\n                        cb(new errorinfo_1.default('authUrl response is missing a content-type header', 40170, 401));\n                        return;\n                    }\n                    var json = contentType.indexOf('application/json') > -1, text = contentType.indexOf('text/plain') > -1 || contentType.indexOf('application/jwt') > -1;\n                    if (!json && !text) {\n                        cb(new errorinfo_1.default('authUrl responded with unacceptable content-type ' +\n                            contentType +\n                            ', should be either text/plain, application/jwt or application/json', 40170, 401));\n                        return;\n                    }\n                    if (json) {\n                        if (body.length > MAX_TOKEN_LENGTH) {\n                            cb(new errorinfo_1.default('authUrl response exceeded max permitted length', 40170, 401));\n                            return;\n                        }\n                        try {\n                            body = JSON.parse(body);\n                        }\n                        catch (e) {\n                            cb(new errorinfo_1.default('Unexpected error processing authURL response; err = ' + e.message, 40170, 401));\n                            return;\n                        }\n                    }\n                    cb(null, body, contentType);\n                };\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Auth.requestToken().tokenRequestCallback', 'Requesting token from ' +\n                    authOptions.authUrl +\n                    '; Params: ' +\n                    JSON.stringify(authParams) +\n                    '; method: ' +\n                    (usePost ? 'POST' : 'GET'));\n                if (usePost) {\n                    /* send body form-encoded */\n                    var headers = authHeaders || {};\n                    headers['content-type'] = 'application/x-www-form-urlencoded';\n                    var body = Utils.toQueryString(authParams).slice(1); /* slice is to remove the initial '?' */\n                    _this.client.http.doUri(HttpMethods_1.default.Post, client, authOptions.authUrl, headers, body, providedQsParams, authUrlRequestCallback);\n                }\n                else {\n                    _this.client.http.doUri(HttpMethods_1.default.Get, client, authOptions.authUrl, authHeaders || {}, null, authParams, authUrlRequestCallback);\n                }\n            };\n        }\n        else if (authOptions.key) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.requestToken()', 'using token auth with client-side signing');\n            tokenRequestCallback = function (params, cb) {\n                _this.createTokenRequest(params, authOptions, cb);\n            };\n        }\n        else {\n            var msg = 'Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth()', 'library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help');\n            _callback(new errorinfo_1.default(msg, 40171, 403));\n            return;\n        }\n        /* normalise token params */\n        if ('capability' in tokenParams)\n            tokenParams.capability = c14n(tokenParams.capability);\n        var tokenRequest = function (signedTokenParams, tokenCb) {\n            var keyName = signedTokenParams.keyName, path = '/keys/' + keyName + '/requestToken', tokenUri = function (host) {\n                return client.baseUri(host) + path;\n            };\n            var requestHeaders = Utils.defaultPostHeaders(_this.client.options);\n            if (authOptions.requestHeaders)\n                Utils.mixin(requestHeaders, authOptions.requestHeaders);\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Auth.requestToken().requestToken', 'Sending POST to ' + path + '; Token params: ' + JSON.stringify(signedTokenParams));\n            _this.client.http.do(HttpMethods_1.default.Post, client, tokenUri, requestHeaders, JSON.stringify(signedTokenParams), null, tokenCb);\n        };\n        var tokenRequestCallbackTimeoutExpired = false, timeoutLength = this.client.options.timeouts.realtimeRequestTimeout, tokenRequestCallbackTimeout = setTimeout(function () {\n            tokenRequestCallbackTimeoutExpired = true;\n            var msg = 'Token request callback timed out after ' + timeoutLength / 1000 + ' seconds';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.requestToken()', msg);\n            _callback(new errorinfo_1.default(msg, 40170, 401));\n        }, timeoutLength);\n        tokenRequestCallback(tokenParams, function (err, tokenRequestOrDetails, contentType) {\n            if (tokenRequestCallbackTimeoutExpired)\n                return;\n            clearTimeout(tokenRequestCallbackTimeout);\n            if (err) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.requestToken()', 'token request signing call returned error; err = ' + Utils.inspectError(err));\n                _callback(normaliseAuthcallbackError(err));\n                return;\n            }\n            /* the response from the callback might be a token string, a signed request or a token details */\n            if (typeof tokenRequestOrDetails === 'string') {\n                if (tokenRequestOrDetails.length === 0) {\n                    _callback(new errorinfo_1.default('Token string is empty', 40170, 401));\n                }\n                else if (tokenRequestOrDetails.length > MAX_TOKEN_LENGTH) {\n                    _callback(new errorinfo_1.default('Token string exceeded max permitted length (was ' + tokenRequestOrDetails.length + ' bytes)', 40170, 401));\n                }\n                else if (tokenRequestOrDetails === 'undefined' || tokenRequestOrDetails === 'null') {\n                    /* common failure mode with poorly-implemented authCallbacks */\n                    _callback(new errorinfo_1.default('Token string was literal null/undefined', 40170, 401));\n                }\n                else if (tokenRequestOrDetails[0] === '{' && !(contentType && contentType.indexOf('application/jwt') > -1)) {\n                    _callback(new errorinfo_1.default(\"Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details\", 40170, 401));\n                }\n                else {\n                    _callback(null, { token: tokenRequestOrDetails });\n                }\n                return;\n            }\n            if (typeof tokenRequestOrDetails !== 'object') {\n                var msg = 'Expected token request callback to call back with a token string or token request/details object, but got a ' +\n                    typeof tokenRequestOrDetails;\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.requestToken()', msg);\n                _callback(new errorinfo_1.default(msg, 40170, 401));\n                return;\n            }\n            var objectSize = JSON.stringify(tokenRequestOrDetails).length;\n            if (objectSize > MAX_TOKEN_LENGTH && !authOptions.suppressMaxLengthCheck) {\n                _callback(new errorinfo_1.default('Token request/details object exceeded max permitted stringified size (was ' + objectSize + ' bytes)', 40170, 401));\n                return;\n            }\n            if ('issued' in tokenRequestOrDetails) {\n                /* a tokenDetails object */\n                _callback(null, tokenRequestOrDetails);\n                return;\n            }\n            if (!('keyName' in tokenRequestOrDetails)) {\n                var msg = 'Expected token request callback to call back with a token string, token request object, or token details object';\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.requestToken()', msg);\n                _callback(new errorinfo_1.default(msg, 40170, 401));\n                return;\n            }\n            /* it's a token request, so make the request */\n            tokenRequest(tokenRequestOrDetails, function (err, tokenResponse, headers, unpacked) {\n                if (err) {\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth.requestToken()', 'token request API call returned error; err = ' + Utils.inspectError(err));\n                    _callback(normaliseAuthcallbackError(err));\n                    return;\n                }\n                if (!unpacked)\n                    tokenResponse = JSON.parse(tokenResponse);\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.getToken()', 'token received');\n                _callback(null, tokenResponse);\n            });\n        });\n    };\n    /**\n     * Create and sign a token request based on the given options.\n     * NOTE this can only be used when the key value is available locally.\n     * Otherwise, signed token requests must be obtained from the key\n     * owner (either using the token request callback or url).\n     *\n     * @param authOptions\n     * an object containing the request options:\n     * - key:           the key to use. If not specified, a key passed in constructing\n     *                  the Rest interface will be used\n     *\n     * - queryTime      (optional) boolean indicating that the ably system should be\n     *                  queried for the current time when none is specified explicitly\n     *\n     * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n     *                  requestToken request\n     *\n     * @param tokenParams\n     * an object containing the parameters for the requested token:\n     * - ttl:       (optional) the requested life of the token in ms. If none is specified\n     *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n     *                  exceeding that lifetime will be rejected with an error.\n     *\n     * - capability:    (optional) the capability to associate with the access token.\n     *                  If none is specified, a token will be requested with all of the\n     *                  capabilities of the specified key.\n     *\n     * - clientId:      (optional) a client ID to associate with the token; if not\n     *                  specified, a clientId passed in constructing the Rest interface will be used\n     *\n     * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n     *                  the system will be queried for a time value to use.\n     *\n     * @param callback\n     */\n    Auth.prototype.createTokenRequest = function (tokenParams, authOptions, callback) {\n        var _this = this;\n        /* shuffle and normalise arguments as necessary */\n        if (typeof tokenParams == 'function' && !callback) {\n            callback = tokenParams;\n            authOptions = tokenParams = null;\n        }\n        else if (typeof authOptions == 'function' && !callback) {\n            callback = authOptions;\n            authOptions = null;\n        }\n        if (!callback && this.client.options.promises) {\n            return Utils.promisify(this, 'createTokenRequest', arguments);\n        }\n        /* RSA9h: if authOptions passed in, they're used instead of stored, don't merge them */\n        authOptions = authOptions || this.authOptions;\n        tokenParams = tokenParams || Utils.copy(this.tokenParams);\n        var key = authOptions.key;\n        if (!key) {\n            callback(new errorinfo_1.default('No key specified', 40101, 403));\n            return;\n        }\n        var keyParts = key.split(':'), keyName = keyParts[0], keySecret = keyParts[1];\n        if (!keySecret) {\n            callback(new errorinfo_1.default('Invalid key specified', 40101, 403));\n            return;\n        }\n        if (tokenParams.clientId === '') {\n            callback(new errorinfo_1.default('clientId can’t be an empty string', 40012, 400));\n            return;\n        }\n        if ('capability' in tokenParams) {\n            tokenParams.capability = c14n(tokenParams.capability);\n        }\n        var request = Utils.mixin({ keyName: keyName }, tokenParams), clientId = tokenParams.clientId || '', ttl = tokenParams.ttl || '', capability = tokenParams.capability || '';\n        (function (authoriseCb) {\n            if (request.timestamp) {\n                authoriseCb();\n                return;\n            }\n            _this.getTimestamp(authOptions && authOptions.queryTime, function (err, time) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                request.timestamp = time;\n                authoriseCb();\n            });\n        })(function () {\n            /* nonce */\n            /* NOTE: there is no expectation that the client\n             * specifies the nonce; this is done by the library\n             * However, this can be overridden by the client\n             * simply for testing purposes. */\n            var nonce = request.nonce || (request.nonce = random()), timestamp = request.timestamp;\n            var signText = request.keyName + '\\n' + ttl + '\\n' + capability + '\\n' + clientId + '\\n' + timestamp + '\\n' + nonce + '\\n';\n            /* mac */\n            /* NOTE: there is no expectation that the client\n             * specifies the mac; this is done by the library\n             * However, this can be overridden by the client\n             * simply for testing purposes. */\n            request.mac = request.mac || hmac(signText, keySecret);\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.getTokenRequest()', 'generated signed request');\n            callback(null, request);\n        });\n    };\n    /**\n     * Get the auth query params to use for a websocket connection,\n     * based on the current auth parameters\n     */\n    Auth.prototype.getAuthParams = function (callback) {\n        if (this.method == 'basic')\n            callback(null, { key: this.key });\n        else\n            this._ensureValidAuthCredentials(false, function (err, tokenDetails) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                if (!tokenDetails) {\n                    throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n                }\n                callback(null, { access_token: tokenDetails.token });\n            });\n    };\n    /**\n     * Get the authorization header to use for a REST or comet request,\n     * based on the current auth parameters\n     */\n    Auth.prototype.getAuthHeaders = function (callback) {\n        if (this.method == 'basic') {\n            callback(null, { authorization: 'Basic ' + this.basicKey });\n        }\n        else {\n            this._ensureValidAuthCredentials(false, function (err, tokenDetails) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                if (!tokenDetails) {\n                    throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n                }\n                callback(null, { authorization: 'Bearer ' + Utils.toBase64(tokenDetails.token) });\n            });\n        }\n    };\n    /**\n     * Get the current time based on the local clock,\n     * or if the option queryTime is true, return the server time.\n     * The server time offset from the local time is stored so that\n     * only one request to the server to get the time is ever needed\n     */\n    Auth.prototype.getTimestamp = function (queryTime, callback) {\n        if (!this.isTimeOffsetSet() && (queryTime || this.authOptions.queryTime)) {\n            this.client.time(callback);\n        }\n        else {\n            callback(null, this.getTimestampUsingOffset());\n        }\n    };\n    Auth.prototype.getTimestampUsingOffset = function () {\n        return Utils.now() + (this.client.serverTimeOffset || 0);\n    };\n    Auth.prototype.isTimeOffsetSet = function () {\n        return this.client.serverTimeOffset !== null;\n    };\n    Auth.prototype._saveBasicOptions = function (authOptions) {\n        this.method = 'basic';\n        this.key = authOptions.key;\n        this.basicKey = Utils.toBase64(authOptions.key);\n        this.authOptions = authOptions || {};\n        if ('clientId' in authOptions) {\n            this._userSetClientId(authOptions.clientId);\n        }\n    };\n    Auth.prototype._saveTokenOptions = function (tokenParams, authOptions) {\n        this.method = 'token';\n        if (tokenParams) {\n            /* We temporarily persist tokenParams.timestamp in case a new token needs\n             * to be requested, then null it out in the callback of\n             * _ensureValidAuthCredentials for RSA10g compliance */\n            this.tokenParams = tokenParams;\n        }\n        if (authOptions) {\n            /* normalise */\n            if (authOptions.token) {\n                /* options.token may contain a token string or, for convenience, a TokenDetails */\n                authOptions.tokenDetails =\n                    typeof authOptions.token === 'string'\n                        ? { token: authOptions.token }\n                        : authOptions.token;\n            }\n            if (authOptions.tokenDetails) {\n                this.tokenDetails = authOptions.tokenDetails;\n            }\n            if ('clientId' in authOptions) {\n                this._userSetClientId(authOptions.clientId);\n            }\n            this.authOptions = authOptions;\n        }\n    };\n    /* @param forceSupersede: force a new token request even if there's one in\n     * progress, making all pending callbacks wait for the new one */\n    Auth.prototype._ensureValidAuthCredentials = function (forceSupersede, callback) {\n        var _this = this;\n        var token = this.tokenDetails;\n        if (token) {\n            if (this._tokenClientIdMismatch(token.clientId)) {\n                /* 403 to trigger a permanently failed client - RSA15c */\n                callback(new errorinfo_1.default('Mismatch between clientId in token (' + token.clientId + ') and current clientId (' + this.clientId + ')', 40102, 403));\n                return;\n            }\n            /* RSA4b1 -- if we have a server time offset set already, we can\n             * automatically remove expired tokens. Else just use the cached token. If it is\n             * expired Ably will tell us and we'll discard it then. */\n            if (!this.isTimeOffsetSet() || !token.expires || token.expires >= this.getTimestampUsingOffset()) {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.getToken()', 'using cached token; expires = ' + token.expires);\n                callback(null, token);\n                return;\n            }\n            /* expired, so remove and fallthrough to getting a new one */\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth.getToken()', 'deleting expired token');\n            this.tokenDetails = null;\n        }\n        (this.waitingForTokenRequest || (this.waitingForTokenRequest = multicaster_1.default.create())).push(callback);\n        if (this.currentTokenRequestId !== null && !forceSupersede) {\n            return;\n        }\n        /* Request a new token */\n        var tokenRequestId = (this.currentTokenRequestId = getTokenRequestId());\n        this.requestToken(this.tokenParams, this.authOptions, function (err, tokenResponse) {\n            if (_this.currentTokenRequestId > tokenRequestId) {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Auth._ensureValidAuthCredentials()', 'Discarding token request response; overtaken by newer one');\n                return;\n            }\n            _this.currentTokenRequestId = null;\n            var callbacks = _this.waitingForTokenRequest || noop;\n            _this.waitingForTokenRequest = null;\n            if (err) {\n                callbacks(err);\n                return;\n            }\n            callbacks(null, (_this.tokenDetails = tokenResponse));\n        });\n    };\n    /* User-set: check types, '*' is disallowed, throw any errors */\n    Auth.prototype._userSetClientId = function (clientId) {\n        if (!(typeof clientId === 'string' || clientId === null)) {\n            throw new errorinfo_1.default('clientId must be either a string or null', 40012, 400);\n        }\n        else if (clientId === '*') {\n            throw new errorinfo_1.default('Can’t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: \"*\"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: \"*\"}, authOptions)', 40012, 400);\n        }\n        else {\n            var err = this._uncheckedSetClientId(clientId);\n            if (err)\n                throw err;\n        }\n    };\n    /* Ably-set: no typechecking, '*' is allowed but not set on this.clientId), return errors to the caller */\n    Auth.prototype._uncheckedSetClientId = function (clientId) {\n        if (this._tokenClientIdMismatch(clientId)) {\n            /* Should never happen in normal circumstances as realtime should\n             * recognise mismatch and return an error */\n            var msg = 'Unexpected clientId mismatch: client has ' + this.clientId + ', requested ' + clientId;\n            var err = new errorinfo_1.default(msg, 40102, 401);\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Auth._uncheckedSetClientId()', msg);\n            return err;\n        }\n        else {\n            /* RSA7a4: if options.clientId is provided and is not\n             * null, it overrides defaultTokenParams.clientId */\n            this.clientId = this.tokenParams.clientId = clientId;\n            return null;\n        }\n    };\n    Auth.prototype._tokenClientIdMismatch = function (tokenClientId) {\n        return !!(this.clientId &&\n            this.clientId !== '*' &&\n            tokenClientId &&\n            tokenClientId !== '*' &&\n            this.clientId !== tokenClientId);\n    };\n    Auth.isTokenErr = function (error) {\n        return error.code && error.code >= 40140 && error.code < 40150;\n    };\n    Auth.prototype.revokeTokens = function (specifiers, optionsOrCallbackArg, callbackArg) {\n        if (useTokenAuth(this.client.options)) {\n            throw new errorinfo_1.default('Cannot revoke tokens when using token auth', 40162, 401);\n        }\n        var keyName = this.client.options.keyName;\n        var resolvedOptions;\n        if (typeof optionsOrCallbackArg === 'function') {\n            callbackArg = optionsOrCallbackArg;\n            resolvedOptions = {};\n        }\n        else {\n            resolvedOptions = optionsOrCallbackArg !== null && optionsOrCallbackArg !== void 0 ? optionsOrCallbackArg : {};\n        }\n        if (callbackArg === undefined) {\n            if (this.client.options.promises) {\n                return Utils.promisify(this, 'revokeTokens', [specifiers, resolvedOptions]);\n            }\n            callbackArg = noop;\n        }\n        var callback = callbackArg;\n        var requestBodyDTO = tslib_1.__assign({ targets: specifiers.map(function (specifier) { return \"\".concat(specifier.type, \":\").concat(specifier.value); }) }, resolvedOptions);\n        var format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(this.client.options, format);\n        if (this.client.options.headers)\n            Utils.mixin(headers, this.client.options.headers);\n        var requestBody = Utils.encodeBody(requestBodyDTO, format);\n        resource_1.default.post(this.client, \"/keys/\".concat(keyName, \"/revokeTokens\"), requestBody, headers, { newBatchResponse: 'true' }, null, function (err, body, headers, unpacked) {\n            if (err) {\n                // TODO remove this type assertion after fixing https://github.com/ably/ably-js/issues/1405\n                callback(err);\n                return;\n            }\n            var batchResult = (unpacked ? body : Utils.decodeBody(body, format));\n            callback(null, batchResult);\n        });\n    };\n    return Auth;\n}());\nexports.default = Auth;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HttpMethods;\n(function (HttpMethods) {\n    HttpMethods[\"Get\"] = \"get\";\n    HttpMethods[\"Delete\"] = \"delete\";\n    HttpMethods[\"Post\"] = \"post\";\n    HttpMethods[\"Put\"] = \"put\";\n    HttpMethods[\"Patch\"] = \"patch\";\n})(HttpMethods || (HttpMethods = {}));\nexports.default = HttpMethods;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_200124__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpPaginatedResponse = exports.PaginatedResult = void 0;\nvar tslib_1 = __nested_webpack_require_200124__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_200124__(1));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_200124__(2));\nvar resource_1 = tslib_1.__importDefault(__nested_webpack_require_200124__(14));\nfunction getRelParams(linkUrl) {\n    var urlMatch = linkUrl.match(/^\\.\\/(\\w+)\\?(.*)$/);\n    return urlMatch && urlMatch[2] && Utils.parseQueryString(urlMatch[2]);\n}\nfunction parseRelLinks(linkHeader) {\n    if (typeof linkHeader == 'string')\n        linkHeader = linkHeader.split(',');\n    var relParams = {};\n    for (var i = 0; i < linkHeader.length; i++) {\n        var linkMatch = linkHeader[i].match(/^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$/);\n        if (linkMatch) {\n            var params = getRelParams(linkMatch[1]);\n            if (params)\n                relParams[linkMatch[2]] = params;\n        }\n    }\n    return relParams;\n}\nfunction returnErrOnly(err, body, useHPR) {\n    /* If using httpPaginatedResponse, errors from Ably are returned as part of\n     * the HPR, only do callback(err) for network errors etc. which don't\n     * return a body and/or have no ably-originated error code (non-numeric\n     * error codes originate from node) */\n    return !(useHPR && (body || typeof err.code === 'number'));\n}\nvar PaginatedResource = /** @class */ (function () {\n    function PaginatedResource(rest, path, headers, envelope, bodyHandler, useHttpPaginatedResponse) {\n        this.rest = rest;\n        this.path = path;\n        this.headers = headers;\n        this.envelope = envelope !== null && envelope !== void 0 ? envelope : null;\n        this.bodyHandler = bodyHandler;\n        this.useHttpPaginatedResponse = useHttpPaginatedResponse || false;\n    }\n    PaginatedResource.prototype.get = function (params, callback) {\n        var _this = this;\n        resource_1.default.get(this.rest, this.path, this.headers, params, this.envelope, function (err, body, headers, unpacked, statusCode) {\n            _this.handlePage(err, body, headers, unpacked, statusCode, callback);\n        });\n    };\n    PaginatedResource.prototype.delete = function (params, callback) {\n        var _this = this;\n        resource_1.default.delete(this.rest, this.path, this.headers, params, this.envelope, function (err, body, headers, unpacked, statusCode) {\n            _this.handlePage(err, body, headers, unpacked, statusCode, callback);\n        });\n    };\n    PaginatedResource.prototype.post = function (params, body, callback) {\n        var _this = this;\n        resource_1.default.post(this.rest, this.path, body, this.headers, params, this.envelope, function (err, responseBody, headers, unpacked, statusCode) {\n            if (callback) {\n                _this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n            }\n        });\n    };\n    PaginatedResource.prototype.put = function (params, body, callback) {\n        var _this = this;\n        resource_1.default.put(this.rest, this.path, body, this.headers, params, this.envelope, function (err, responseBody, headers, unpacked, statusCode) {\n            if (callback) {\n                _this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n            }\n        });\n    };\n    PaginatedResource.prototype.patch = function (params, body, callback) {\n        var _this = this;\n        resource_1.default.patch(this.rest, this.path, body, this.headers, params, this.envelope, function (err, responseBody, headers, unpacked, statusCode) {\n            if (callback) {\n                _this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n            }\n        });\n    };\n    PaginatedResource.prototype.handlePage = function (err, body, headers, unpacked, statusCode, callback) {\n        if (err && returnErrOnly(err, body, this.useHttpPaginatedResponse)) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'PaginatedResource.handlePage()', 'Unexpected error getting resource: err = ' + Utils.inspectError(err));\n            callback === null || callback === void 0 ? void 0 : callback(err);\n            return;\n        }\n        var items, linkHeader, relParams;\n        try {\n            items = this.bodyHandler(body, headers || {}, unpacked);\n        }\n        catch (e) {\n            /* If we got an error, the failure to parse the body is almost certainly\n             * due to that, so callback with that in preference over the parse error */\n            callback === null || callback === void 0 ? void 0 : callback(err || e);\n            return;\n        }\n        if (headers && (linkHeader = headers['Link'] || headers['link'])) {\n            relParams = parseRelLinks(linkHeader);\n        }\n        if (this.useHttpPaginatedResponse) {\n            callback(null, new HttpPaginatedResponse(this, items, headers || {}, statusCode, relParams, err));\n        }\n        else {\n            callback(null, new PaginatedResult(this, items, relParams));\n        }\n    };\n    return PaginatedResource;\n}());\nvar PaginatedResult = /** @class */ (function () {\n    function PaginatedResult(resource, items, relParams) {\n        var _this = this;\n        this.resource = resource;\n        this.items = items;\n        var self = this;\n        if (relParams) {\n            if ('first' in relParams) {\n                this.first = function (callback) {\n                    if (!callback && self.resource.rest.options.promises) {\n                        return Utils.promisify(self, 'first', []);\n                    }\n                    self.get(relParams.first, callback);\n                };\n            }\n            if ('current' in relParams) {\n                this.current = function (callback) {\n                    if (!callback && self.resource.rest.options.promises) {\n                        return Utils.promisify(self, 'current', []);\n                    }\n                    self.get(relParams.current, callback);\n                };\n            }\n            this.next = function (callback) {\n                if (!callback && self.resource.rest.options.promises) {\n                    return Utils.promisify(self, 'next', []);\n                }\n                if ('next' in relParams) {\n                    self.get(relParams.next, callback);\n                }\n                else {\n                    callback(null, null);\n                }\n            };\n            this.hasNext = function () {\n                return 'next' in relParams;\n            };\n            this.isLast = function () {\n                var _a;\n                return !((_a = _this.hasNext) === null || _a === void 0 ? void 0 : _a.call(_this));\n            };\n        }\n    }\n    /* We assume that only the initial request can be a POST, and that accessing\n     * the rest of a multipage set of results can always be done with GET */\n    PaginatedResult.prototype.get = function (params, callback) {\n        var res = this.resource;\n        resource_1.default.get(res.rest, res.path, res.headers, params, res.envelope, function (err, body, headers, unpacked, statusCode) {\n            res.handlePage(err, body, headers, unpacked, statusCode, callback);\n        });\n    };\n    return PaginatedResult;\n}());\nexports.PaginatedResult = PaginatedResult;\nvar HttpPaginatedResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpPaginatedResponse, _super);\n    function HttpPaginatedResponse(resource, items, headers, statusCode, relParams, err) {\n        var _this = _super.call(this, resource, items, relParams) || this;\n        _this.statusCode = statusCode;\n        _this.success = statusCode < 300 && statusCode >= 200;\n        _this.headers = headers;\n        _this.errorCode = err && err.code;\n        _this.errorMessage = err && err.message;\n        return _this;\n    }\n    HttpPaginatedResponse.prototype.toJSON = function () {\n        return {\n            items: this.items,\n            statusCode: this.statusCode,\n            success: this.success,\n            headers: this.headers,\n            errorCode: this.errorCode,\n            errorMessage: this.errorMessage,\n        };\n    };\n    return HttpPaginatedResponse;\n}(PaginatedResult));\nexports.HttpPaginatedResponse = HttpPaginatedResponse;\nexports.default = PaginatedResource;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_208545__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isRetriable = void 0;\nvar tslib_1 = __nested_webpack_require_208545__(0);\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_208545__(4));\nvar ConnectionErrorCodes = {\n    DISCONNECTED: 80003,\n    SUSPENDED: 80002,\n    FAILED: 80000,\n    CLOSING: 80017,\n    CLOSED: 80017,\n    UNKNOWN_CONNECTION_ERR: 50002,\n    UNKNOWN_CHANNEL_ERR: 50001,\n};\nvar ConnectionErrors = {\n    disconnected: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 400,\n            code: ConnectionErrorCodes.DISCONNECTED,\n            message: 'Connection to server temporarily unavailable',\n        });\n    },\n    suspended: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 400,\n            code: ConnectionErrorCodes.SUSPENDED,\n            message: 'Connection to server unavailable',\n        });\n    },\n    failed: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 400,\n            code: ConnectionErrorCodes.FAILED,\n            message: 'Connection failed or disconnected by server',\n        });\n    },\n    closing: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 400,\n            code: ConnectionErrorCodes.CLOSING,\n            message: 'Connection closing',\n        });\n    },\n    closed: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 400,\n            code: ConnectionErrorCodes.CLOSED,\n            message: 'Connection closed',\n        });\n    },\n    unknownConnectionErr: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 500,\n            code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n            message: 'Internal connection error',\n        });\n    },\n    unknownChannelErr: function () {\n        return errorinfo_1.default.fromValues({\n            statusCode: 500,\n            code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n            message: 'Internal channel error',\n        });\n    },\n};\nfunction isRetriable(err) {\n    if (!err.statusCode || !err.code || err.statusCode >= 500) {\n        return true;\n    }\n    return Object.values(ConnectionErrorCodes).includes(err.code);\n}\nexports.isRetriable = isRetriable;\nexports.default = ConnectionErrors;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar XHRStates;\n(function (XHRStates) {\n    XHRStates[XHRStates[\"REQ_SEND\"] = 0] = \"REQ_SEND\";\n    XHRStates[XHRStates[\"REQ_RECV\"] = 1] = \"REQ_RECV\";\n    XHRStates[XHRStates[\"REQ_RECV_POLL\"] = 2] = \"REQ_RECV_POLL\";\n    XHRStates[XHRStates[\"REQ_RECV_STREAM\"] = 3] = \"REQ_RECV_STREAM\";\n})(XHRStates || (XHRStates = {}));\nexports.default = XHRStates;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __nested_webpack_require_211467__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_211467__(6), __nested_webpack_require_211467__(5), __nested_webpack_require_211467__(58), __nested_webpack_require_211467__(11), __nested_webpack_require_211467__(40), __nested_webpack_require_211467__(32), __nested_webpack_require_211467__(24), __nested_webpack_require_211467__(27), __nested_webpack_require_211467__(28), __nested_webpack_require_211467__(59), __nested_webpack_require_211467__(60));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_211978__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_211978__(0);\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_211978__(2));\nvar Multicaster = /** @class */ (function () {\n    // Private constructor; use static Multicaster.create instead\n    function Multicaster(members) {\n        this.members = members || [];\n    }\n    Multicaster.prototype.call = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        for (var _a = 0, _b = this.members; _a < _b.length; _a++) {\n            var member = _b[_a];\n            if (member) {\n                try {\n                    member.apply(void 0, args);\n                }\n                catch (e) {\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Multicaster multiple callback handler', 'Unexpected exception: ' + e + '; stack = ' + e.stack);\n                }\n            }\n        }\n    };\n    Multicaster.prototype.push = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.members).push.apply(_a, args);\n    };\n    Multicaster.create = function (members) {\n        var instance = new Multicaster(members);\n        return Object.assign(function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return instance.call.apply(instance, args);\n        }, {\n            push: function (fn) { return instance.push(fn); },\n        });\n    };\n    return Multicaster;\n}());\nexports.default = Multicaster;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_213807__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_213807__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSuccessCode = void 0;\nvar HttpStatusCodes;\n(function (HttpStatusCodes) {\n    HttpStatusCodes[HttpStatusCodes[\"Success\"] = 200] = \"Success\";\n    HttpStatusCodes[HttpStatusCodes[\"NoContent\"] = 204] = \"NoContent\";\n    HttpStatusCodes[HttpStatusCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpStatusCodes[HttpStatusCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpStatusCodes[HttpStatusCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpStatusCodes[HttpStatusCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpStatusCodes[HttpStatusCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n})(HttpStatusCodes || (HttpStatusCodes = {}));\nfunction isSuccessCode(statusCode) {\n    return statusCode >= HttpStatusCodes.Success && statusCode < HttpStatusCodes.BadRequest;\n}\nexports.isSuccessCode = isSuccessCode;\nexports.default = HttpStatusCodes;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __nested_webpack_require_218725__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_218725__(0);\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(10));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_218725__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(2));\nvar connectionerrors_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(20));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(4));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_218725__(3));\nvar actions = protocolmessage_1.default.Action;\nvar closeMessage = protocolmessage_1.default.fromValues({ action: actions.CLOSE });\nvar disconnectMessage = protocolmessage_1.default.fromValues({ action: actions.DISCONNECT });\n/*\n * Transport instances inherit from EventEmitter and emit the following events:\n *\n * event name       data\n * closed           error\n * failed           error\n * disposed\n * connected        null error, connectionSerial, connectionId, connectionDetails\n * event            channel message object\n */\nvar Transport = /** @class */ (function (_super) {\n    tslib_1.__extends(Transport, _super);\n    function Transport(connectionManager, auth, params, forceJsonProtocol) {\n        var _this = _super.call(this) || this;\n        if (forceJsonProtocol) {\n            params.format = undefined;\n            params.heartbeats = true;\n        }\n        _this.connectionManager = connectionManager;\n        connectionManager.registerProposedTransport(_this);\n        _this.auth = auth;\n        _this.params = params;\n        _this.timeouts = params.options.timeouts;\n        _this.format = params.format;\n        _this.isConnected = false;\n        _this.isFinished = false;\n        _this.isDisposed = false;\n        _this.maxIdleInterval = null;\n        _this.idleTimer = null;\n        _this.lastActivity = null;\n        return _this;\n    }\n    Transport.prototype.connect = function () { };\n    Transport.prototype.close = function () {\n        if (this.isConnected) {\n            this.requestClose();\n        }\n        this.finish('closed', connectionerrors_1.default.closed());\n    };\n    Transport.prototype.disconnect = function (err) {\n        /* Used for network/transport issues that need to result in the transport\n         * being disconnected, but should not transition the connection to 'failed' */\n        if (this.isConnected) {\n            this.requestDisconnect();\n        }\n        this.finish('disconnected', err || connectionerrors_1.default.disconnected());\n    };\n    Transport.prototype.fail = function (err) {\n        /* Used for client-side-detected fatal connection issues */\n        if (this.isConnected) {\n            this.requestDisconnect();\n        }\n        this.finish('failed', err || connectionerrors_1.default.failed());\n    };\n    Transport.prototype.finish = function (event, err) {\n        var _a;\n        if (this.isFinished) {\n            return;\n        }\n        this.isFinished = true;\n        this.isConnected = false;\n        this.maxIdleInterval = null;\n        clearTimeout((_a = this.idleTimer) !== null && _a !== void 0 ? _a : undefined);\n        this.idleTimer = null;\n        this.emit(event, err);\n        this.dispose();\n    };\n    Transport.prototype.onProtocolMessage = function (message) {\n        if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Transport.onProtocolMessage()', 'received on ' +\n                this.shortName +\n                ': ' +\n                protocolmessage_1.default.stringify(message) +\n                '; connectionId = ' +\n                this.connectionManager.connectionId);\n        }\n        this.onActivity();\n        switch (message.action) {\n            case actions.HEARTBEAT:\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Transport.onProtocolMessage()', this.shortName + ' heartbeat; connectionId = ' + this.connectionManager.connectionId);\n                this.emit('heartbeat', message.id);\n                break;\n            case actions.CONNECTED:\n                this.onConnect(message);\n                this.emit('connected', message.error, message.connectionId, message.connectionDetails, message);\n                break;\n            case actions.CLOSED:\n                this.onClose(message);\n                break;\n            case actions.DISCONNECTED:\n                this.onDisconnect(message);\n                break;\n            case actions.ACK:\n                this.emit('ack', message.msgSerial, message.count);\n                break;\n            case actions.NACK:\n                this.emit('nack', message.msgSerial, message.count, message.error);\n                break;\n            case actions.SYNC:\n                this.connectionManager.onChannelMessage(message, this);\n                break;\n            case actions.ACTIVATE:\n                // Ignored.\n                break;\n            case actions.AUTH:\n                this.auth.authorize(function (err) {\n                    if (err) {\n                        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Transport.onProtocolMessage()', 'Ably requested re-authentication, but unable to obtain a new token: ' + Utils.inspectError(err));\n                    }\n                });\n                break;\n            case actions.ERROR:\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.onProtocolMessage()', 'received error action; connectionId = ' +\n                    this.connectionManager.connectionId +\n                    '; err = ' +\n                    platform_1.default.Config.inspect(message.error) +\n                    (message.channel ? ', channel: ' + message.channel : ''));\n                if (message.channel === undefined) {\n                    this.onFatalError(message);\n                    break;\n                }\n                /* otherwise it's a channel-specific error, so handle it in the channel */\n                this.connectionManager.onChannelMessage(message, this);\n                break;\n            default:\n                /* all other actions are channel-specific */\n                this.connectionManager.onChannelMessage(message, this);\n        }\n    };\n    Transport.prototype.onConnect = function (message) {\n        this.isConnected = true;\n        if (!message.connectionDetails) {\n            throw new Error('Transport.onConnect(): Connect message recieved without connectionDetails');\n        }\n        var maxPromisedIdle = message.connectionDetails.maxIdleInterval;\n        if (maxPromisedIdle) {\n            this.maxIdleInterval = maxPromisedIdle + this.timeouts.realtimeRequestTimeout;\n            this.onActivity();\n        }\n        /* else Realtime declines to guarantee any maximum idle interval - CD2h */\n    };\n    Transport.prototype.onDisconnect = function (message) {\n        /* Used for when the server has disconnected the client (usually with a\n         * DISCONNECTED action) */\n        var err = message && message.error;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.onDisconnect()', 'err = ' + Utils.inspectError(err));\n        this.finish('disconnected', err);\n    };\n    Transport.prototype.onFatalError = function (message) {\n        /* On receipt of a fatal connection error, we can assume that the server\n         * will close the connection and the transport, and do not need to request\n         * a disconnection - RTN15i */\n        var err = message && message.error;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.onFatalError()', 'err = ' + Utils.inspectError(err));\n        this.finish('failed', err);\n    };\n    Transport.prototype.onClose = function (message) {\n        var err = message && message.error;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.onClose()', 'err = ' + Utils.inspectError(err));\n        this.finish('closed', err);\n    };\n    Transport.prototype.requestClose = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.requestClose()', '');\n        this.send(closeMessage);\n    };\n    Transport.prototype.requestDisconnect = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.requestDisconnect()', '');\n        this.send(disconnectMessage);\n    };\n    Transport.prototype.ping = function (id) {\n        var msg = { action: protocolmessage_1.default.Action.HEARTBEAT };\n        if (id)\n            msg.id = id;\n        this.send(protocolmessage_1.default.fromValues(msg));\n    };\n    Transport.prototype.dispose = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.dispose()', '');\n        this.isDisposed = true;\n        this.off();\n    };\n    Transport.prototype.onActivity = function () {\n        if (!this.maxIdleInterval) {\n            return;\n        }\n        this.lastActivity = this.connectionManager.lastActivity = Utils.now();\n        this.setIdleTimer(this.maxIdleInterval + 100);\n    };\n    Transport.prototype.setIdleTimer = function (timeout) {\n        var _this = this;\n        if (!this.idleTimer) {\n            this.idleTimer = setTimeout(function () {\n                _this.onIdleTimerExpire();\n            }, timeout);\n        }\n    };\n    Transport.prototype.onIdleTimerExpire = function () {\n        if (!this.lastActivity || !this.maxIdleInterval) {\n            throw new Error('Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set');\n        }\n        this.idleTimer = null;\n        var sinceLast = Utils.now() - this.lastActivity;\n        var timeRemaining = this.maxIdleInterval - sinceLast;\n        if (timeRemaining <= 0) {\n            var msg = 'No activity seen from realtime in ' + sinceLast + 'ms; assuming connection has dropped';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Transport.onIdleTimerExpire()', msg);\n            this.disconnect(new errorinfo_1.default(msg, 80003, 408));\n        }\n        else {\n            this.setIdleTimer(timeRemaining + 100);\n        }\n    };\n    Transport.tryConnect = function (transportCtor, connectionManager, auth, transportParams, callback) {\n        var transport = new transportCtor(connectionManager, auth, transportParams);\n        var transportAttemptTimer;\n        var errorCb = function (err) {\n            clearTimeout(transportAttemptTimer);\n            callback({ event: this.event, error: err });\n        };\n        var realtimeRequestTimeout = connectionManager.options.timeouts.realtimeRequestTimeout;\n        transportAttemptTimer = setTimeout(function () {\n            transport.off(['preconnect', 'disconnected', 'failed']);\n            transport.dispose();\n            errorCb.call({ event: 'disconnected' }, new errorinfo_1.default('Timeout waiting for transport to indicate itself viable', 50000, 500));\n        }, realtimeRequestTimeout);\n        transport.on(['failed', 'disconnected'], errorCb);\n        transport.on('preconnect', function () {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Transport.tryConnect()', 'viable transport ' + transport);\n            clearTimeout(transportAttemptTimer);\n            transport.off(['failed', 'disconnected'], errorCb);\n            callback(null, transport);\n        });\n        transport.connect();\n    };\n    return Transport;\n}(eventemitter_1.default));\nexports.default = Transport;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __nested_webpack_require_230310__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_230310__(6), __nested_webpack_require_230310__(40), __nested_webpack_require_230310__(24));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __nested_webpack_require_234199__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_234199__(6), __nested_webpack_require_234199__(27));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            var block;\n\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            var modeCreator;\n\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var finalProcessedBlocks;\n\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            var wordArray;\n\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            var salt;\n\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __nested_webpack_require_263745__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Request = exports.createRequest = void 0;\nvar tslib_1 = __nested_webpack_require_263745__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_263745__(1));\nvar comettransport_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(12));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(3));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(7));\nvar errorinfo_1 = __nested_webpack_require_263745__(4);\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(8));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(2));\nvar XHRStates_1 = tslib_1.__importDefault(__nested_webpack_require_263745__(21));\n// Workaround for salesforce lightning locker compatibility\nvar globalObject = Utils.getGlobalObject();\nvar noop = function () { };\n/* Can't just use window.Ably, as that won't exist if using the commonjs version. */\nvar _ = (globalObject._ablyjs_jsonp = {});\n/* express strips out parantheses from the callback!\n * Kludge to still alow its responses to work, while not keeping the\n * function form for normal use and not cluttering window.Ably\n * https://github.com/expressjs/express/blob/5b4d4b4ab1324743534fbcd4709f4e75bb4b4e9d/lib/response.js#L305\n */\n_._ = function (id) {\n    return _['_' + id] || noop;\n};\nvar idCounter = 1;\nvar shortName = 'jsonp';\nfunction createRequest(uri, headers, params, body, requestMode, timeouts, method) {\n    /* JSONP requests are used either with the context being a realtime\n     * transport, or with timeouts passed in (for when used by a rest client),\n     * or completely standalone.  Use the appropriate timeouts in each case */\n    timeouts = timeouts || defaults_1.default.TIMEOUTS;\n    return new Request(undefined, uri, headers, Utils.copy(params), body, requestMode, timeouts, method);\n}\nexports.createRequest = createRequest;\nvar JSONPTransport = /** @class */ (function (_super) {\n    tslib_1.__extends(JSONPTransport, _super);\n    function JSONPTransport(connectionManager, auth, params) {\n        var _this = _super.call(this, connectionManager, auth, params) || this;\n        _this.shortName = shortName;\n        params.stream = false;\n        return _this;\n    }\n    JSONPTransport.isAvailable = function () {\n        return platform_1.default.Config.jsonpSupported && platform_1.default.Config.allowComet;\n    };\n    JSONPTransport.prototype.toString = function () {\n        return 'JSONPTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n    };\n    JSONPTransport.prototype.createRequest = function (uri, headers, params, body, requestMode, timeouts, method) {\n        /* JSONP requests are used either with the context being a realtime\n         * transport, or with timeouts passed in (for when used by a rest client),\n         * or completely standalone.  Use the appropriate timeouts in each case */\n        timeouts = (this === null || this === void 0 ? void 0 : this.timeouts) || timeouts || defaults_1.default.TIMEOUTS;\n        return createRequest(uri, headers, params, body, requestMode, timeouts, method);\n    };\n    return JSONPTransport;\n}(comettransport_1.default));\nvar Request = /** @class */ (function (_super) {\n    tslib_1.__extends(Request, _super);\n    function Request(id, uri, headers, params, body, requestMode, timeouts, method) {\n        var _this = _super.call(this) || this;\n        if (id === undefined)\n            id = idCounter++;\n        _this.id = id;\n        _this.uri = uri;\n        _this.params = params || {};\n        _this.params.rnd = Utils.cheapRandStr();\n        if (headers) {\n            /* JSONP doesn't allow headers. Cherry-pick a couple to turn into qs params */\n            if (headers['X-Ably-Version'])\n                _this.params.v = headers['X-Ably-Version'];\n            if (headers['X-Ably-Lib'])\n                _this.params.lib = headers['X-Ably-Lib'];\n        }\n        _this.body = body;\n        _this.method = method;\n        _this.requestMode = requestMode;\n        _this.timeouts = timeouts;\n        _this.requestComplete = false;\n        return _this;\n    }\n    Request.prototype.exec = function () {\n        var _this = this;\n        var id = this.id, body = this.body, method = this.method, uri = this.uri, params = this.params;\n        params.callback = '_ablyjs_jsonp._(' + id + ')';\n        params.envelope = 'jsonp';\n        if (body) {\n            params.body = body;\n        }\n        if (method && method !== 'get') {\n            params.method = method;\n        }\n        var script = (this.script = document.createElement('script'));\n        var src = uri + Utils.toQueryString(params);\n        script.src = src;\n        if (script.src.split('/').slice(-1)[0] !== src.split('/').slice(-1)[0]) {\n            /* The src has been truncated. Can't abort, but can at least emit an\n             * error so the user knows what's gone wrong. (Can't compare strings\n             * directly as src may have a port, script.src won't) */\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'JSONP Request.exec()', 'Warning: the browser appears to have truncated the script URI. This will likely result in the request failing due to an unparseable body param');\n        }\n        script.async = true;\n        script.type = 'text/javascript';\n        script.charset = 'UTF-8';\n        script.onerror = function (err) {\n            _this.complete(new errorinfo_1.PartialErrorInfo('JSONP script error (event: ' + platform_1.default.Config.inspect(err) + ')', null, 400));\n        };\n        _['_' + id] = function (message) {\n            if (message.statusCode) {\n                /* Handle as enveloped jsonp, as all jsonp transport uses should be */\n                var response = message.response;\n                if (message.statusCode == 204) {\n                    _this.complete(null, null, null, message.statusCode);\n                }\n                else if (!response) {\n                    _this.complete(new errorinfo_1.PartialErrorInfo('Invalid server response: no envelope detected', null, 500));\n                }\n                else if (message.statusCode < 400 || Utils.isArray(response)) {\n                    /* If response is an array, it's an array of protocol messages -- even if\n                     * it contains an error action (hence the nonsuccess statuscode), we can\n                     * consider the request to have succeeded, just pass it on to\n                     * onProtocolMessage to decide what to do */\n                    _this.complete(null, response, message.headers, message.statusCode);\n                }\n                else {\n                    var err = response.error || new errorinfo_1.PartialErrorInfo('Error response received from server', null, message.statusCode);\n                    _this.complete(err);\n                }\n            }\n            else {\n                /* Handle as non-enveloped -- as will be eg from a customer's authUrl server */\n                _this.complete(null, message);\n            }\n        };\n        var timeout = this.requestMode == XHRStates_1.default.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout;\n        this.timer = setTimeout(this.abort.bind(this), timeout);\n        var head = document.getElementsByTagName('head')[0];\n        head.insertBefore(script, head.firstChild);\n    };\n    Request.prototype.complete = function (err, body, headers, statusCode) {\n        headers = headers || {};\n        if (!this.requestComplete) {\n            this.requestComplete = true;\n            var contentType = void 0;\n            if (body) {\n                contentType = typeof body == 'string' ? 'text/plain' : 'application/json';\n                headers['content-type'] = contentType;\n                this.emit('data', body);\n            }\n            this.emit('complete', err, body, headers, /* unpacked: */ true, statusCode);\n            this.dispose();\n        }\n    };\n    Request.prototype.abort = function () {\n        this.dispose();\n    };\n    Request.prototype.dispose = function () {\n        var timer = this.timer;\n        if (timer) {\n            clearTimeout(timer);\n            this.timer = null;\n        }\n        var script = this.script;\n        if (script.parentNode)\n            script.parentNode.removeChild(script);\n        delete _[this.id];\n        this.emit('disposed');\n    };\n    return Request;\n}(eventemitter_1.default));\nexports.Request = Request;\nfunction default_1(connectionManager) {\n    globalObject.JSONPTransport = JSONPTransport;\n    if (JSONPTransport.isAvailable()) {\n        connectionManager.supportedTransports[shortName] = JSONPTransport;\n    }\n    return JSONPTransport;\n}\nexports.default = default_1;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __nested_webpack_require_272498__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_272498__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_272498__(1));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(2));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(8));\nvar auth_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(17));\nvar push_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(46));\nvar paginatedresource_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(19));\nvar channel_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(33));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(4));\nvar stats_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(49));\nvar HttpMethods_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(18));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(3));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(9));\nvar presencemessage_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(15));\nvar resource_1 = tslib_1.__importDefault(__nested_webpack_require_272498__(14));\nvar noop = function () { };\nvar Rest = /** @class */ (function () {\n    function Rest(options) {\n        if (!options) {\n            var msg = 'no options provided';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Rest()', msg);\n            throw new Error(msg);\n        }\n        var optionsObj = defaults_1.default.objectifyOptions(options);\n        if (optionsObj.log) {\n            logger_1.default.setLog(optionsObj.log.level, optionsObj.log.handler);\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Rest()', 'initialized with clientOptions ' + platform_1.default.Config.inspect(options));\n        var normalOptions = (this.options = defaults_1.default.normaliseOptions(optionsObj));\n        /* process options */\n        if (normalOptions.key) {\n            var keyMatch = normalOptions.key.match(/^([^:\\s]+):([^:.\\s]+)$/);\n            if (!keyMatch) {\n                var msg = 'invalid key parameter';\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Rest()', msg);\n                throw new errorinfo_1.default(msg, 40400, 404);\n            }\n            normalOptions.keyName = keyMatch[1];\n            normalOptions.keySecret = keyMatch[2];\n        }\n        if ('clientId' in normalOptions) {\n            if (!(typeof normalOptions.clientId === 'string' || normalOptions.clientId === null))\n                throw new errorinfo_1.default('clientId must be either a string or null', 40012, 400);\n            else if (normalOptions.clientId === '*')\n                throw new errorinfo_1.default('Can’t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: \"*\"}})', 40012, 400);\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Rest()', 'started; version = ' + defaults_1.default.version);\n        this.baseUri = this.authority = function (host) {\n            return defaults_1.default.getHttpScheme(normalOptions) + host + ':' + defaults_1.default.getPort(normalOptions, false);\n        };\n        this._currentFallback = null;\n        this.serverTimeOffset = null;\n        this.http = new platform_1.default.Http(normalOptions);\n        this.auth = new auth_1.default(this, normalOptions);\n        this.channels = new Channels(this);\n        this.push = new push_1.default(this);\n    }\n    Rest.prototype.stats = function (params, callback) {\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.options.promises) {\n                    return Utils.promisify(this, 'stats', [params]);\n                }\n                callback = noop;\n            }\n        }\n        var headers = Utils.defaultGetHeaders(this.options), format = this.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.http.supportsLinkHeaders ? undefined : format;\n        if (this.options.headers)\n            Utils.mixin(headers, this.options.headers);\n        new paginatedresource_1.default(this, '/stats', headers, envelope, function (body, headers, unpacked) {\n            var statsValues = unpacked ? body : JSON.parse(body);\n            for (var i = 0; i < statsValues.length; i++)\n                statsValues[i] = stats_1.default.fromValues(statsValues[i]);\n            return statsValues;\n        }).get(params, callback);\n    };\n    Rest.prototype.time = function (params, callback) {\n        var _this = this;\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.options.promises) {\n                    return Utils.promisify(this, 'time', [params]);\n                }\n            }\n        }\n        var _callback = callback || noop;\n        var headers = Utils.defaultGetHeaders(this.options);\n        if (this.options.headers)\n            Utils.mixin(headers, this.options.headers);\n        var timeUri = function (host) {\n            return _this.authority(host) + '/time';\n        };\n        this.http.do(HttpMethods_1.default.Get, this, timeUri, headers, null, params, function (err, res, headers, unpacked) {\n            if (err) {\n                _callback(err);\n                return;\n            }\n            if (!unpacked)\n                res = JSON.parse(res);\n            var time = res[0];\n            if (!time) {\n                _callback(new errorinfo_1.default('Internal error (unexpected result type from GET /time)', 50000, 500));\n                return;\n            }\n            /* calculate time offset only once for this device by adding to the prototype */\n            _this.serverTimeOffset = time - Utils.now();\n            _callback(null, time);\n        });\n    };\n    Rest.prototype.request = function (method, path, params, body, customHeaders, callback) {\n        var useBinary = this.options.useBinaryProtocol, encoder = useBinary ? platform_1.default.Config.msgpack.encode : JSON.stringify, decoder = useBinary ? platform_1.default.Config.msgpack.decode : JSON.parse, format = useBinary ? Utils.Format.msgpack : Utils.Format.json, envelope = this.http.supportsLinkHeaders ? undefined : format;\n        params = params || {};\n        var _method = method.toLowerCase();\n        var headers = _method == 'get' ? Utils.defaultGetHeaders(this.options, format) : Utils.defaultPostHeaders(this.options, format);\n        if (callback === undefined) {\n            if (this.options.promises) {\n                return Utils.promisify(this, 'request', [method, path, params, body, customHeaders]);\n            }\n            callback = noop;\n        }\n        if (typeof body !== 'string') {\n            body = encoder(body);\n        }\n        if (this.options.headers) {\n            Utils.mixin(headers, this.options.headers);\n        }\n        if (customHeaders) {\n            Utils.mixin(headers, customHeaders);\n        }\n        var paginatedResource = new paginatedresource_1.default(this, path, headers, envelope, function (resbody, headers, unpacked) {\n            return Utils.ensureArray(unpacked ? resbody : decoder(resbody));\n        }, \n        /* useHttpPaginatedResponse: */ true);\n        if (!Utils.arrIn(platform_1.default.Http.methods, _method)) {\n            throw new errorinfo_1.default('Unsupported method ' + _method, 40500, 405);\n        }\n        if (Utils.arrIn(platform_1.default.Http.methodsWithBody, _method)) {\n            paginatedResource[_method](params, body, callback);\n        }\n        else {\n            paginatedResource[_method](params, callback);\n        }\n    };\n    Rest.prototype.batchPublish = function (specOrSpecs, callbackArg) {\n        if (callbackArg === undefined) {\n            if (this.options.promises) {\n                return Utils.promisify(this, 'batchPublish', [specOrSpecs]);\n            }\n            callbackArg = noop;\n        }\n        var callback = callbackArg;\n        var requestBodyDTO;\n        var singleSpecMode;\n        if (Utils.isArray(specOrSpecs)) {\n            requestBodyDTO = specOrSpecs;\n            singleSpecMode = false;\n        }\n        else {\n            requestBodyDTO = [specOrSpecs];\n            singleSpecMode = true;\n        }\n        var format = this.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(this.options, format);\n        if (this.options.headers)\n            Utils.mixin(headers, this.options.headers);\n        var requestBody = Utils.encodeBody(requestBodyDTO, format);\n        resource_1.default.post(this, '/messages', requestBody, headers, { newBatchResponse: 'true' }, null, function (err, body, headers, unpacked) {\n            if (err) {\n                // TODO remove this type assertion after fixing https://github.com/ably/ably-js/issues/1405\n                callback(err);\n                return;\n            }\n            var batchResults = (unpacked ? body : Utils.decodeBody(body, format));\n            // I don't love the below type assertions for `callback` but not sure how to avoid them\n            if (singleSpecMode) {\n                callback(null, batchResults[0]);\n            }\n            else {\n                callback(null, batchResults);\n            }\n        });\n    };\n    Rest.prototype.batchPresence = function (channels, callbackArg) {\n        if (callbackArg === undefined) {\n            if (this.options.promises) {\n                return Utils.promisify(this, 'batchPresence', [channels]);\n            }\n            callbackArg = noop;\n        }\n        var callback = callbackArg;\n        var format = this.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(this.options, format);\n        if (this.options.headers)\n            Utils.mixin(headers, this.options.headers);\n        var channelsParam = channels.join(',');\n        resource_1.default.get(this, '/presence', headers, { newBatchResponse: 'true', channels: channelsParam }, null, function (err, body, headers, unpacked) {\n            if (err) {\n                // TODO remove this type assertion after fixing https://github.com/ably/ably-js/issues/1405\n                callback(err);\n                return;\n            }\n            var batchResult = (unpacked ? body : Utils.decodeBody(body, format));\n            callback(null, batchResult);\n        });\n    };\n    Rest.prototype.setLog = function (logOptions) {\n        logger_1.default.setLog(logOptions.level, logOptions.handler);\n    };\n    Rest.Promise = function (options) {\n        options = defaults_1.default.objectifyOptions(options);\n        options.promises = true;\n        return new Rest(options);\n    };\n    Rest.Callbacks = Rest;\n    Rest.Platform = platform_1.default;\n    Rest.Message = message_1.default;\n    Rest.PresenceMessage = presencemessage_1.default;\n    return Rest;\n}());\nvar Channels = /** @class */ (function () {\n    function Channels(rest) {\n        this.rest = rest;\n        this.all = Object.create(null);\n    }\n    Channels.prototype.get = function (name, channelOptions) {\n        name = String(name);\n        var channel = this.all[name];\n        if (!channel) {\n            this.all[name] = channel = new channel_1.default(this.rest, name, channelOptions);\n        }\n        else if (channelOptions) {\n            channel.setOptions(channelOptions);\n        }\n        return channel;\n    };\n    /* Included to support certain niche use-cases; most users should ignore this.\n     * Please do not use this unless you know what you're doing */\n    Channels.prototype.release = function (name) {\n        delete this.all[String(name)];\n    };\n    return Channels;\n}());\nexports.default = Rest;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __nested_webpack_require_284643__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_284643__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.enc.Utf8;\n\n}));\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __nested_webpack_require_284914__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_284914__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __nested_webpack_require_290363__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_290363__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_290363__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(2));\nvar presence_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(34));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(9));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(4));\nvar paginatedresource_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(19));\nvar resource_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(14));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_290363__(3));\nfunction noop() { }\nvar MSG_ID_ENTROPY_BYTES = 9;\nfunction allEmptyIds(messages) {\n    return Utils.arrEvery(messages, function (message) {\n        return !message.id;\n    });\n}\nfunction normaliseChannelOptions(options) {\n    var channelOptions = options || {};\n    if (channelOptions.cipher) {\n        if (!platform_1.default.Crypto)\n            throw new Error('Encryption not enabled; use ably.encryption.js instead');\n        var cipher = platform_1.default.Crypto.getCipher(channelOptions.cipher);\n        channelOptions.cipher = cipher.cipherParams;\n        channelOptions.channelCipher = cipher.cipher;\n    }\n    else if ('cipher' in channelOptions) {\n        /* Don't deactivate an existing cipher unless options\n         * has a 'cipher' key that's falsey */\n        channelOptions.cipher = undefined;\n        channelOptions.channelCipher = null;\n    }\n    return channelOptions;\n}\nvar Channel = /** @class */ (function (_super) {\n    tslib_1.__extends(Channel, _super);\n    function Channel(rest, name, channelOptions) {\n        var _this = _super.call(this) || this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Channel()', 'started; name = ' + name);\n        _this.rest = rest;\n        _this.name = name;\n        _this.basePath = '/channels/' + encodeURIComponent(name);\n        _this.presence = new presence_1.default(_this);\n        _this.channelOptions = normaliseChannelOptions(channelOptions);\n        return _this;\n    }\n    Channel.prototype.setOptions = function (options) {\n        this.channelOptions = normaliseChannelOptions(options);\n    };\n    Channel.prototype.history = function (params, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Channel.history()', 'channel = ' + this.name);\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.rest.options.promises) {\n                    return Utils.promisify(this, 'history', arguments);\n                }\n                callback = noop;\n            }\n        }\n        this._history(params, callback);\n    };\n    Channel.prototype._history = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        var options = this.channelOptions;\n        new paginatedresource_1.default(rest, this.basePath + '/messages', headers, envelope, function (body, headers, unpacked) {\n            return message_1.default.fromResponseBody(body, options, unpacked ? undefined : format);\n        }).get(params, callback);\n    };\n    Channel.prototype.publish = function () {\n        var _this = this;\n        var argCount = arguments.length, first = arguments[0], second = arguments[1];\n        var callback = arguments[argCount - 1];\n        var messages;\n        var params;\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'publish', arguments);\n            }\n            callback = noop;\n        }\n        if (typeof first === 'string' || first === null) {\n            /* (name, data, ...) */\n            messages = [message_1.default.fromValues({ name: first, data: second })];\n            params = arguments[2];\n        }\n        else if (Utils.isObject(first)) {\n            messages = [message_1.default.fromValues(first)];\n            params = arguments[1];\n        }\n        else if (Utils.isArray(first)) {\n            messages = message_1.default.fromValuesArray(first);\n            params = arguments[1];\n        }\n        else {\n            throw new errorinfo_1.default('The single-argument form of publish() expects a message object or an array of message objects', 40013, 400);\n        }\n        if (typeof params !== 'object' || !params) {\n            /* No params supplied (so after-message argument is just the callback or undefined) */\n            params = {};\n        }\n        var rest = this.rest, options = rest.options, format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, idempotentRestPublishing = rest.options.idempotentRestPublishing, headers = Utils.defaultPostHeaders(rest.options, format);\n        if (options.headers)\n            Utils.mixin(headers, options.headers);\n        if (idempotentRestPublishing && allEmptyIds(messages)) {\n            var msgIdBase_1 = Utils.randomString(MSG_ID_ENTROPY_BYTES);\n            Utils.arrForEach(messages, function (message, index) {\n                message.id = msgIdBase_1 + ':' + index.toString();\n            });\n        }\n        message_1.default.encodeArray(messages, this.channelOptions, function (err) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            /* RSL1i */\n            var size = message_1.default.getMessagesSize(messages), maxMessageSize = options.maxMessageSize;\n            if (size > maxMessageSize) {\n                callback(new errorinfo_1.default('Maximum size of messages that can be published at once exceeded ( was ' +\n                    size +\n                    ' bytes; limit is ' +\n                    maxMessageSize +\n                    ' bytes)', 40009, 400));\n                return;\n            }\n            _this._publish(message_1.default.serialize(messages, format), headers, params, callback);\n        });\n    };\n    Channel.prototype._publish = function (requestBody, headers, params, callback) {\n        resource_1.default.post(this.rest, this.basePath + '/messages', requestBody, headers, params, null, callback);\n    };\n    Channel.prototype.status = function (callback) {\n        if (typeof callback !== 'function' && this.rest.options.promises) {\n            return Utils.promisify(this, 'status', []);\n        }\n        var format = this.rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\n        var headers = Utils.defaultPostHeaders(this.rest.options, format);\n        resource_1.default.get(this.rest, this.basePath, headers, {}, format, callback || noop);\n    };\n    return Channel;\n}(eventemitter_1.default));\nexports.default = Channel;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __nested_webpack_require_297668__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_297668__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_297668__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_297668__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_297668__(2));\nvar paginatedresource_1 = tslib_1.__importDefault(__nested_webpack_require_297668__(19));\nvar presencemessage_1 = tslib_1.__importDefault(__nested_webpack_require_297668__(15));\nfunction noop() { }\nvar Presence = /** @class */ (function (_super) {\n    tslib_1.__extends(Presence, _super);\n    function Presence(channel) {\n        var _this = _super.call(this) || this;\n        _this.channel = channel;\n        _this.basePath = channel.basePath + '/presence';\n        return _this;\n    }\n    Presence.prototype.get = function (params, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Presence.get()', 'channel = ' + this.channel.name);\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.channel.rest.options.promises) {\n                    return Utils.promisify(this, 'get', arguments);\n                }\n                callback = noop;\n            }\n        }\n        var rest = this.channel.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.channel.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        var options = this.channel.channelOptions;\n        new paginatedresource_1.default(rest, this.basePath, headers, envelope, function (body, headers, unpacked) {\n            return presencemessage_1.default.fromResponseBody(body, options, unpacked ? undefined : format);\n        }).get(params, callback);\n    };\n    Presence.prototype.history = function (params, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Presence.history()', 'channel = ' + this.channel.name);\n        return this._history(params, callback);\n    };\n    Presence.prototype._history = function (params, callback) {\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.channel.rest.options.promises) {\n                    return Utils.promisify(this, '_history', [params]);\n                }\n                callback = noop;\n            }\n        }\n        var rest = this.channel.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.channel.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        var options = this.channel.channelOptions;\n        new paginatedresource_1.default(rest, this.basePath + '/history', headers, envelope, function (body, headers, unpacked) {\n            return presencemessage_1.default.fromResponseBody(body, options, unpacked ? undefined : format);\n        }).get(params, callback);\n    };\n    return Presence;\n}(eventemitter_1.default));\nexports.default = Presence;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __nested_webpack_require_301348__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransportParams = void 0;\nvar tslib_1 = __nested_webpack_require_301348__(0);\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(10));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_301348__(1));\nvar protocol_1 = tslib_1.__importStar(__nested_webpack_require_301348__(52));\nvar defaults_1 = tslib_1.__importStar(__nested_webpack_require_301348__(8));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(3));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(7));\nvar messagequeue_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(36));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(2));\nvar connectionstatechange_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(37));\nvar connectionerrors_1 = tslib_1.__importStar(__nested_webpack_require_301348__(20));\nvar errorinfo_1 = tslib_1.__importStar(__nested_webpack_require_301348__(4));\nvar auth_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(17));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(9));\nvar multicaster_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(23));\nvar websockettransport_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(53));\nvar transport_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(26));\nvar HttpStatusCodes_1 = tslib_1.__importDefault(__nested_webpack_require_301348__(25));\nvar haveWebStorage = function () { var _a; return typeof platform_1.default.WebStorage !== 'undefined' && ((_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.localSupported); };\nvar haveSessionStorage = function () { var _a; return typeof platform_1.default.WebStorage !== 'undefined' && ((_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.sessionSupported); };\nvar actions = protocolmessage_1.default.Action;\nvar noop = function () { };\nvar transportPreferenceName = 'ably-transport-preference';\nvar sessionRecoveryName = 'ably-connection-recovery';\nfunction getSessionRecoverData() {\n    var _a, _b;\n    return haveSessionStorage() && ((_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.getSession) === null || _b === void 0 ? void 0 : _b.call(_a, sessionRecoveryName));\n}\nfunction setSessionRecoverData(value) {\n    var _a, _b;\n    return haveSessionStorage() && ((_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.setSession) === null || _b === void 0 ? void 0 : _b.call(_a, sessionRecoveryName, value));\n}\nfunction clearSessionRecoverData() {\n    var _a, _b;\n    return haveSessionStorage() && ((_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.removeSession) === null || _b === void 0 ? void 0 : _b.call(_a, sessionRecoveryName));\n}\nfunction betterTransportThan(a, b) {\n    return (Utils.arrIndexOf(platform_1.default.Defaults.transportPreferenceOrder, a.shortName) >\n        Utils.arrIndexOf(platform_1.default.Defaults.transportPreferenceOrder, b.shortName));\n}\nfunction bundleWith(dest, src, maxSize) {\n    var action;\n    if (dest.channel !== src.channel) {\n        /* RTL6d3 */\n        return false;\n    }\n    if ((action = dest.action) !== actions.PRESENCE && action !== actions.MESSAGE) {\n        /* RTL6d - can only bundle messages or presence */\n        return false;\n    }\n    if (action !== src.action) {\n        /* RTL6d4 */\n        return false;\n    }\n    var kind = action === actions.PRESENCE ? 'presence' : 'messages', proposed = dest[kind].concat(src[kind]), size = message_1.default.getMessagesSize(proposed);\n    if (size > maxSize) {\n        /* RTL6d1 */\n        return false;\n    }\n    if (!Utils.allSame(proposed, 'clientId')) {\n        /* RTL6d2 */\n        return false;\n    }\n    if (!Utils.arrEvery(proposed, function (msg) {\n        return !msg.id;\n    })) {\n        /* RTL6d7 */\n        return false;\n    }\n    /* we're good to go! */\n    dest[kind] = proposed;\n    return true;\n}\nfunction decodeRecoveryKey(recoveryKey) {\n    try {\n        return JSON.parse(recoveryKey);\n    }\n    catch (e) {\n        return null;\n    }\n}\nvar TransportParams = /** @class */ (function () {\n    function TransportParams(options, host, mode, connectionKey) {\n        this.options = options;\n        this.host = host;\n        this.mode = mode;\n        this.connectionKey = connectionKey;\n        this.format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\n    }\n    TransportParams.prototype.getConnectParams = function (authParams) {\n        var params = authParams ? Utils.copy(authParams) : {};\n        var options = this.options;\n        switch (this.mode) {\n            case 'upgrade':\n                params.upgrade = this.connectionKey;\n                break;\n            case 'resume':\n                params.resume = this.connectionKey;\n                break;\n            case 'recover': {\n                var recoveryContext = decodeRecoveryKey(options.recover);\n                if (recoveryContext) {\n                    params.recover = recoveryContext.connectionKey;\n                }\n                break;\n            }\n            default:\n        }\n        if (options.clientId !== undefined) {\n            params.clientId = options.clientId;\n        }\n        if (options.echoMessages === false) {\n            params.echo = 'false';\n        }\n        if (this.format !== undefined) {\n            params.format = this.format;\n        }\n        if (this.stream !== undefined) {\n            params.stream = this.stream;\n        }\n        if (this.heartbeats !== undefined) {\n            params.heartbeats = this.heartbeats;\n        }\n        params.v = defaults_1.default.protocolVersion;\n        params.agent = (0, defaults_1.getAgentString)(this.options);\n        if (options.transportParams !== undefined) {\n            Utils.mixin(params, options.transportParams);\n        }\n        return params;\n    };\n    TransportParams.prototype.toString = function () {\n        var result = '[mode=' + this.mode;\n        if (this.host) {\n            result += ',host=' + this.host;\n        }\n        if (this.connectionKey) {\n            result += ',connectionKey=' + this.connectionKey;\n        }\n        if (this.format) {\n            result += ',format=' + this.format;\n        }\n        result += ']';\n        return result;\n    };\n    return TransportParams;\n}());\nexports.TransportParams = TransportParams;\nvar ConnectionManager = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectionManager, _super);\n    function ConnectionManager(realtime, options) {\n        var _this = _super.call(this) || this;\n        _this.disconnectedRetryCount = 0;\n        ConnectionManager.initTransports();\n        _this.realtime = realtime;\n        _this.options = options;\n        var timeouts = options.timeouts;\n        /* connectingTimeout: leave preferenceConnectTimeout (~6s) to try the\n         * preference transport, then realtimeRequestTimeout (~10s) to establish\n         * the base transport in case that fails */\n        var connectingTimeout = timeouts.preferenceConnectTimeout + timeouts.realtimeRequestTimeout;\n        _this.states = {\n            initialized: {\n                state: 'initialized',\n                terminal: false,\n                queueEvents: true,\n                sendEvents: false,\n                failState: 'disconnected',\n            },\n            connecting: {\n                state: 'connecting',\n                terminal: false,\n                queueEvents: true,\n                sendEvents: false,\n                retryDelay: connectingTimeout,\n                failState: 'disconnected',\n            },\n            connected: {\n                state: 'connected',\n                terminal: false,\n                queueEvents: false,\n                sendEvents: true,\n                failState: 'disconnected',\n            },\n            synchronizing: {\n                state: 'connected',\n                terminal: false,\n                queueEvents: true,\n                sendEvents: false,\n                forceQueueEvents: true,\n                failState: 'disconnected',\n            },\n            disconnected: {\n                state: 'disconnected',\n                terminal: false,\n                queueEvents: true,\n                sendEvents: false,\n                retryDelay: timeouts.disconnectedRetryTimeout,\n                failState: 'disconnected',\n            },\n            suspended: {\n                state: 'suspended',\n                terminal: false,\n                queueEvents: false,\n                sendEvents: false,\n                retryDelay: timeouts.suspendedRetryTimeout,\n                failState: 'suspended',\n            },\n            closing: {\n                state: 'closing',\n                terminal: false,\n                queueEvents: false,\n                sendEvents: false,\n                retryDelay: timeouts.realtimeRequestTimeout,\n                failState: 'closed',\n            },\n            closed: { state: 'closed', terminal: true, queueEvents: false, sendEvents: false, failState: 'closed' },\n            failed: { state: 'failed', terminal: true, queueEvents: false, sendEvents: false, failState: 'failed' },\n        };\n        _this.state = _this.states.initialized;\n        _this.errorReason = null;\n        _this.queuedMessages = new messagequeue_1.default();\n        _this.msgSerial = 0;\n        _this.connectionDetails = undefined;\n        _this.connectionId = undefined;\n        _this.connectionKey = undefined;\n        _this.connectionStateTtl = timeouts.connectionStateTtl;\n        _this.maxIdleInterval = null;\n        _this.transports = Utils.intersect(options.transports || defaults_1.default.defaultTransports, ConnectionManager.supportedTransports);\n        /* baseTransports selects the leftmost transport in the Defaults.baseTransportOrder list\n         * that's both requested and supported. Normally this will be xhr_polling;\n         * if xhr isn't supported it will be jsonp. If the user has forced a\n         * transport, it'll just be that one. */\n        _this.baseTransport = Utils.intersect(defaults_1.default.baseTransportOrder, _this.transports)[0];\n        _this.upgradeTransports = Utils.intersect(_this.transports, defaults_1.default.upgradeTransports);\n        _this.transportPreference = null;\n        _this.httpHosts = defaults_1.default.getHosts(options);\n        _this.activeProtocol = null;\n        _this.proposedTransports = [];\n        _this.pendingTransports = [];\n        _this.host = null;\n        _this.lastAutoReconnectAttempt = null;\n        _this.lastActivity = null;\n        _this.forceFallbackHost = false;\n        _this.connectCounter = 0;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Realtime.ConnectionManager()', 'started');\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Realtime.ConnectionManager()', 'requested transports = [' + (options.transports || defaults_1.default.defaultTransports) + ']');\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Realtime.ConnectionManager()', 'available transports = [' + _this.transports + ']');\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Realtime.ConnectionManager()', 'http hosts = [' + _this.httpHosts + ']');\n        if (!_this.transports.length) {\n            var msg = 'no requested transports available';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'realtime.ConnectionManager()', msg);\n            throw new Error(msg);\n        }\n        var addEventListener = platform_1.default.Config.addEventListener;\n        if (addEventListener) {\n            /* intercept close event in browser to persist connection id if requested */\n            if (haveSessionStorage() && typeof options.recover === 'function') {\n                /* Usually can't use bind as not supported in IE8, but IE doesn't support sessionStorage, so... */\n                addEventListener('beforeunload', _this.persistConnection.bind(_this));\n            }\n            if (options.closeOnUnload === true) {\n                addEventListener('beforeunload', function () {\n                    logger_1.default.logAction(logger_1.default.LOG_MAJOR, 'Realtime.ConnectionManager()', 'beforeunload event has triggered the connection to close as closeOnUnload is true');\n                    _this.requestState({ state: 'closing' });\n                });\n            }\n            /* Listen for online and offline events */\n            addEventListener('online', function () {\n                if (_this.state == _this.states.disconnected || _this.state == _this.states.suspended) {\n                    logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager caught browser ‘online’ event', 'reattempting connection');\n                    _this.requestState({ state: 'connecting' });\n                }\n                else if (_this.state == _this.states.connecting) {\n                    // RTN20c: if 'online' event recieved while CONNECTING, abandon connection attempt and retry\n                    _this.pendingTransports.forEach(function (transport) {\n                        // Detach transport listeners to avoid connection state side effects from calling dispose\n                        transport.off();\n                    });\n                    _this.disconnectAllTransports();\n                    _this.startConnect();\n                }\n            });\n            addEventListener('offline', function () {\n                if (_this.state == _this.states.connected) {\n                    logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager caught browser ‘offline’ event', 'disconnecting active transport');\n                    // Not sufficient to just go to the 'disconnected' state, want to\n                    // force all transports to reattempt the connection. Will immediately\n                    // retry.\n                    _this.disconnectAllTransports();\n                }\n            });\n        }\n        return _this;\n    }\n    ConnectionManager.initTransports = function () {\n        (0, websockettransport_1.default)(ConnectionManager);\n        Utils.arrForEach(platform_1.default.Transports, function (initFn) {\n            initFn(ConnectionManager);\n        });\n    };\n    ConnectionManager.prototype.createTransportParams = function (host, mode) {\n        return new TransportParams(this.options, host, mode, this.connectionKey);\n    };\n    ConnectionManager.prototype.getTransportParams = function (callback) {\n        var _this = this;\n        var decideMode = function (modeCb) {\n            if (_this.connectionKey) {\n                modeCb('resume');\n                return;\n            }\n            if (typeof _this.options.recover === 'string') {\n                modeCb('recover');\n                return;\n            }\n            var recoverFn = _this.options.recover, lastSessionData = getSessionRecoverData();\n            if (lastSessionData && typeof recoverFn === 'function') {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.getTransportParams()', 'Calling clientOptions-provided recover function with last session data');\n                recoverFn(lastSessionData, function (shouldRecover) {\n                    if (shouldRecover) {\n                        _this.options.recover = lastSessionData.recoveryKey;\n                        modeCb('recover');\n                    }\n                    else {\n                        modeCb('clean');\n                    }\n                });\n                return;\n            }\n            modeCb('clean');\n        };\n        decideMode(function (mode) {\n            var transportParams = _this.createTransportParams(null, mode);\n            if (mode === 'recover') {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.getTransportParams()', 'Transport recovery mode = recover; recoveryKey = ' + _this.options.recover);\n                var recoveryContext = decodeRecoveryKey(_this.options.recover);\n                if (recoveryContext) {\n                    _this.msgSerial = recoveryContext.msgSerial;\n                }\n            }\n            else {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.getTransportParams()', 'Transport params = ' + transportParams.toString());\n            }\n            callback(transportParams);\n        });\n    };\n    /**\n     * Attempt to connect using a given transport\n     * @param transportParams\n     * @param candidate, the transport to try\n     * @param callback\n     */\n    ConnectionManager.prototype.tryATransport = function (transportParams, candidate, callback) {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.tryATransport()', 'trying ' + candidate);\n        transport_1.default.tryConnect(ConnectionManager.supportedTransports[candidate], this, this.realtime.auth, transportParams, function (wrappedErr, transport) {\n            var state = _this.state;\n            if (state == _this.states.closing || state == _this.states.closed || state == _this.states.failed) {\n                if (transport) {\n                    logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.tryATransport()', 'connection ' + state.state + ' while we were attempting the transport; closing ' + transport);\n                    transport.close();\n                }\n                callback(true);\n                return;\n            }\n            if (wrappedErr) {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.tryATransport()', 'transport ' + candidate + ' ' + wrappedErr.event + ', err: ' + wrappedErr.error.toString());\n                /* Comet transport onconnect token errors can be dealt with here.\n                 * Websocket ones only happen after the transport claims to be viable,\n                 * so are dealt with as non-onconnect token errors */\n                if (auth_1.default.isTokenErr(wrappedErr.error) &&\n                    !(_this.errorReason && auth_1.default.isTokenErr(_this.errorReason))) {\n                    _this.errorReason = wrappedErr.error;\n                    /* re-get a token and try again */\n                    _this.realtime.auth._forceNewToken(null, null, function (err) {\n                        if (err) {\n                            _this.actOnErrorFromAuthorize(err);\n                            return;\n                        }\n                        _this.tryATransport(transportParams, candidate, callback);\n                    });\n                }\n                else if (wrappedErr.event === 'failed') {\n                    /* Error that's fatal to the connection */\n                    _this.notifyState({ state: 'failed', error: wrappedErr.error });\n                    callback(true);\n                }\n                else if (wrappedErr.event === 'disconnected') {\n                    if (!(0, connectionerrors_1.isRetriable)(wrappedErr.error)) {\n                        /* Error received from the server that does not call for trying a fallback host, eg a rate limit */\n                        _this.notifyState({ state: _this.states.connecting.failState, error: wrappedErr.error });\n                        callback(true);\n                    }\n                    else {\n                        /* Error with that transport only; continue trying other fallback hosts */\n                        callback(false);\n                    }\n                }\n                return;\n            }\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.tryATransport()', 'viable transport ' + candidate + '; setting pending');\n            _this.setTransportPending(transport, transportParams);\n            callback(null, transport);\n        });\n    };\n    /**\n     * Called when a transport is indicated to be viable, and the ConnectionManager\n     * expects to activate this transport as soon as it is connected.\n     * @param transport\n     * @param transportParams\n     */\n    ConnectionManager.prototype.setTransportPending = function (transport, transportParams) {\n        var _this = this;\n        var mode = transportParams.mode;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.setTransportPending()', 'transport = ' + transport + '; mode = ' + mode);\n        Utils.arrDeleteValue(this.proposedTransports, transport);\n        this.pendingTransports.push(transport);\n        var optimalTransport = platform_1.default.Defaults.transportPreferenceOrder[platform_1.default.Defaults.transportPreferenceOrder.length - 1];\n        transport.once('connected', function (error, connectionId, connectionDetails) {\n            if (mode == 'upgrade' && _this.activeProtocol) {\n                /*  if ws and xhrs are connecting in parallel, delay xhrs activation to let ws go ahead */\n                if (transport.shortName !== optimalTransport &&\n                    Utils.arrIn(_this.getUpgradePossibilities(), optimalTransport) &&\n                    _this.activeProtocol) {\n                    setTimeout(function () {\n                        _this.scheduleTransportActivation(error, transport, connectionId, connectionDetails);\n                    }, _this.options.timeouts.parallelUpgradeDelay);\n                }\n                else {\n                    _this.scheduleTransportActivation(error, transport, connectionId, connectionDetails);\n                }\n            }\n            else {\n                _this.activateTransport(error, transport, connectionId, connectionDetails);\n                /* allow connectImpl to start the upgrade process if needed, but allow\n                 * other event handlers, including activating the transport, to run first */\n                platform_1.default.Config.nextTick(function () {\n                    _this.connectImpl(transportParams);\n                });\n            }\n            if (mode === 'recover' && _this.options.recover) {\n                /* After a successful recovery, we unpersist, as a recovery key cannot\n                 * be used more than once */\n                _this.options.recover = null;\n                _this.unpersistConnection();\n            }\n        });\n        var self = this;\n        transport.on(['disconnected', 'closed', 'failed'], function (error) {\n            self.deactivateTransport(transport, this.event, error);\n        });\n        this.emit('transport.pending', transport);\n    };\n    /**\n     * Called when an upgrade transport is connected,\n     * to schedule the activation of that transport.\n     * @param error\n     * @param transport\n     * @param connectionId\n     * @param connectionDetails\n     */\n    ConnectionManager.prototype.scheduleTransportActivation = function (error, transport, connectionId, connectionDetails) {\n        var _this = this;\n        var currentTransport = this.activeProtocol && this.activeProtocol.getTransport(), abandon = function () {\n            transport.disconnect();\n            Utils.arrDeleteValue(_this.pendingTransports, transport);\n        };\n        if (this.state !== this.states.connected && this.state !== this.states.connecting) {\n            /* This is most likely to happen for the delayed XHRs, when XHRs and ws are scheduled in parallel*/\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Current connection state (' +\n                this.state.state +\n                (this.state === this.states.synchronizing ? ', but with an upgrade already in progress' : '') +\n                ') is not valid to upgrade in; abandoning upgrade to ' +\n                transport.shortName);\n            abandon();\n            return;\n        }\n        if (currentTransport && !betterTransportThan(transport, currentTransport)) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Proposed transport ' +\n                transport.shortName +\n                ' is no better than current active transport ' +\n                currentTransport.shortName +\n                ' - abandoning upgrade');\n            abandon();\n            return;\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Scheduling transport upgrade; transport = ' + transport);\n        var oldProtocol = null;\n        if (!transport.isConnected) {\n            /* This is only possible if the xhr streaming transport was disconnected during the parallelUpgradeDelay */\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Proposed transport ' + transport.shortName + 'is no longer connected; abandoning upgrade');\n            abandon();\n            return;\n        }\n        if (this.state === this.states.connected) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.scheduleTransportActivation()', 'Currently connected, so temporarily pausing events until the upgrade is complete');\n            this.state = this.states.synchronizing;\n            oldProtocol = this.activeProtocol;\n        }\n        else if (this.state !== this.states.connecting) {\n            /* Note: upgrading from the connecting state is valid if the old active\n             * transport was deactivated after the upgrade transport first connected;\n             * see logic in deactivateTransport */\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Current connection state (' +\n                this.state.state +\n                (this.state === this.states.synchronizing ? ', but with an upgrade already in progress' : '') +\n                ') is not valid to upgrade in; abandoning upgrade to ' +\n                transport.shortName);\n            abandon();\n            return;\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Syncing transport; transport = ' + transport);\n        var finishUpgrade = function () {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Activating transport; transport = ' + transport);\n            // Send ACTIVATE to tell the server to make this transport the\n            // active transport, which suspends channels until we re-attach.\n            transport.send(protocolmessage_1.default.fromValues({\n                action: actions.ACTIVATE,\n            }));\n            _this.activateTransport(error, transport, connectionId, connectionDetails);\n            /* Restore pre-sync state. If state has changed in the meantime,\n             * don't touch it -- since the websocket transport waits a tick before\n             * disposing itself, it's possible for it to have happily synced\n             * without err while, unknown to it, the connection has closed in the\n             * meantime and the ws transport is scheduled for death */\n            if (_this.state === _this.states.synchronizing) {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.scheduleTransportActivation()', 'Pre-upgrade protocol idle, sending queued messages on upgraded transport; transport = ' + transport);\n                _this.state = _this.states.connected;\n            }\n            else {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.scheduleTransportActivation()', 'Pre-upgrade protocol idle, but state is now ' + _this.state.state + ', so leaving unchanged');\n            }\n            if (_this.state.sendEvents) {\n                _this.sendQueuedMessages();\n            }\n        };\n        /* Wait until sync is done and old transport is idle before activating new transport. This\n         * guarantees that messages arrive at realtime in the same order they are sent.\n         *\n         * If a message times out on the old transport, since it's still the active transport the\n         * message will be requeued. deactivateTransport will see the pending transport and notify\n         * the `connecting` state without starting a new connection, so the new transport can take\n         * over once deactivateTransport clears the old protocol's queue.\n         *\n         * If there is no old protocol, that meant that we weren't in the connected state at the\n         * beginning of the sync - likely the base transport died just before the sync. So can just\n         * finish the upgrade. If we're actually in closing/failed rather than connecting, that's\n         * fine, activatetransport will deal with that. */\n        if (oldProtocol) {\n            /* Most of the time this will be already true: the new-transport sync will have given\n             * enough time for in-flight messages on the old transport to complete. */\n            oldProtocol.onceIdle(finishUpgrade);\n        }\n        else {\n            finishUpgrade();\n        }\n    };\n    /**\n     * Called when a transport is connected, and the connectionmanager decides that\n     * it will now be the active transport. Returns whether or not it activated\n     * the transport (if the connection is closing/closed it will choose not to).\n     * @param transport the transport instance\n     * @param connectionId the id of the new active connection\n     * @param connectionDetails the details of the new active connection\n     */\n    ConnectionManager.prototype.activateTransport = function (error, transport, connectionId, connectionDetails) {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.activateTransport()', 'transport = ' + transport);\n        if (error) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.activateTransport()', 'error = ' + error);\n        }\n        if (connectionId) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.activateTransport()', 'connectionId =  ' + connectionId);\n        }\n        if (connectionDetails) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.activateTransport()', 'connectionDetails =  ' + JSON.stringify(connectionDetails));\n        }\n        this.persistTransportPreference(transport);\n        /* if the connectionmanager moved to the closing/closed state before this\n         * connection event, then we won't activate this transport */\n        var existingState = this.state, connectedState = this.states.connected.state;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.activateTransport()', 'current state = ' + existingState.state);\n        if (existingState.state == this.states.closing.state ||\n            existingState.state == this.states.closed.state ||\n            existingState.state == this.states.failed.state) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.activateTransport()', 'Disconnecting transport and abandoning');\n            transport.disconnect();\n            return false;\n        }\n        /* remove this transport from pending transports */\n        Utils.arrDeleteValue(this.pendingTransports, transport);\n        /* if the transport is not connected then don't activate it */\n        if (!transport.isConnected) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.activateTransport()', 'Declining to activate transport ' + transport + ' since it appears to no longer be connected');\n            return false;\n        }\n        /* the given transport is connected; this will immediately\n         * take over as the active transport */\n        var existingActiveProtocol = this.activeProtocol;\n        this.activeProtocol = new protocol_1.default(transport);\n        this.host = transport.params.host;\n        var connectionKey = connectionDetails.connectionKey;\n        if (connectionKey && this.connectionKey != connectionKey) {\n            this.setConnection(connectionId, connectionDetails, !!error);\n        }\n        /* Rebroadcast any new connectionDetails from the active transport, which\n         * can come at any time (eg following a reauth), and emit an RTN24 UPDATE\n         * event. (Listener added on nextTick because we're in a transport.on('connected')\n         * callback at the moment; if we add it now we'll be adding it to the end\n         * of the listeners array and it'll be called immediately) */\n        this.onConnectionDetailsUpdate(connectionDetails, transport);\n        platform_1.default.Config.nextTick(function () {\n            transport.on('connected', function (connectedErr, _connectionId, connectionDetails) {\n                _this.onConnectionDetailsUpdate(connectionDetails, transport);\n                _this.emit('update', new connectionstatechange_1.default(connectedState, connectedState, null, connectedErr));\n            });\n        });\n        /* If previously not connected, notify the state change (including any\n         * error). */\n        if (existingState.state === this.states.connected.state) {\n            if (error) {\n                /* if upgrading without error, leave any existing errorReason alone */\n                this.errorReason = this.realtime.connection.errorReason = error;\n                /* Only bother emitting an upgrade if there's an error; otherwise it's\n                 * just a transport upgrade, so auth details won't have changed */\n                this.emit('update', new connectionstatechange_1.default(connectedState, connectedState, null, error));\n            }\n        }\n        else {\n            this.notifyState({ state: 'connected', error: error });\n            this.errorReason = this.realtime.connection.errorReason = error || null;\n        }\n        /* Send after the connection state update, as Channels hooks into this to\n         * resend attaches on a new transport if necessary */\n        this.emit('transport.active', transport);\n        /* Gracefully terminate existing protocol */\n        if (existingActiveProtocol) {\n            if (existingActiveProtocol.messageQueue.count() > 0) {\n                /* We could just requeue pending messages on the new transport, but\n                 * actually this should never happen: transports should only take over\n                 * from other active transports when upgrading, and upgrading waits for\n                 * the old transport to be idle. So log an error. */\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.activateTransport()', 'Previous active protocol (for transport ' +\n                    existingActiveProtocol.transport.shortName +\n                    ', new one is ' +\n                    transport.shortName +\n                    ') finishing with ' +\n                    existingActiveProtocol.messageQueue.count() +\n                    ' messages still pending');\n            }\n            if (existingActiveProtocol.transport === transport) {\n                var msg = 'Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = ' +\n                    transport.shortName +\n                    '; stack = ' +\n                    new Error().stack;\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.activateTransport()', msg);\n            }\n            else {\n                existingActiveProtocol.finish();\n            }\n        }\n        /* Terminate any other pending transport(s), and\n         * abort any not-yet-pending transport attempts */\n        Utils.safeArrForEach(this.pendingTransports, function (pendingTransport) {\n            if (pendingTransport === transport) {\n                var msg = 'Assumption violated: activating a transport that is still marked as a pending transport; transport = ' +\n                    transport.shortName +\n                    '; stack = ' +\n                    new Error().stack;\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.activateTransport()', msg);\n                Utils.arrDeleteValue(_this.pendingTransports, transport);\n            }\n            else {\n                pendingTransport.disconnect();\n            }\n        });\n        Utils.safeArrForEach(this.proposedTransports, function (proposedTransport) {\n            if (proposedTransport === transport) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.activateTransport()', 'Assumption violated: activating a transport that is still marked as a proposed transport; transport = ' +\n                    transport.shortName +\n                    '; stack = ' +\n                    new Error().stack);\n                Utils.arrDeleteValue(_this.proposedTransports, transport);\n            }\n            else {\n                proposedTransport.dispose();\n            }\n        });\n        return true;\n    };\n    /**\n     * Called when a transport is no longer the active transport. This can occur\n     * in any transport connection state.\n     * @param transport\n     */\n    ConnectionManager.prototype.deactivateTransport = function (transport, state, error) {\n        var currentProtocol = this.activeProtocol, wasActive = currentProtocol && currentProtocol.getTransport() === transport, wasPending = Utils.arrDeleteValue(this.pendingTransports, transport), wasProposed = Utils.arrDeleteValue(this.proposedTransports, transport), noTransportsScheduledForActivation = this.noTransportsScheduledForActivation();\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.deactivateTransport()', 'transport = ' + transport);\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.deactivateTransport()', 'state = ' +\n            state +\n            (wasActive ? '; was active' : wasPending ? '; was pending' : wasProposed ? '; was proposed' : '') +\n            (noTransportsScheduledForActivation ? '' : '; another transport is scheduled for activation'));\n        if (error && error.message)\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.deactivateTransport()', 'reason =  ' + error.message);\n        if (wasActive) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.deactivateTransport()', 'Getting, clearing, and requeuing ' +\n                this.activeProtocol.messageQueue.count() +\n                ' pending messages');\n            this.queuePendingMessages(currentProtocol.getPendingMessages());\n            /* Clear any messages we requeue to allow the protocol to become idle.\n             * In case of an upgrade, this will trigger an immediate activation of\n             * the upgrade transport, so delay a tick so this transport can finish\n             * deactivating */\n            platform_1.default.Config.nextTick(function () {\n                currentProtocol.clearPendingMessages();\n            });\n            this.activeProtocol = this.host = null;\n        }\n        this.emit('transport.inactive', transport);\n        /* this transport state change is a state change for the connectionmanager if\n         * - the transport was the active transport and there are no transports\n         *   which are connected and scheduled for activation, just waiting for the\n         *   active transport to finish what its doing; or\n         * - the transport was the active transport and the error was fatal (so\n         *   unhealable by another transport); or\n         * - there is no active transport, and this is the last remaining\n         *   pending transport (so we were in the connecting state)\n         */\n        if ((wasActive && noTransportsScheduledForActivation) ||\n            (wasActive && state === 'failed') ||\n            state === 'closed' ||\n            (currentProtocol === null && wasPending && this.pendingTransports.length === 0)) {\n            /* If we're disconnected with a 5xx we need to try fallback hosts\n             * (RTN14d), but (a) due to how the upgrade sequence works, the\n             * host/transport selection sequence only cares about getting to\n             * `preconnect` (eg establishing a websocket) getting a `disconnected`\n             * protocol message afterwards is too late; and (b) host retry only\n             * applies to connectBase unless the stored preference transport doesn't\n             * work. We solve this by unpersisting the transport preference and\n             * setting an instance variable to force fallback hosts to be used (if\n             * any) here. Bit of a kludge, but no real better alternatives without\n             * rewriting the entire thing */\n            if (state === 'disconnected' && error && error.statusCode > 500 && this.httpHosts.length > 1) {\n                this.unpersistTransportPreference();\n                this.forceFallbackHost = true;\n                /* and try to connect again to try a fallback host without waiting for the usual 15s disconnectedRetryTimeout */\n                this.notifyState({ state: state, error: error, retryImmediately: true });\n                return;\n            }\n            /* TODO remove below line once realtime sends token errors as DISCONNECTEDs */\n            var newConnectionState = state === 'failed' && auth_1.default.isTokenErr(error) ? 'disconnected' : state;\n            this.notifyState({ state: newConnectionState, error: error });\n            return;\n        }\n        if (wasActive && state === 'disconnected' && this.state !== this.states.synchronizing) {\n            /* If we were active but there is another transport scheduled for\n             * activation, go into to the connecting state until that transport\n             * activates and sets us back to connected. (manually starting the\n             * transition timers in case that never happens). (If we were in the\n             * synchronizing state, then that's fine, the old transport just got its\n             * disconnected before the new one got the sync -- ignore it and keep\n             * waiting for the sync. If it fails we have a separate sync timer that\n             * will expire). */\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.deactivateTransport()', 'wasActive but another transport is connected and scheduled for activation, so going into the connecting state until it activates');\n            this.startSuspendTimer();\n            this.startTransitionTimer(this.states.connecting);\n            this.notifyState({ state: 'connecting', error: error });\n        }\n    };\n    /* Helper that returns true if there are no transports which are pending,\n     * have been connected, and are just waiting for onceNoPending to fire before\n     * being activated */\n    ConnectionManager.prototype.noTransportsScheduledForActivation = function () {\n        return (Utils.isEmpty(this.pendingTransports) ||\n            this.pendingTransports.every(function (transport) {\n                return !transport.isConnected;\n            }));\n    };\n    ConnectionManager.prototype.setConnection = function (connectionId, connectionDetails, hasConnectionError) {\n        /* if connectionKey changes but connectionId stays the same, then just a\n         * transport change on the same connection. If connectionId changes, we're\n         * on a new connection, with implications for msgSerial and channel state */\n        /* If no previous connectionId, don't reset the msgSerial as it may have\n         * been set by recover data (unless the recover failed) */\n        var prevConnId = this.connectionId, connIdChanged = prevConnId && prevConnId !== connectionId, recoverFailure = !prevConnId && hasConnectionError;\n        if (connIdChanged || recoverFailure) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.setConnection()', 'Resetting msgSerial');\n            this.msgSerial = 0;\n            // RTN19a2: In the event of a new connectionId, previous msgSerials are\n            // meaningless.\n            this.queuedMessages.resetSendAttempted();\n        }\n        if (this.connectionId !== connectionId) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.setConnection()', 'New connectionId; reattaching any attached channels');\n        }\n        this.realtime.connection.id = this.connectionId = connectionId;\n        this.realtime.connection.key = this.connectionKey = connectionDetails.connectionKey;\n    };\n    ConnectionManager.prototype.clearConnection = function () {\n        this.realtime.connection.id = this.connectionId = undefined;\n        this.realtime.connection.key = this.connectionKey = undefined;\n        this.msgSerial = 0;\n        this.unpersistConnection();\n    };\n    ConnectionManager.prototype.createRecoveryKey = function () {\n        // RTN16g2.\n        if (!this.connectionKey) {\n            return null;\n        }\n        return JSON.stringify({\n            connectionKey: this.connectionKey,\n            msgSerial: this.msgSerial,\n            channelSerials: this.realtime.channels.channelSerials(),\n        });\n    };\n    ConnectionManager.prototype.checkConnectionStateFreshness = function () {\n        if (!this.lastActivity || !this.connectionId) {\n            return;\n        }\n        var sinceLast = Utils.now() - this.lastActivity;\n        if (sinceLast > this.connectionStateTtl + this.maxIdleInterval) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.checkConnectionStateFreshness()', 'Last known activity from realtime was ' + sinceLast + 'ms ago; discarding connection state');\n            this.clearConnection();\n            this.states.connecting.failState = 'suspended';\n        }\n    };\n    /**\n     * Called when the connectionmanager wants to persist transport\n     * state for later recovery. Only applicable in the browser context.\n     */\n    ConnectionManager.prototype.persistConnection = function () {\n        if (haveSessionStorage()) {\n            var recoveryKey = this.createRecoveryKey();\n            if (recoveryKey) {\n                setSessionRecoverData({\n                    recoveryKey: recoveryKey,\n                    disconnectedAt: Utils.now(),\n                    location: global.location,\n                    clientId: this.realtime.auth.clientId,\n                });\n            }\n        }\n    };\n    /**\n     * Called when the connectionmanager wants to persist transport\n     * state for later recovery. Only applicable in the browser context.\n     */\n    ConnectionManager.prototype.unpersistConnection = function () {\n        clearSessionRecoverData();\n    };\n    /*********************\n     * state management\n     *********************/\n    ConnectionManager.prototype.getError = function () {\n        return this.errorReason || this.getStateError();\n    };\n    ConnectionManager.prototype.getStateError = function () {\n        var _a, _b;\n        return (_b = (_a = connectionerrors_1.default)[this.state.state]) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    ConnectionManager.prototype.activeState = function () {\n        return this.state.queueEvents || this.state.sendEvents;\n    };\n    ConnectionManager.prototype.enactStateChange = function (stateChange) {\n        var logLevel = stateChange.current === 'failed' ? logger_1.default.LOG_ERROR : logger_1.default.LOG_MAJOR;\n        logger_1.default.logAction(logLevel, 'Connection state', stateChange.current + (stateChange.reason ? '; reason: ' + stateChange.reason : ''));\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.enactStateChange', 'setting new state: ' +\n            stateChange.current +\n            '; reason = ' +\n            (stateChange.reason && stateChange.reason.message));\n        var newState = (this.state = this.states[stateChange.current]);\n        if (stateChange.reason) {\n            this.errorReason = stateChange.reason;\n            this.realtime.connection.errorReason = stateChange.reason;\n        }\n        if (newState.terminal || newState.state === 'suspended') {\n            /* suspended is nonterminal, but once in the suspended state, realtime\n             * will have discarded our connection state, so futher connection\n             * attempts should start from scratch */\n            this.clearConnection();\n        }\n        this.emit('connectionstate', stateChange);\n    };\n    /****************************************\n     * ConnectionManager connection lifecycle\n     ****************************************/\n    ConnectionManager.prototype.startTransitionTimer = function (transitionState) {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.startTransitionTimer()', 'transitionState: ' + transitionState.state);\n        if (this.transitionTimer) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.startTransitionTimer()', 'clearing already-running timer');\n            clearTimeout(this.transitionTimer);\n        }\n        this.transitionTimer = setTimeout(function () {\n            if (_this.transitionTimer) {\n                _this.transitionTimer = null;\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager ' + transitionState.state + ' timer expired', 'requesting new state: ' + transitionState.failState);\n                _this.notifyState({ state: transitionState.failState });\n            }\n        }, transitionState.retryDelay);\n    };\n    ConnectionManager.prototype.cancelTransitionTimer = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.cancelTransitionTimer()', '');\n        if (this.transitionTimer) {\n            clearTimeout(this.transitionTimer);\n            this.transitionTimer = null;\n        }\n    };\n    ConnectionManager.prototype.startSuspendTimer = function () {\n        var _this = this;\n        if (this.suspendTimer)\n            return;\n        this.suspendTimer = setTimeout(function () {\n            if (_this.suspendTimer) {\n                _this.suspendTimer = null;\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager suspend timer expired', 'requesting new state: suspended');\n                _this.states.connecting.failState = 'suspended';\n                _this.notifyState({ state: 'suspended' });\n            }\n        }, this.connectionStateTtl);\n    };\n    ConnectionManager.prototype.checkSuspendTimer = function (state) {\n        if (state !== 'disconnected' && state !== 'suspended' && state !== 'connecting')\n            this.cancelSuspendTimer();\n    };\n    ConnectionManager.prototype.cancelSuspendTimer = function () {\n        this.states.connecting.failState = 'disconnected';\n        if (this.suspendTimer) {\n            clearTimeout(this.suspendTimer);\n            this.suspendTimer = null;\n        }\n    };\n    ConnectionManager.prototype.startRetryTimer = function (interval) {\n        var _this = this;\n        this.retryTimer = setTimeout(function () {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager retry timer expired', 'retrying');\n            _this.retryTimer = null;\n            _this.requestState({ state: 'connecting' });\n        }, interval);\n    };\n    ConnectionManager.prototype.cancelRetryTimer = function () {\n        if (this.retryTimer) {\n            clearTimeout(this.retryTimer);\n            this.retryTimer = null;\n        }\n    };\n    ConnectionManager.prototype.notifyState = function (indicated) {\n        var _this = this;\n        var _a, _b;\n        var state = indicated.state;\n        /* We retry immediately if:\n         * - something disconnects us while we're connected, or\n         * - a viable (but not yet active) transport fails due to a token error (so\n         *   this.errorReason will be set, and startConnect will do a forced\n         *   authorize). If this.errorReason is already set (to a token error),\n         *   then there has been at least one previous attempt to connect that also\n         *   failed for a token error, so by RTN14b we go to DISCONNECTED and wait\n         *   before trying again */\n        var retryImmediately = state === 'disconnected' &&\n            (this.state === this.states.connected ||\n                this.state === this.states.synchronizing ||\n                indicated.retryImmediately ||\n                (this.state === this.states.connecting &&\n                    indicated.error &&\n                    auth_1.default.isTokenErr(indicated.error) &&\n                    !(this.errorReason && auth_1.default.isTokenErr(this.errorReason))));\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.notifyState()', 'new state: ' + state + (retryImmediately ? '; will retry connection immediately' : ''));\n        /* do nothing if we're already in the indicated state */\n        if (state == this.state.state)\n            return;\n        /* kill timers (possibly excepting suspend timer depending on the notified\n         * state), as these are superseded by this notification */\n        this.cancelTransitionTimer();\n        this.cancelRetryTimer();\n        this.checkSuspendTimer(indicated.state);\n        if (state === 'suspended' || state === 'connected') {\n            this.disconnectedRetryCount = 0;\n        }\n        /* do nothing if we're unable to move from the current state */\n        if (this.state.terminal)\n            return;\n        /* process new state */\n        var newState = this.states[indicated.state];\n        var retryDelay = newState.retryDelay;\n        if (newState.state === 'disconnected') {\n            this.disconnectedRetryCount++;\n            retryDelay = Utils.getRetryTime(newState.retryDelay, this.disconnectedRetryCount);\n        }\n        var change = new connectionstatechange_1.default(this.state.state, newState.state, retryDelay, indicated.error || ((_b = (_a = connectionerrors_1.default)[newState.state]) === null || _b === void 0 ? void 0 : _b.call(_a)));\n        if (retryImmediately) {\n            var autoReconnect = function () {\n                if (_this.state === _this.states.disconnected) {\n                    _this.lastAutoReconnectAttempt = Utils.now();\n                    _this.requestState({ state: 'connecting' });\n                }\n            };\n            var sinceLast = this.lastAutoReconnectAttempt && Utils.now() - this.lastAutoReconnectAttempt + 1;\n            if (sinceLast && sinceLast < 1000) {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.notifyState()', 'Last reconnect attempt was only ' +\n                    sinceLast +\n                    'ms ago, waiting another ' +\n                    (1000 - sinceLast) +\n                    'ms before trying again');\n                setTimeout(autoReconnect, 1000 - sinceLast);\n            }\n            else {\n                platform_1.default.Config.nextTick(autoReconnect);\n            }\n        }\n        else if (state === 'disconnected' || state === 'suspended') {\n            this.startRetryTimer(retryDelay);\n        }\n        /* If going into disconnect/suspended (and not retrying immediately), or a\n         * terminal state, ensure there are no orphaned transports hanging around. */\n        if ((state === 'disconnected' && !retryImmediately) || state === 'suspended' || newState.terminal) {\n            /* Wait till the next tick so the connection state change is enacted,\n             * so aborting transports doesn't trigger redundant state changes */\n            platform_1.default.Config.nextTick(function () {\n                _this.disconnectAllTransports();\n            });\n        }\n        if (state == 'connected' && !this.activeProtocol) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.notifyState()', 'Broken invariant: attempted to go into connected state, but there is no active protocol');\n        }\n        /* implement the change and notify */\n        this.enactStateChange(change);\n        if (this.state.sendEvents) {\n            this.sendQueuedMessages();\n        }\n        else if (!this.state.queueEvents) {\n            this.realtime.channels.propogateConnectionInterruption(state, change.reason);\n            this.failQueuedMessages(change.reason); // RTN7c\n        }\n    };\n    ConnectionManager.prototype.requestState = function (request) {\n        var _this = this;\n        var _a, _b;\n        var state = request.state;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.requestState()', 'requested state: ' + state + '; current state: ' + this.state.state);\n        if (state == this.state.state)\n            return; /* silently do nothing */\n        /* kill running timers, as this request supersedes them */\n        this.cancelTransitionTimer();\n        this.cancelRetryTimer();\n        /* for suspend timer check rather than cancel -- eg requesting a connecting\n         * state should not reset the suspend timer */\n        this.checkSuspendTimer(state);\n        if (state == 'connecting' && this.state.state == 'connected')\n            return;\n        if (state == 'closing' && this.state.state == 'closed')\n            return;\n        var newState = this.states[state], change = new connectionstatechange_1.default(this.state.state, newState.state, null, request.error || ((_b = (_a = connectionerrors_1.default)[newState.state]) === null || _b === void 0 ? void 0 : _b.call(_a)));\n        this.enactStateChange(change);\n        if (state == 'connecting') {\n            platform_1.default.Config.nextTick(function () {\n                _this.startConnect();\n            });\n        }\n        if (state == 'closing') {\n            this.closeImpl();\n        }\n    };\n    ConnectionManager.prototype.startConnect = function () {\n        var _this = this;\n        if (this.state !== this.states.connecting) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.startConnect()', 'Must be in connecting state to connect, but was ' + this.state.state);\n            return;\n        }\n        var auth = this.realtime.auth;\n        /* The point of the connectCounter mechanism is to ensure that the\n         * connection procedure can be cancelled. We want disconnectAllTransports\n         * to be able to stop any in-progress connection, even before it gets to\n         * the stage of having a pending (or even a proposed) transport that it can\n         * dispose() of. So we check that it's still current after any async stage,\n         * up until the stage that is synchronous with instantiating a transport */\n        var connectCount = ++this.connectCounter;\n        var connect = function () {\n            _this.checkConnectionStateFreshness();\n            _this.getTransportParams(function (transportParams) {\n                if (transportParams.mode === 'recover' && transportParams.options.recover) {\n                    var recoveryContext = decodeRecoveryKey(transportParams.options.recover);\n                    if (recoveryContext) {\n                        _this.realtime.channels.recoverChannels(recoveryContext.channelSerials);\n                    }\n                }\n                if (connectCount !== _this.connectCounter) {\n                    return;\n                }\n                _this.connectImpl(transportParams, connectCount);\n            });\n        };\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.startConnect()', 'starting connection');\n        this.startSuspendTimer();\n        this.startTransitionTimer(this.states.connecting);\n        if (auth.method === 'basic') {\n            connect();\n        }\n        else {\n            var authCb = function (err) {\n                if (connectCount !== _this.connectCounter) {\n                    return;\n                }\n                if (err) {\n                    _this.actOnErrorFromAuthorize(err);\n                }\n                else {\n                    connect();\n                }\n            };\n            if (this.errorReason && auth_1.default.isTokenErr(this.errorReason)) {\n                /* Force a refetch of a new token */\n                auth._forceNewToken(null, null, authCb);\n            }\n            else {\n                auth._ensureValidAuthCredentials(false, authCb);\n            }\n        }\n    };\n    /**\n     * There are three stages in connecting:\n     * - preference: if there is a cached transport preference, we try to connect\n     *   on that. If that fails or times out we abort the attempt, remove the\n     *   preference and fall back to base. If it succeeds, we try upgrading it if\n     *   needed (will only be in the case where the preference is xhrs and the\n     *   browser supports ws).\n     * - base: we try to connect with the best transport that we think will\n     *   never fail for this browser (usually this is xhr_polling; for very old\n     *   browsers will be jsonp, for node will be comet). If it doesn't work, we\n     *   try fallback hosts.\n     * - upgrade: given a connected transport, we see if there are any better\n     *   ones, and if so, try to upgrade to them.\n     *\n     * connectImpl works out what stage you're at (which is purely a function of\n     * the current connection state and whether there are any stored preferences),\n     * and dispatches accordingly. After a transport has been set pending,\n     * tryATransport calls connectImpl to see if there's another stage to be done.\n     * */\n    ConnectionManager.prototype.connectImpl = function (transportParams, connectCount) {\n        var state = this.state.state;\n        if (state !== this.states.connecting.state && state !== this.states.connected.state) {\n            /* Only keep trying as long as in the 'connecting' state (or 'connected'\n             * for upgrading). Any operation can put us into 'disconnected' to cancel\n             * connection attempts and wait before retrying, or 'failed' to fail. */\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.connectImpl()', 'Must be in connecting state to connect (or connected to upgrade), but was ' + state);\n        }\n        else if (this.pendingTransports.length) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.connectImpl()', 'Transports ' + this.pendingTransports[0].toString() + ' currently pending; taking no action');\n        }\n        else if (state == this.states.connected.state) {\n            this.upgradeIfNeeded(transportParams);\n        }\n        else if (this.transports.length > 1 && this.getTransportPreference()) {\n            this.connectPreference(transportParams, connectCount);\n        }\n        else {\n            this.connectBase(transportParams, connectCount);\n        }\n    };\n    ConnectionManager.prototype.connectPreference = function (transportParams, connectCount) {\n        var _this = this;\n        var preference = this.getTransportPreference();\n        var preferenceTimeoutExpired = false;\n        if (!Utils.arrIn(this.transports, preference)) {\n            this.unpersistTransportPreference();\n            this.connectImpl(transportParams, connectCount);\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.connectPreference()', 'Trying to connect with stored transport preference ' + preference);\n        var preferenceTimeout = setTimeout(function () {\n            preferenceTimeoutExpired = true;\n            if (!(_this.state.state === _this.states.connected.state)) {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.connectPreference()', 'Shortcircuit connection attempt with ' + preference + ' failed; clearing preference and trying from scratch');\n                /* Abort all connection attempts. (This also disconnects the active\n                 * protocol, but none exists if we're not in the connected state) */\n                _this.disconnectAllTransports();\n                /* Be quite agressive about clearing the stored preference if ever it doesn't work */\n                _this.unpersistTransportPreference();\n            }\n            _this.connectImpl(transportParams, connectCount);\n        }, this.options.timeouts.preferenceConnectTimeout);\n        /* For connectPreference, just use the main host. If host fallback is needed, do it in connectBase.\n         * The wstransport it will substitute the httphost for an appropriate wshost */\n        transportParams.host = this.httpHosts[0];\n        this.tryATransport(transportParams, preference, function (fatal, transport) {\n            clearTimeout(preferenceTimeout);\n            if (preferenceTimeoutExpired && transport) {\n                /* Viable, but too late - connectImpl() will already be trying\n                 * connectBase, and we weren't in upgrade mode. Just remove the\n                 * onconnected listener and get rid of it */\n                transport.off();\n                transport.disconnect();\n                Utils.arrDeleteValue(_this.pendingTransports, transport);\n            }\n            else if (!transport && !fatal) {\n                /* Preference failed in a transport-specific way. Try more */\n                _this.unpersistTransportPreference();\n                _this.connectImpl(transportParams, connectCount);\n            }\n            /* If suceeded, or failed fatally, nothing to do */\n        });\n    };\n    /**\n     * Try to establish a transport on the base transport (the best transport\n     * such that if it doesn't work, nothing will work) as determined through\n     * static feature detection, checking for network connectivity and trying\n     * fallback hosts if applicable.\n     * @param transportParams\n     */\n    ConnectionManager.prototype.connectBase = function (transportParams, connectCount) {\n        var _this = this;\n        var giveUp = function (err) {\n            _this.notifyState({ state: _this.states.connecting.failState, error: err });\n        };\n        var candidateHosts = this.httpHosts.slice();\n        var hostAttemptCb = function (fatal, transport) {\n            if (connectCount !== _this.connectCounter) {\n                return;\n            }\n            if (!transport && !fatal) {\n                tryFallbackHosts();\n            }\n        };\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.connectBase()', 'Trying to connect with base transport ' + this.baseTransport);\n        /* first try to establish a connection with the priority host with http transport */\n        var host = candidateHosts.shift();\n        if (!host) {\n            giveUp(new errorinfo_1.default('Unable to connect (no available host)', 80003, 404));\n            return;\n        }\n        transportParams.host = host;\n        /* this is what we'll be doing if the attempt for the main host fails */\n        var tryFallbackHosts = function () {\n            /* if there aren't any fallback hosts, fail */\n            if (!candidateHosts.length) {\n                giveUp(new errorinfo_1.default('Unable to connect (and no more fallback hosts to try)', 80003, 404));\n                return;\n            }\n            /* before trying any fallback (or any remaining fallback) we decide if\n             * there is a problem with the ably host, or there is a general connectivity\n             * problem */\n            if (!_this.realtime.http.checkConnectivity) {\n                giveUp(new errorinfo_1.PartialErrorInfo('Internal error: Http.checkConnectivity not set', null, 500));\n                return;\n            }\n            _this.realtime.http.checkConnectivity(function (err, connectivity) {\n                if (connectCount !== _this.connectCounter) {\n                    return;\n                }\n                /* we know err won't happen but handle it here anyway */\n                if (err) {\n                    giveUp(err);\n                    return;\n                }\n                if (!connectivity) {\n                    /* the internet isn't reachable, so don't try the fallback hosts */\n                    giveUp(new errorinfo_1.default('Unable to connect (network unreachable)', 80003, 404));\n                    return;\n                }\n                /* the network is there, so there's a problem with the main host, or\n                 * its dns. Try the fallback hosts. We could try them simultaneously but\n                 * that would potentially cause a huge spike in load on the load balancer */\n                transportParams.host = Utils.arrPopRandomElement(candidateHosts);\n                _this.tryATransport(transportParams, _this.baseTransport, hostAttemptCb);\n            });\n        };\n        if (this.forceFallbackHost && candidateHosts.length) {\n            this.forceFallbackHost = false;\n            tryFallbackHosts();\n            return;\n        }\n        this.tryATransport(transportParams, this.baseTransport, hostAttemptCb);\n    };\n    ConnectionManager.prototype.getUpgradePossibilities = function () {\n        /* returns the subset of upgradeTransports to the right of the current\n         * transport in upgradeTransports (if it's in there - if not, currentSerial\n         * will be -1, so return upgradeTransports.slice(0) == upgradeTransports */\n        var current = this.activeProtocol.getTransport().shortName;\n        var currentSerial = Utils.arrIndexOf(this.upgradeTransports, current);\n        return this.upgradeTransports.slice(currentSerial + 1);\n    };\n    ConnectionManager.prototype.upgradeIfNeeded = function (transportParams) {\n        var _this = this;\n        var upgradePossibilities = this.getUpgradePossibilities();\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.upgradeIfNeeded()', 'upgrade possibilities: ' + platform_1.default.Config.inspect(upgradePossibilities));\n        if (!upgradePossibilities.length) {\n            return;\n        }\n        Utils.arrForEach(upgradePossibilities, function (upgradeTransport) {\n            /* Note: the transport may mutate the params, so give each transport a fresh one */\n            var upgradeTransportParams = _this.createTransportParams(transportParams.host, 'upgrade');\n            _this.tryATransport(upgradeTransportParams, upgradeTransport, noop);\n        });\n    };\n    ConnectionManager.prototype.closeImpl = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.closeImpl()', 'closing connection');\n        this.cancelSuspendTimer();\n        this.startTransitionTimer(this.states.closing);\n        Utils.safeArrForEach(this.pendingTransports, function (transport) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.closeImpl()', 'Closing pending transport: ' + transport);\n            if (transport)\n                transport.close();\n        });\n        Utils.safeArrForEach(this.proposedTransports, function (transport) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.closeImpl()', 'Disposing of proposed transport: ' + transport);\n            if (transport)\n                transport.dispose();\n        });\n        if (this.activeProtocol) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.closeImpl()', 'Closing active transport: ' + this.activeProtocol.getTransport());\n            this.activeProtocol.getTransport().close();\n        }\n        /* If there was an active transport, this will probably be\n         * preempted by the notifyState call in deactivateTransport */\n        this.notifyState({ state: 'closed' });\n    };\n    ConnectionManager.prototype.onAuthUpdated = function (tokenDetails, callback) {\n        var _this = this;\n        var _a;\n        switch (this.state.state) {\n            case 'connected': {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.onAuthUpdated()', 'Sending AUTH message on active transport');\n                /* If there are any proposed/pending transports (eg an upgrade that\n                 * isn't yet scheduled for activation) that hasn't yet started syncing,\n                 * just to get rid of them & restart the upgrade with the new token, to\n                 * avoid a race condition. (If it has started syncing, the AUTH will be\n                 * queued until the upgrade is complete, so everything's fine) */\n                if ((this.pendingTransports.length || this.proposedTransports.length) &&\n                    this.state !== this.states.synchronizing) {\n                    this.disconnectAllTransports(/* exceptActive: */ true);\n                    var transportParams_1 = this.activeProtocol.getTransport().params;\n                    platform_1.default.Config.nextTick(function () {\n                        if (_this.state.state === 'connected') {\n                            _this.upgradeIfNeeded(transportParams_1);\n                        }\n                    });\n                }\n                /* Do any transport-specific new-token action */\n                var activeTransport = (_a = this.activeProtocol) === null || _a === void 0 ? void 0 : _a.getTransport();\n                if (activeTransport && activeTransport.onAuthUpdated) {\n                    activeTransport.onAuthUpdated(tokenDetails);\n                }\n                var authMsg = protocolmessage_1.default.fromValues({\n                    action: actions.AUTH,\n                    auth: {\n                        accessToken: tokenDetails.token,\n                    },\n                });\n                this.send(authMsg);\n                /* The answer will come back as either a connectiondetails event\n                 * (realtime sends a CONNECTED to acknowledge the reauth) or a\n                 * statechange to failed */\n                var successListener_1 = function () {\n                    _this.off(failureListener_1);\n                    callback(null, tokenDetails);\n                };\n                var failureListener_1 = function (stateChange) {\n                    if (stateChange.current === 'failed') {\n                        _this.off(successListener_1);\n                        _this.off(failureListener_1);\n                        callback(stateChange.reason || _this.getStateError());\n                    }\n                };\n                this.once('connectiondetails', successListener_1);\n                this.on('connectionstate', failureListener_1);\n                break;\n            }\n            case 'connecting':\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.onAuthUpdated()', 'Aborting current connection attempts in order to start again with the new auth details');\n                this.disconnectAllTransports();\n            /* fallthrough to add statechange listener */\n            default: {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.onAuthUpdated()', 'Connection state is ' + this.state.state + '; waiting until either connected or failed');\n                var listener_1 = function (stateChange) {\n                    switch (stateChange.current) {\n                        case 'connected':\n                            _this.off(listener_1);\n                            callback(null, tokenDetails);\n                            break;\n                        case 'failed':\n                        case 'closed':\n                        case 'suspended':\n                            _this.off(listener_1);\n                            callback(stateChange.reason || _this.getStateError());\n                            break;\n                        default:\n                            /* ignore till we get either connected or failed */\n                            break;\n                    }\n                };\n                this.on('connectionstate', listener_1);\n                if (this.state.state === 'connecting') {\n                    /* can happen if in the connecting state but no transport was pending\n                     * yet, so disconnectAllTransports did not trigger a disconnected state */\n                    this.startConnect();\n                }\n                else {\n                    this.requestState({ state: 'connecting' });\n                }\n            }\n        }\n    };\n    ConnectionManager.prototype.disconnectAllTransports = function (exceptActive) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.disconnectAllTransports()', 'Disconnecting all transports' + (exceptActive ? ' except the active transport' : ''));\n        /* This will prevent any connection procedure in an async part of one of its early stages from continuing */\n        this.connectCounter++;\n        Utils.safeArrForEach(this.pendingTransports, function (transport) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.disconnectAllTransports()', 'Disconnecting pending transport: ' + transport);\n            if (transport)\n                transport.disconnect();\n        });\n        this.pendingTransports = [];\n        Utils.safeArrForEach(this.proposedTransports, function (transport) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.disconnectAllTransports()', 'Disposing of proposed transport: ' + transport);\n            if (transport)\n                transport.dispose();\n        });\n        this.proposedTransports = [];\n        if (this.activeProtocol && !exceptActive) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.disconnectAllTransports()', 'Disconnecting active transport: ' + this.activeProtocol.getTransport());\n            this.activeProtocol.getTransport().disconnect();\n        }\n        /* No need to notify state disconnected; disconnecting the active transport\n         * will have that effect */\n    };\n    /******************\n     * event queueing\n     ******************/\n    ConnectionManager.prototype.send = function (msg, queueEvent, callback) {\n        callback = callback || noop;\n        var state = this.state;\n        if (state.sendEvents) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.send()', 'sending event');\n            this.sendImpl(new protocol_1.PendingMessage(msg, callback));\n            return;\n        }\n        var shouldQueue = (queueEvent && state.queueEvents) || state.forceQueueEvents;\n        if (!shouldQueue) {\n            var err = 'rejecting event, queueEvent was ' + queueEvent + ', state was ' + state.state;\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.send()', err);\n            callback(this.errorReason || new errorinfo_1.default(err, 90000, 400));\n            return;\n        }\n        if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.send()', 'queueing msg; ' + protocolmessage_1.default.stringify(msg));\n        }\n        this.queue(msg, callback);\n    };\n    ConnectionManager.prototype.sendImpl = function (pendingMessage) {\n        var msg = pendingMessage.message;\n        /* If have already attempted to send this, resend with the same msgSerial,\n         * so Ably can dedup if the previous send succeeded */\n        if (pendingMessage.ackRequired && !pendingMessage.sendAttempted) {\n            msg.msgSerial = this.msgSerial++;\n        }\n        try {\n            this.activeProtocol.send(pendingMessage);\n        }\n        catch (e) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.sendImpl()', 'Unexpected exception in transport.send(): ' + e.stack);\n        }\n    };\n    ConnectionManager.prototype.queue = function (msg, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.queue()', 'queueing event');\n        var lastQueued = this.queuedMessages.last();\n        var maxSize = this.options.maxMessageSize;\n        /* If have already attempted to send a message, don't merge more messages\n         * into it, as if the previous send actually succeeded and realtime ignores\n         * the dup, they'll be lost */\n        if (lastQueued && !lastQueued.sendAttempted && bundleWith(lastQueued.message, msg, maxSize)) {\n            if (!lastQueued.merged) {\n                lastQueued.callback = multicaster_1.default.create([lastQueued.callback]);\n                lastQueued.merged = true;\n            }\n            lastQueued.callback.push(callback);\n        }\n        else {\n            this.queuedMessages.push(new protocol_1.PendingMessage(msg, callback));\n        }\n    };\n    ConnectionManager.prototype.sendQueuedMessages = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.sendQueuedMessages()', 'sending ' + this.queuedMessages.count() + ' queued messages');\n        var pendingMessage;\n        while ((pendingMessage = this.queuedMessages.shift()))\n            this.sendImpl(pendingMessage);\n    };\n    ConnectionManager.prototype.queuePendingMessages = function (pendingMessages) {\n        if (pendingMessages && pendingMessages.length) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.queuePendingMessages()', 'queueing ' + pendingMessages.length + ' pending messages');\n            this.queuedMessages.prepend(pendingMessages);\n        }\n    };\n    ConnectionManager.prototype.failQueuedMessages = function (err) {\n        var numQueued = this.queuedMessages.count();\n        if (numQueued > 0) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.failQueuedMessages()', 'failing ' + numQueued + ' queued messages, err = ' + Utils.inspectError(err));\n            this.queuedMessages.completeAllMessages(err);\n        }\n    };\n    ConnectionManager.prototype.onChannelMessage = function (message, transport) {\n        var onActiveTransport = this.activeProtocol && transport === this.activeProtocol.getTransport(), onUpgradeTransport = Utils.arrIn(this.pendingTransports, transport) && this.state == this.states.synchronizing;\n        /* As the lib now has a period where the upgrade transport is synced but\n         * before it's become active (while waiting for the old one to become\n         * idle), message can validly arrive on it even though it isn't active */\n        if (onActiveTransport || onUpgradeTransport) {\n            this.realtime.channels.onChannelMessage(message);\n        }\n        else {\n            // Message came in on a defunct transport. Allow only acks, nacks, & errors for outstanding\n            // messages,  no new messages (as sync has been sent on new transport so new messages will\n            // be resent there, or connection has been closed so don't want new messages)\n            if (Utils.arrIndexOf([actions.ACK, actions.NACK, actions.ERROR], message.action) > -1) {\n                this.realtime.channels.onChannelMessage(message);\n            }\n            else {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'ConnectionManager.onChannelMessage()', 'received message ' + JSON.stringify(message) + 'on defunct transport; discarding');\n            }\n        }\n    };\n    ConnectionManager.prototype.ping = function (transport, callback) {\n        var _this = this;\n        /* if transport is specified, try that */\n        if (transport) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.ping()', 'transport = ' + transport);\n            var onTimeout = function () {\n                transport.off('heartbeat', onHeartbeat_1);\n                callback(new errorinfo_1.default('Timeout waiting for heartbeat response', 50000, 500));\n            };\n            var pingStart_1 = Utils.now(), id_1 = Utils.cheapRandStr();\n            var onHeartbeat_1 = function (responseId) {\n                if (responseId === id_1) {\n                    transport.off('heartbeat', onHeartbeat_1);\n                    clearTimeout(timer_1);\n                    var responseTime = Utils.now() - pingStart_1;\n                    callback(null, responseTime);\n                }\n            };\n            var timer_1 = setTimeout(onTimeout, this.options.timeouts.realtimeRequestTimeout);\n            transport.on('heartbeat', onHeartbeat_1);\n            transport.ping(id_1);\n            return;\n        }\n        /* if we're not connected, don't attempt */\n        if (this.state.state !== 'connected') {\n            callback(new errorinfo_1.default('Unable to ping service; not connected', 40000, 400));\n            return;\n        }\n        /* no transport was specified, so use the current (connected) one\n         * but ensure that we retry if the transport is superseded before we complete */\n        var completed = false;\n        var onPingComplete = function (err, responseTime) {\n            _this.off('transport.active', onTransportActive);\n            if (!completed) {\n                completed = true;\n                callback(err, responseTime);\n            }\n        };\n        var onTransportActive = function () {\n            if (!completed) {\n                /* ensure that no callback happens for the currently outstanding operation */\n                completed = true;\n                /* repeat but picking up the new transport */\n                platform_1.default.Config.nextTick(function () {\n                    _this.ping(null, callback);\n                });\n            }\n        };\n        this.on('transport.active', onTransportActive);\n        this.ping(this.activeProtocol.getTransport(), onPingComplete);\n    };\n    ConnectionManager.prototype.abort = function (error) {\n        this.activeProtocol.getTransport().fail(error);\n    };\n    ConnectionManager.prototype.registerProposedTransport = function (transport) {\n        this.proposedTransports.push(transport);\n    };\n    ConnectionManager.prototype.getTransportPreference = function () {\n        var _a, _b;\n        return this.transportPreference || (haveWebStorage() && ((_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.get) === null || _b === void 0 ? void 0 : _b.call(_a, transportPreferenceName)));\n    };\n    ConnectionManager.prototype.persistTransportPreference = function (transport) {\n        var _a, _b;\n        if (Utils.arrIn(defaults_1.default.upgradeTransports, transport.shortName)) {\n            this.transportPreference = transport.shortName;\n            if (haveWebStorage()) {\n                (_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.set) === null || _b === void 0 ? void 0 : _b.call(_a, transportPreferenceName, transport.shortName);\n            }\n        }\n    };\n    ConnectionManager.prototype.unpersistTransportPreference = function () {\n        var _a, _b;\n        this.transportPreference = null;\n        if (haveWebStorage()) {\n            (_b = (_a = platform_1.default.WebStorage) === null || _a === void 0 ? void 0 : _a.remove) === null || _b === void 0 ? void 0 : _b.call(_a, transportPreferenceName);\n        }\n    };\n    /* This method is only used during connection attempts, so implements RSA4c1, RSA4c2,\n     * and RSA4d. It is generally not invoked for serverside-triggered reauths or manual\n     * reauths, so RSA4c3 does not apply, except (per per RSA4d1) in the case that the auth\n     * server returns 403. */\n    ConnectionManager.prototype.actOnErrorFromAuthorize = function (err) {\n        if (err.code === 40171) {\n            /* No way to reauth */\n            this.notifyState({ state: 'failed', error: err });\n        }\n        else if (err.code === 40102) {\n            this.notifyState({ state: 'failed', error: err });\n        }\n        else if (err.statusCode === HttpStatusCodes_1.default.Forbidden) {\n            var msg = 'Client configured authentication provider returned 403; failing the connection';\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.actOnErrorFromAuthorize()', msg);\n            this.notifyState({ state: 'failed', error: new errorinfo_1.default(msg, 80019, 403, err) });\n        }\n        else {\n            var msg = 'Client configured authentication provider request failed';\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'ConnectionManager.actOnErrorFromAuthorize', msg);\n            this.notifyState({ state: this.state.failState, error: new errorinfo_1.default(msg, 80019, 401, err) });\n        }\n    };\n    ConnectionManager.prototype.onConnectionDetailsUpdate = function (connectionDetails, transport) {\n        if (!connectionDetails) {\n            return;\n        }\n        this.connectionDetails = connectionDetails;\n        if (connectionDetails.maxMessageSize) {\n            this.options.maxMessageSize = connectionDetails.maxMessageSize;\n        }\n        var clientId = connectionDetails.clientId;\n        if (clientId) {\n            var err = this.realtime.auth._uncheckedSetClientId(clientId);\n            if (err) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'ConnectionManager.onConnectionDetailsUpdate()', err.message);\n                /* Errors setting the clientId are fatal to the connection */\n                transport.fail(err);\n                return;\n            }\n        }\n        var connectionStateTtl = connectionDetails.connectionStateTtl;\n        if (connectionStateTtl) {\n            this.connectionStateTtl = connectionStateTtl;\n        }\n        this.maxIdleInterval = connectionDetails.maxIdleInterval;\n        this.emit('connectiondetails', connectionDetails);\n    };\n    /*********************\n     * transport management\n     *********************/\n    ConnectionManager.supportedTransports = {};\n    return ConnectionManager;\n}(eventemitter_1.default));\nexports.default = ConnectionManager;\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_301348__(13)))\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __nested_webpack_require_391616__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_391616__(0);\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_391616__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_391616__(2));\nvar MessageQueue = /** @class */ (function (_super) {\n    tslib_1.__extends(MessageQueue, _super);\n    function MessageQueue() {\n        var _this = _super.call(this) || this;\n        _this.messages = [];\n        return _this;\n    }\n    MessageQueue.prototype.count = function () {\n        return this.messages.length;\n    };\n    MessageQueue.prototype.push = function (message) {\n        this.messages.push(message);\n    };\n    MessageQueue.prototype.shift = function () {\n        return this.messages.shift();\n    };\n    MessageQueue.prototype.last = function () {\n        return this.messages[this.messages.length - 1];\n    };\n    MessageQueue.prototype.copyAll = function () {\n        return this.messages.slice();\n    };\n    MessageQueue.prototype.append = function (messages) {\n        this.messages.push.apply(this.messages, messages);\n    };\n    MessageQueue.prototype.prepend = function (messages) {\n        this.messages.unshift.apply(this.messages, messages);\n    };\n    MessageQueue.prototype.completeMessages = function (serial, count, err) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'MessageQueue.completeMessages()', 'serial = ' + serial + '; count = ' + count);\n        err = err || null;\n        var messages = this.messages;\n        if (messages.length === 0) {\n            throw new Error('MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue');\n        }\n        var first = messages[0];\n        if (first) {\n            var startSerial = first.message.msgSerial;\n            var endSerial = serial + count; /* the serial of the first message that is *not* the subject of this call */\n            if (endSerial > startSerial) {\n                var completeMessages = messages.splice(0, endSerial - startSerial);\n                for (var _i = 0, completeMessages_1 = completeMessages; _i < completeMessages_1.length; _i++) {\n                    var message = completeMessages_1[_i];\n                    message.callback(err);\n                }\n            }\n            if (messages.length == 0)\n                this.emit('idle');\n        }\n    };\n    MessageQueue.prototype.completeAllMessages = function (err) {\n        this.completeMessages(0, Number.MAX_SAFE_INTEGER || Number.MAX_VALUE, err);\n    };\n    MessageQueue.prototype.resetSendAttempted = function () {\n        for (var _i = 0, _a = this.messages; _i < _a.length; _i++) {\n            var msg = _a[_i];\n            msg.sendAttempted = false;\n        }\n    };\n    MessageQueue.prototype.clear = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'MessageQueue.clear()', 'clearing ' + this.messages.length + ' messages');\n        this.messages = [];\n        this.emit('idle');\n    };\n    return MessageQueue;\n}(eventemitter_1.default));\nexports.default = MessageQueue;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ConnectionStateChange = /** @class */ (function () {\n    function ConnectionStateChange(previous, current, retryIn, reason) {\n        this.previous = previous;\n        this.current = current;\n        if (retryIn)\n            this.retryIn = retryIn;\n        if (reason)\n            this.reason = reason;\n    }\n    return ConnectionStateChange;\n}());\nexports.default = ConnectionStateChange;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __nested_webpack_require_395321__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_395321__(0);\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(10));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(7));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_395321__(1));\nvar channel_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(33));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(2));\nvar realtimepresence_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(54));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(9));\nvar channelstatechange_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(39));\nvar errorinfo_1 = tslib_1.__importStar(__nested_webpack_require_395321__(4));\nvar presencemessage_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(15));\nvar connectionerrors_1 = tslib_1.__importDefault(__nested_webpack_require_395321__(20));\nvar actions = protocolmessage_1.default.Action;\nvar noop = function () { };\nfunction validateChannelOptions(options) {\n    if (options && 'params' in options && !Utils.isObject(options.params)) {\n        return new errorinfo_1.default('options.params must be an object', 40000, 400);\n    }\n    if (options && 'modes' in options) {\n        if (!Utils.isArray(options.modes)) {\n            return new errorinfo_1.default('options.modes must be an array', 40000, 400);\n        }\n        for (var i = 0; i < options.modes.length; i++) {\n            var currentMode = options.modes[i];\n            if (!currentMode ||\n                typeof currentMode !== 'string' ||\n                !Utils.arrIn(protocolmessage_1.default.channelModes, String.prototype.toUpperCase.call(currentMode))) {\n                return new errorinfo_1.default('Invalid channel mode: ' + currentMode, 40000, 400);\n            }\n        }\n    }\n}\nvar RealtimeChannel = /** @class */ (function (_super) {\n    tslib_1.__extends(RealtimeChannel, _super);\n    function RealtimeChannel(realtime, name, options) {\n        var _this = _super.call(this, realtime, name, options) || this;\n        _this.retryCount = 0;\n        _this.history = function (params, callback) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.history()', 'channel = ' + this.name);\n            /* params and callback are optional; see if params contains the callback */\n            if (callback === undefined) {\n                if (typeof params == 'function') {\n                    callback = params;\n                    params = null;\n                }\n                else {\n                    if (this.rest.options.promises) {\n                        return Utils.promisify(this, 'history', arguments);\n                    }\n                    callback = noop;\n                }\n            }\n            if (params && params.untilAttach) {\n                if (this.state !== 'attached') {\n                    callback(new errorinfo_1.default('option untilAttach requires the channel to be attached', 40000, 400));\n                    return;\n                }\n                if (!this.properties.attachSerial) {\n                    callback(new errorinfo_1.default('untilAttach was specified and channel is attached, but attachSerial is not defined', 40000, 400));\n                    return;\n                }\n                delete params.untilAttach;\n                params.from_serial = this.properties.attachSerial;\n            }\n            channel_1.default.prototype._history.call(this, params, callback);\n        };\n        _this.whenState = (function (state, listener) {\n            return eventemitter_1.default.prototype.whenState.call(_this, state, _this.state, listener);\n        });\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel()', 'started; name = ' + name);\n        _this.realtime = realtime;\n        _this.presence = new realtimepresence_1.default(_this);\n        _this.connectionManager = realtime.connection.connectionManager;\n        _this.state = 'initialized';\n        _this.subscriptions = new eventemitter_1.default();\n        _this.syncChannelSerial = undefined;\n        _this.properties = {\n            attachSerial: undefined,\n            channelSerial: undefined,\n        };\n        _this.setOptions(options);\n        _this.errorReason = null;\n        _this._requestedFlags = null;\n        _this._mode = null;\n        _this._attachResume = false;\n        _this._decodingContext = {\n            channelOptions: _this.channelOptions,\n            plugins: realtime.options.plugins || {},\n            baseEncodedPreviousPayload: undefined,\n        };\n        _this._lastPayload = {\n            messageId: null,\n            protocolMessageChannelSerial: null,\n            decodeFailureRecoveryInProgress: null,\n        };\n        /* Only differences between this and the public event emitter is that this emits an\n         * update event for all ATTACHEDs, whether resumed or not */\n        _this._allChannelChanges = new eventemitter_1.default();\n        return _this;\n    }\n    RealtimeChannel.prototype.invalidStateError = function () {\n        return new errorinfo_1.default('Channel operation failed as channel state is ' + this.state, 90001, 400, this.errorReason || undefined);\n    };\n    RealtimeChannel.processListenerArgs = function (args) {\n        /* [event], listener, [callback] */\n        args = Array.prototype.slice.call(args);\n        if (typeof args[0] === 'function') {\n            args.unshift(null);\n        }\n        if (args[args.length - 1] == undefined) {\n            args.pop();\n        }\n        return args;\n    };\n    RealtimeChannel.prototype.setOptions = function (options, callback) {\n        var previousChannelOptions = this.channelOptions;\n        if (!callback) {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'setOptions', arguments);\n            }\n        }\n        var _callback = callback ||\n            function (err) {\n                if (err) {\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel.setOptions()', 'Set options failed: ' + err.toString());\n                }\n            };\n        var err = validateChannelOptions(options);\n        if (err) {\n            _callback(err);\n            return;\n        }\n        channel_1.default.prototype.setOptions.call(this, options);\n        if (this._decodingContext)\n            this._decodingContext.channelOptions = this.channelOptions;\n        if (this._shouldReattachToSetOptions(options, previousChannelOptions)) {\n            /* This does not just do _attach(true, null, callback) because that would put us\n             * into the 'attaching' state until we receive the new attached, which is\n             * conceptually incorrect: we are still attached, we just have a pending request to\n             * change some channel params. Per RTL17 going into the attaching state would mean\n             * rejecting messages until we have confirmation that the options have changed,\n             * which would unnecessarily lose message continuity. */\n            this.attachImpl();\n            // Ignore 'attaching' -- could be just due to to a resume & reattach, should not\n            // call back setOptions until we're definitely attached with the new options (or\n            // else in a terminal state)\n            this._allChannelChanges.once(['attached', 'update', 'detached', 'failed'], function (stateChange) {\n                switch (this.event) {\n                    case 'update':\n                    case 'attached':\n                        _callback === null || _callback === void 0 ? void 0 : _callback(null);\n                        return;\n                    default:\n                        _callback === null || _callback === void 0 ? void 0 : _callback(stateChange.reason);\n                        return;\n                }\n            });\n        }\n        else {\n            _callback();\n        }\n    };\n    RealtimeChannel.prototype._shouldReattachToSetOptions = function (options, prevOptions) {\n        if (!(this.state === 'attached' || this.state === 'attaching')) {\n            return false;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params) {\n            // Don't check against the `agent` param - it isn't returned in the ATTACHED message\n            var requestedParams = omitAgent(options.params);\n            var existingParams = omitAgent(prevOptions.params);\n            if (Object.keys(requestedParams).length !== Object.keys(existingParams).length) {\n                return true;\n            }\n            if (!Utils.shallowEquals(existingParams, requestedParams)) {\n                return true;\n            }\n        }\n        if (options === null || options === void 0 ? void 0 : options.modes) {\n            if (!prevOptions.modes || !Utils.arrEquals(options.modes, prevOptions.modes)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    RealtimeChannel.prototype.publish = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var messages = args[0];\n        var argCount = args.length;\n        var callback = args[argCount - 1];\n        if (typeof callback !== 'function') {\n            if (this.realtime.options.promises) {\n                return Utils.promisify(this, 'publish', arguments);\n            }\n            callback = noop;\n            ++argCount;\n        }\n        if (!this.connectionManager.activeState()) {\n            callback(this.connectionManager.getError());\n            return;\n        }\n        if (argCount == 2) {\n            if (Utils.isObject(messages))\n                messages = [message_1.default.fromValues(messages)];\n            else if (Utils.isArray(messages))\n                messages = message_1.default.fromValuesArray(messages);\n            else\n                throw new errorinfo_1.default('The single-argument form of publish() expects a message object or an array of message objects', 40013, 400);\n        }\n        else {\n            messages = [message_1.default.fromValues({ name: args[0], data: args[1] })];\n        }\n        var maxMessageSize = this.realtime.options.maxMessageSize;\n        message_1.default.encodeArray(messages, this.channelOptions, function (err) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            /* RSL1i */\n            var size = message_1.default.getMessagesSize(messages);\n            if (size > maxMessageSize) {\n                callback(new errorinfo_1.default('Maximum size of messages that can be published at once exceeded ( was ' +\n                    size +\n                    ' bytes; limit is ' +\n                    maxMessageSize +\n                    ' bytes)', 40009, 400));\n                return;\n            }\n            _this.__publish(messages, callback);\n        });\n    };\n    // Double underscore used to prevent type conflict with underlying Channel._publish method\n    RealtimeChannel.prototype.__publish = function (messages, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.publish()', 'message count = ' + messages.length);\n        var state = this.state;\n        switch (state) {\n            case 'failed':\n            case 'suspended':\n                callback(errorinfo_1.default.fromValues(this.invalidStateError()));\n                break;\n            default: {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.publish()', 'sending message; channel state is ' + state);\n                var msg = new protocolmessage_1.default();\n                msg.action = actions.MESSAGE;\n                msg.channel = this.name;\n                msg.messages = messages;\n                this.sendMessage(msg, callback);\n                break;\n            }\n        }\n    };\n    RealtimeChannel.prototype.onEvent = function (messages) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.onEvent()', 'received message');\n        var subscriptions = this.subscriptions;\n        for (var i = 0; i < messages.length; i++) {\n            var message = messages[i];\n            subscriptions.emit(message.name, message);\n        }\n    };\n    RealtimeChannel.prototype.attach = function (flags, callback) {\n        var _flags;\n        if (typeof flags === 'function') {\n            callback = flags;\n            _flags = null;\n        }\n        else {\n            _flags = flags;\n        }\n        if (!callback) {\n            if (this.realtime.options.promises) {\n                return Utils.promisify(this, 'attach', arguments);\n            }\n            callback = function (err) {\n                if (err) {\n                    logger_1.default.logAction(logger_1.default.LOG_MAJOR, 'RealtimeChannel.attach()', 'Channel attach failed: ' + err.toString());\n                }\n            };\n        }\n        if (_flags) {\n            logger_1.default.deprecated('channel.attach() with flags', 'channel.setOptions() with channelOptions.params');\n            /* If flags requested, always do a re-attach. TODO only do this if\n             * current mode differs from requested mode */\n            this._requestedFlags = _flags;\n        }\n        else if (this.state === 'attached') {\n            callback(null, null);\n            return;\n        }\n        this._attach(false, null, callback);\n    };\n    RealtimeChannel.prototype._attach = function (forceReattach, attachReason, callback) {\n        if (!callback) {\n            callback = function (err) {\n                if (err) {\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel._attach()', 'Channel attach failed: ' + err.toString());\n                }\n            };\n        }\n        var connectionManager = this.connectionManager;\n        if (!connectionManager.activeState()) {\n            callback(connectionManager.getError());\n            return;\n        }\n        if (this.state !== 'attaching' || forceReattach) {\n            this.requestState('attaching', attachReason);\n        }\n        this.once(function (stateChange) {\n            switch (this.event) {\n                case 'attached':\n                    callback === null || callback === void 0 ? void 0 : callback(null, stateChange);\n                    break;\n                case 'detached':\n                case 'suspended':\n                case 'failed':\n                    callback === null || callback === void 0 ? void 0 : callback(stateChange.reason ||\n                        connectionManager.getError() ||\n                        new errorinfo_1.default('Unable to attach; reason unknown; state = ' + this.event, 90000, 500));\n                    break;\n                case 'detaching':\n                    callback === null || callback === void 0 ? void 0 : callback(new errorinfo_1.default('Attach request superseded by a subsequent detach request', 90000, 409));\n                    break;\n            }\n        });\n    };\n    RealtimeChannel.prototype.attachImpl = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.attachImpl()', 'sending ATTACH message');\n        var attachMsg = protocolmessage_1.default.fromValues({\n            action: actions.ATTACH,\n            channel: this.name,\n            params: this.channelOptions.params,\n            // RTL4c1: Includes the channel serial to resume from a previous message\n            // or attachment.\n            channelSerial: this.properties.channelSerial,\n        });\n        if (this._requestedFlags) {\n            attachMsg.encodeModesToFlags(this._requestedFlags);\n        }\n        else if (this.channelOptions.modes) {\n            attachMsg.encodeModesToFlags(Utils.allToUpperCase(this.channelOptions.modes));\n        }\n        if (this._attachResume) {\n            attachMsg.setFlag('ATTACH_RESUME');\n        }\n        if (this._lastPayload.decodeFailureRecoveryInProgress) {\n            attachMsg.channelSerial = this._lastPayload.protocolMessageChannelSerial;\n        }\n        this.sendMessage(attachMsg, noop);\n    };\n    RealtimeChannel.prototype.detach = function (callback) {\n        if (!callback) {\n            if (this.realtime.options.promises) {\n                return Utils.promisify(this, 'detach', arguments);\n            }\n            callback = noop;\n        }\n        var connectionManager = this.connectionManager;\n        if (!connectionManager.activeState()) {\n            callback(connectionManager.getError());\n            return;\n        }\n        switch (this.state) {\n            case 'suspended':\n                this.notifyState('detached');\n                callback();\n                break;\n            case 'detached':\n                callback();\n                break;\n            case 'failed':\n                callback(new errorinfo_1.default('Unable to detach; channel state = failed', 90001, 400));\n                break;\n            default:\n                this.requestState('detaching');\n            // eslint-disable-next-line no-fallthrough\n            case 'detaching':\n                this.once(function (stateChange) {\n                    switch (this.event) {\n                        case 'detached':\n                            callback();\n                            break;\n                        case 'attached':\n                        case 'suspended':\n                        case 'failed':\n                            callback(stateChange.reason ||\n                                connectionManager.getError() ||\n                                new errorinfo_1.default('Unable to detach; reason unknown; state = ' + this.event, 90000, 500));\n                            break;\n                        case 'attaching':\n                            callback(new errorinfo_1.default('Detach request superseded by a subsequent attach request', 90000, 409));\n                            break;\n                    }\n                });\n        }\n    };\n    RealtimeChannel.prototype.detachImpl = function (callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.detach()', 'sending DETACH message');\n        var msg = protocolmessage_1.default.fromValues({ action: actions.DETACH, channel: this.name });\n        this.sendMessage(msg, callback || noop);\n    };\n    RealtimeChannel.prototype.subscribe = function () {\n        var args = []; /* [event], listener, [callback] */\n        for (var _i = 0 /* [event], listener, [callback] */; _i < arguments.length /* [event], listener, [callback] */; _i++ /* [event], listener, [callback] */) {\n            args[_i] = arguments[_i]; /* [event], listener, [callback] */\n        }\n        var _a = RealtimeChannel.processListenerArgs(args), event = _a[0], listener = _a[1], callback = _a[2];\n        if (!callback && this.realtime.options.promises) {\n            return Utils.promisify(this, 'subscribe', [event, listener]);\n        }\n        if (this.state === 'failed') {\n            callback === null || callback === void 0 ? void 0 : callback(errorinfo_1.default.fromValues(this.invalidStateError()));\n            return;\n        }\n        // Filtered\n        if (event && typeof event === 'object' && !Array.isArray(event)) {\n            this._subscribeFilter(event, listener);\n        }\n        else {\n            this.subscriptions.on(event, listener);\n        }\n        return this.attach(callback || noop);\n    };\n    RealtimeChannel.prototype._subscribeFilter = function (filter, listener) {\n        var filteredListener = function (m) {\n            var _a, _b, _c, _d, _e, _f;\n            var mapping = {\n                name: m.name,\n                refTimeserial: (_b = (_a = m.extras) === null || _a === void 0 ? void 0 : _a.ref) === null || _b === void 0 ? void 0 : _b.timeserial,\n                refType: (_d = (_c = m.extras) === null || _c === void 0 ? void 0 : _c.ref) === null || _d === void 0 ? void 0 : _d.type,\n                isRef: !!((_f = (_e = m.extras) === null || _e === void 0 ? void 0 : _e.ref) === null || _f === void 0 ? void 0 : _f.timeserial),\n                clientId: m.clientId,\n            };\n            // Check if any values are defined in the filter and if they match the value in the message object\n            if (Object.entries(filter).find(function (_a) {\n                var key = _a[0], value = _a[1];\n                return value !== undefined ? mapping[key] !== value : false;\n            })) {\n                return;\n            }\n            listener(m);\n        };\n        this._addFilteredSubscription(filter, listener, filteredListener);\n        this.subscriptions.on(filteredListener);\n    };\n    // Adds a new filtered subscription\n    RealtimeChannel.prototype._addFilteredSubscription = function (filter, realListener, filteredListener) {\n        var _a;\n        if (!this.filteredSubscriptions) {\n            this.filteredSubscriptions = new Map();\n        }\n        if (this.filteredSubscriptions.has(realListener)) {\n            var realListenerMap = this.filteredSubscriptions.get(realListener);\n            // Add the filtered listener to the map, or append to the array if this filter has already been used\n            realListenerMap.set(filter, ((_a = realListenerMap === null || realListenerMap === void 0 ? void 0 : realListenerMap.get(filter)) === null || _a === void 0 ? void 0 : _a.concat(filteredListener)) || [filteredListener]);\n        }\n        else {\n            this.filteredSubscriptions.set(realListener, new Map([[filter, [filteredListener]]]));\n        }\n    };\n    RealtimeChannel.prototype._getAndDeleteFilteredSubscriptions = function (filter, realListener) {\n        var _this = this;\n        // No filtered subscriptions map means there has been no filtered subscriptions yet, so return nothing\n        if (!this.filteredSubscriptions) {\n            return [];\n        }\n        // Only a filter is passed in with no specific listener\n        if (!realListener && filter) {\n            // Return each listener which is attached to the specified filter object\n            return Array.from(this.filteredSubscriptions.entries())\n                .map(function (_a) {\n                var _b;\n                var key = _a[0], filterMaps = _a[1];\n                // Get (then delete) the maps matching this filter\n                var listenerMaps = filterMaps.get(filter);\n                filterMaps.delete(filter);\n                // Clear the parent if nothing is left\n                if (filterMaps.size === 0) {\n                    (_b = _this.filteredSubscriptions) === null || _b === void 0 ? void 0 : _b.delete(key);\n                }\n                return listenerMaps;\n            })\n                .reduce(function (prev, cur) {\n                var _a;\n                return (cur ? (_a = prev).concat.apply(_a, cur) : prev);\n            }, []);\n        }\n        // No subscriptions for this listener\n        if (!realListener || !this.filteredSubscriptions.has(realListener)) {\n            return [];\n        }\n        var realListenerMap = this.filteredSubscriptions.get(realListener);\n        // If no filter is specified return all listeners using that function\n        if (!filter) {\n            // array.flat is not available unless we support es2019 or higher\n            var listeners_1 = Array.from(realListenerMap.values()).reduce(function (prev, cur) { return prev.concat.apply(prev, cur); }, []);\n            // remove the listener from the map\n            this.filteredSubscriptions.delete(realListener);\n            return listeners_1;\n        }\n        var listeners = realListenerMap.get(filter);\n        realListenerMap.delete(filter);\n        return listeners || [];\n    };\n    RealtimeChannel.prototype.unsubscribe = function () {\n        var _this = this;\n        var _a;\n        var args = []; /* [event], listener */\n        for (var _i = 0 /* [event], listener */; _i < arguments.length /* [event], listener */; _i++ /* [event], listener */) {\n            args[_i] = arguments[_i]; /* [event], listener */\n        }\n        var _b = RealtimeChannel.processListenerArgs(args), event = _b[0], listener = _b[1];\n        // If we either have a filtered listener, a filter or both we need to do additional processing to find the original function(s)\n        if ((typeof event === 'object' && !listener) || ((_a = this.filteredSubscriptions) === null || _a === void 0 ? void 0 : _a.has(listener))) {\n            this._getAndDeleteFilteredSubscriptions(event, listener).forEach(function (l) { return _this.subscriptions.off(l); });\n            return;\n        }\n        this.subscriptions.off(event, listener);\n    };\n    RealtimeChannel.prototype.sync = function () {\n        /* check preconditions */\n        switch (this.state) {\n            case 'initialized':\n            case 'detaching':\n            case 'detached':\n                throw new errorinfo_1.PartialErrorInfo('Unable to sync to channel; not attached', 40000);\n            default:\n        }\n        var connectionManager = this.connectionManager;\n        if (!connectionManager.activeState()) {\n            throw connectionManager.getError();\n        }\n        /* send sync request */\n        var syncMessage = protocolmessage_1.default.fromValues({ action: actions.SYNC, channel: this.name });\n        if (this.syncChannelSerial) {\n            syncMessage.channelSerial = this.syncChannelSerial;\n        }\n        connectionManager.send(syncMessage);\n    };\n    RealtimeChannel.prototype.sendMessage = function (msg, callback) {\n        this.connectionManager.send(msg, this.realtime.options.queueMessages, callback);\n    };\n    RealtimeChannel.prototype.sendPresence = function (presence, callback) {\n        var msg = protocolmessage_1.default.fromValues({\n            action: actions.PRESENCE,\n            channel: this.name,\n            presence: Utils.isArray(presence)\n                ? presencemessage_1.default.fromValuesArray(presence)\n                : [presencemessage_1.default.fromValues(presence)],\n        });\n        this.sendMessage(msg, callback);\n    };\n    RealtimeChannel.prototype.onMessage = function (message) {\n        if (message.action === actions.ATTACHED ||\n            message.action === actions.MESSAGE ||\n            message.action === actions.PRESENCE) {\n            // RTL15b\n            this.setChannelSerial(message.channelSerial);\n        }\n        var syncChannelSerial, isSync = false;\n        switch (message.action) {\n            case actions.ATTACHED: {\n                this.properties.attachSerial = message.channelSerial;\n                this._mode = message.getMode();\n                this.params = message.params || {};\n                var modesFromFlags = message.decodeModesFromFlags();\n                this.modes = (modesFromFlags && Utils.allToLowerCase(modesFromFlags)) || undefined;\n                var resumed = message.hasFlag('RESUMED');\n                var hasPresence = message.hasFlag('HAS_PRESENCE');\n                var hasBacklog = message.hasFlag('HAS_BACKLOG');\n                if (this.state === 'attached') {\n                    if (!resumed) {\n                        /* On a loss of continuity, the presence set needs to be re-synced */\n                        this.presence.onAttached(hasPresence);\n                    }\n                    var change = new channelstatechange_1.default(this.state, this.state, resumed, hasBacklog, message.error);\n                    this._allChannelChanges.emit('update', change);\n                    if (!resumed || this.channelOptions.updateOnAttached) {\n                        this.emit('update', change);\n                    }\n                }\n                else if (this.state === 'detaching') {\n                    /* RTL5i: re-send DETACH and remain in the 'detaching' state */\n                    this.checkPendingState();\n                }\n                else {\n                    this.notifyState('attached', message.error, resumed, hasPresence, hasBacklog);\n                }\n                break;\n            }\n            case actions.DETACHED: {\n                var detachErr = message.error\n                    ? errorinfo_1.default.fromValues(message.error)\n                    : new errorinfo_1.default('Channel detached', 90001, 404);\n                if (this.state === 'detaching') {\n                    this.notifyState('detached', detachErr);\n                }\n                else if (this.state === 'attaching') {\n                    /* Only retry immediately if we were previously attached. If we were\n                     * attaching, go into suspended, fail messages, and wait a few seconds\n                     * before retrying */\n                    this.notifyState('suspended', detachErr);\n                }\n                else {\n                    this.requestState('attaching', detachErr);\n                }\n                break;\n            }\n            case actions.SYNC:\n                /* syncs can have channelSerials, but might not if the sync is one page long */\n                isSync = true;\n                syncChannelSerial = this.syncChannelSerial = message.channelSerial;\n                /* syncs can happen on channels with no presence data as part of connection\n                 * resuming, in which case protocol message has no presence property */\n                if (!message.presence)\n                    break;\n            // eslint-disable-next-line no-fallthrough\n            case actions.PRESENCE: {\n                var presence = message.presence;\n                var id = message.id, connectionId = message.connectionId, timestamp = message.timestamp;\n                var options = this.channelOptions;\n                var presenceMsg = void 0;\n                for (var i = 0; i < presence.length; i++) {\n                    try {\n                        presenceMsg = presence[i];\n                        presencemessage_1.default.decode(presenceMsg, options);\n                        if (!presenceMsg.connectionId)\n                            presenceMsg.connectionId = connectionId;\n                        if (!presenceMsg.timestamp)\n                            presenceMsg.timestamp = timestamp;\n                        if (!presenceMsg.id)\n                            presenceMsg.id = id + ':' + i;\n                    }\n                    catch (e) {\n                        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel.onMessage()', e.toString());\n                    }\n                }\n                this.presence.setPresence(presence, isSync, syncChannelSerial);\n                break;\n            }\n            case actions.MESSAGE: {\n                //RTL17\n                if (this.state !== 'attached') {\n                    logger_1.default.logAction(logger_1.default.LOG_MAJOR, 'RealtimeChannel.onMessage()', 'Message \"' +\n                        message.id +\n                        '\" skipped as this channel \"' +\n                        this.name +\n                        '\" state is not \"attached\" (state is \"' +\n                        this.state +\n                        '\").');\n                    return;\n                }\n                var messages = message.messages, firstMessage = messages[0], lastMessage = messages[messages.length - 1], id = message.id, connectionId = message.connectionId, timestamp = message.timestamp;\n                if (firstMessage.extras &&\n                    firstMessage.extras.delta &&\n                    firstMessage.extras.delta.from !== this._lastPayload.messageId) {\n                    var msg = 'Delta message decode failure - previous message not available for message \"' +\n                        message.id +\n                        '\" on this channel \"' +\n                        this.name +\n                        '\".';\n                    logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel.onMessage()', msg);\n                    this._startDecodeFailureRecovery(new errorinfo_1.default(msg, 40018, 400));\n                    break;\n                }\n                for (var i = 0; i < messages.length; i++) {\n                    var msg = messages[i];\n                    try {\n                        message_1.default.decode(msg, this._decodingContext);\n                    }\n                    catch (e) {\n                        /* decrypt failed .. the most likely cause is that we have the wrong key */\n                        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel.onMessage()', e.toString());\n                        switch (e.code) {\n                            case 40018:\n                                /* decode failure */\n                                this._startDecodeFailureRecovery(e);\n                                return;\n                            case 40019:\n                            /* No vcdiff plugin passed in - no point recovering, give up */\n                            // eslint-disable-next-line no-fallthrough\n                            case 40021:\n                                /* Browser does not support deltas, similarly no point recovering */\n                                this.notifyState('failed', e);\n                                return;\n                        }\n                    }\n                    if (!msg.connectionId)\n                        msg.connectionId = connectionId;\n                    if (!msg.timestamp)\n                        msg.timestamp = timestamp;\n                    if (!msg.id)\n                        msg.id = id + ':' + i;\n                }\n                this._lastPayload.messageId = lastMessage.id;\n                this._lastPayload.protocolMessageChannelSerial = message.channelSerial;\n                this.onEvent(messages);\n                break;\n            }\n            case actions.ERROR: {\n                /* there was a channel-specific error */\n                var err = message.error;\n                if (err && err.code == 80016) {\n                    /* attach/detach operation attempted on superseded transport handle */\n                    this.checkPendingState();\n                }\n                else {\n                    this.notifyState('failed', errorinfo_1.default.fromValues(err));\n                }\n                break;\n            }\n            default:\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimeChannel.onMessage()', 'Fatal protocol error: unrecognised action (' + message.action + ')');\n                this.connectionManager.abort(connectionerrors_1.default.unknownChannelErr());\n        }\n    };\n    RealtimeChannel.prototype._startDecodeFailureRecovery = function (reason) {\n        var _this = this;\n        if (!this._lastPayload.decodeFailureRecoveryInProgress) {\n            logger_1.default.logAction(logger_1.default.LOG_MAJOR, 'RealtimeChannel.onMessage()', 'Starting decode failure recovery process.');\n            this._lastPayload.decodeFailureRecoveryInProgress = true;\n            this._attach(true, reason, function () {\n                _this._lastPayload.decodeFailureRecoveryInProgress = false;\n            });\n        }\n    };\n    RealtimeChannel.prototype.onAttached = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.onAttached', 'activating channel; name = ' + this.name);\n    };\n    RealtimeChannel.prototype.notifyState = function (state, reason, resumed, hasPresence, hasBacklog) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.notifyState', 'name = ' + this.name + ', current state = ' + this.state + ', notifying state ' + state);\n        this.clearStateTimer();\n        // RTP5a1\n        if (Utils.arrIn(['detached', 'suspended', 'failed'], state)) {\n            this.properties.channelSerial = null;\n        }\n        if (state === this.state) {\n            return;\n        }\n        this.presence.actOnChannelState(state, hasPresence, reason);\n        if (state === 'suspended' && this.connectionManager.state.sendEvents) {\n            this.startRetryTimer();\n        }\n        else {\n            this.cancelRetryTimer();\n        }\n        if (reason) {\n            this.errorReason = reason;\n        }\n        var change = new channelstatechange_1.default(this.state, state, resumed, hasBacklog, reason);\n        var logLevel = state === 'failed' ? logger_1.default.LOG_ERROR : logger_1.default.LOG_MAJOR;\n        logger_1.default.logAction(logLevel, 'Channel state for channel \"' + this.name + '\"', state + (reason ? '; reason: ' + reason : ''));\n        if (state !== 'attaching' && state !== 'suspended') {\n            this.retryCount = 0;\n        }\n        /* Note: we don't set inProgress for pending states until the request is actually in progress */\n        if (state === 'attached') {\n            this.onAttached();\n        }\n        if (state === 'attached') {\n            this._attachResume = true;\n        }\n        else if (state === 'detaching' || state === 'failed') {\n            this._attachResume = false;\n        }\n        this.state = state;\n        this._allChannelChanges.emit(state, change);\n        this.emit(state, change);\n    };\n    RealtimeChannel.prototype.requestState = function (state, reason) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.requestState', 'name = ' + this.name + ', state = ' + state);\n        this.notifyState(state, reason);\n        /* send the event and await response */\n        this.checkPendingState();\n    };\n    RealtimeChannel.prototype.checkPendingState = function () {\n        /* if can't send events, do nothing */\n        var cmState = this.connectionManager.state;\n        /* Allow attach messages to queue up when synchronizing, since this will be\n         * the state we'll be in when upgrade transport.active triggers a checkpendingstate */\n        if (!(cmState.sendEvents || cmState.forceQueueEvents)) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.checkPendingState', 'sendEvents is false; state is ' + this.connectionManager.state.state);\n            return;\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.checkPendingState', 'name = ' + this.name + ', state = ' + this.state);\n        /* Only start the state timer running when actually sending the event */\n        switch (this.state) {\n            case 'attaching':\n                this.startStateTimerIfNotRunning();\n                this.attachImpl();\n                break;\n            case 'detaching':\n                this.startStateTimerIfNotRunning();\n                this.detachImpl();\n                break;\n            case 'attached':\n                /* resume any sync operation that was in progress */\n                this.sync();\n                break;\n            default:\n                break;\n        }\n    };\n    RealtimeChannel.prototype.timeoutPendingState = function () {\n        switch (this.state) {\n            case 'attaching': {\n                var err = new errorinfo_1.default('Channel attach timed out', 90007, 408);\n                this.notifyState('suspended', err);\n                break;\n            }\n            case 'detaching': {\n                var err = new errorinfo_1.default('Channel detach timed out', 90007, 408);\n                this.notifyState('attached', err);\n                break;\n            }\n            default:\n                this.checkPendingState();\n                break;\n        }\n    };\n    RealtimeChannel.prototype.startStateTimerIfNotRunning = function () {\n        var _this = this;\n        if (!this.stateTimer) {\n            this.stateTimer = setTimeout(function () {\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.startStateTimerIfNotRunning', 'timer expired');\n                _this.stateTimer = null;\n                _this.timeoutPendingState();\n            }, this.realtime.options.timeouts.realtimeRequestTimeout);\n        }\n    };\n    RealtimeChannel.prototype.clearStateTimer = function () {\n        var stateTimer = this.stateTimer;\n        if (stateTimer) {\n            clearTimeout(stateTimer);\n            this.stateTimer = null;\n        }\n    };\n    RealtimeChannel.prototype.startRetryTimer = function () {\n        var _this = this;\n        if (this.retryTimer)\n            return;\n        this.retryCount++;\n        var retryDelay = Utils.getRetryTime(this.realtime.options.timeouts.channelRetryTimeout, this.retryCount);\n        this.retryTimer = setTimeout(function () {\n            /* If connection is not connected, just leave in suspended, a reattach\n             * will be triggered once it connects again */\n            if (_this.state === 'suspended' && _this.connectionManager.state.sendEvents) {\n                _this.retryTimer = null;\n                logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel retry timer expired', 'attempting a new attach');\n                _this.requestState('attaching');\n            }\n        }, retryDelay);\n    };\n    RealtimeChannel.prototype.cancelRetryTimer = function () {\n        if (this.retryTimer) {\n            clearTimeout(this.retryTimer);\n            this.retryTimer = null;\n        }\n    };\n    /* @returns null (if can safely be released) | ErrorInfo (if cannot) */\n    RealtimeChannel.prototype.getReleaseErr = function () {\n        var s = this.state;\n        if (s === 'initialized' || s === 'detached' || s === 'failed') {\n            return null;\n        }\n        return new errorinfo_1.default('Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was ' +\n            s, 90001, 400);\n    };\n    RealtimeChannel.prototype.setChannelSerial = function (channelSerial) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimeChannel.setChannelSerial()', 'Updating channel serial; serial = ' + channelSerial + '; previous = ' + this.properties.channelSerial);\n        // RTP17h: Only update the channel serial if its present (it won't always\n        // be set).\n        if (channelSerial) {\n            this.properties.channelSerial = channelSerial;\n        }\n    };\n    return RealtimeChannel;\n}(channel_1.default));\nfunction omitAgent(channelParams) {\n    var _a = channelParams || {}, _ = _a.agent, paramsWithoutAgent = tslib_1.__rest(_a, [\"agent\"]);\n    return paramsWithoutAgent;\n}\nexports.default = RealtimeChannel;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChannelStateChange = /** @class */ (function () {\n    function ChannelStateChange(previous, current, resumed, hasBacklog, reason) {\n        this.previous = previous;\n        this.current = current;\n        if (current === 'attached') {\n            this.resumed = resumed;\n            this.hasBacklog = hasBacklog;\n        }\n        if (reason)\n            this.reason = reason;\n    }\n    return ChannelStateChange;\n}());\nexports.default = ChannelStateChange;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __nested_webpack_require_438599__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_438599__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction inspect(buffer) {\n    if (buffer === undefined)\n        return 'undefined';\n    var view;\n    var type;\n    if (buffer instanceof ArrayBuffer) {\n        type = 'ArrayBuffer';\n        view = new DataView(buffer);\n    }\n    else if (buffer instanceof DataView) {\n        type = 'DataView';\n        view = buffer;\n    }\n    if (!view)\n        return JSON.stringify(buffer);\n    var bytes = [];\n    for (var i = 0; i < buffer.byteLength; i++) {\n        if (i > 20) {\n            bytes.push('...');\n            break;\n        }\n        var byte_ = view.getUint8(i).toString(16);\n        if (byte_.length === 1)\n            byte_ = '0' + byte_;\n        bytes.push(byte_);\n    }\n    return '<' + type + ' ' + bytes.join(' ') + '>';\n}\n// Encode string as utf8 into dataview at offset\nfunction utf8Write(view, offset, string) {\n    for (var i = 0, l = string.length; i < l; i++) {\n        var codePoint = string.charCodeAt(i);\n        // One byte of UTF-8\n        if (codePoint < 0x80) {\n            view.setUint8(offset++, ((codePoint >>> 0) & 0x7f) | 0x00);\n            continue;\n        }\n        // Two bytes of UTF-8\n        if (codePoint < 0x800) {\n            view.setUint8(offset++, ((codePoint >>> 6) & 0x1f) | 0xc0);\n            view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n            continue;\n        }\n        // Three bytes of UTF-8.\n        if (codePoint < 0x10000) {\n            view.setUint8(offset++, ((codePoint >>> 12) & 0x0f) | 0xe0);\n            view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n            view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n            continue;\n        }\n        // Four bytes of UTF-8\n        if (codePoint < 0x110000) {\n            view.setUint8(offset++, ((codePoint >>> 18) & 0x07) | 0xf0);\n            view.setUint8(offset++, ((codePoint >>> 12) & 0x3f) | 0x80);\n            view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n            view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n            continue;\n        }\n        throw new Error('bad codepoint ' + codePoint);\n    }\n}\nfunction utf8Read(view, offset, length) {\n    var string = '';\n    for (var i = offset, end = offset + length; i < end; i++) {\n        var byte_ = view.getUint8(i);\n        // One byte character\n        if ((byte_ & 0x80) === 0x00) {\n            string += String.fromCharCode(byte_);\n            continue;\n        }\n        // Two byte character\n        if ((byte_ & 0xe0) === 0xc0) {\n            string += String.fromCharCode(((byte_ & 0x0f) << 6) | (view.getUint8(++i) & 0x3f));\n            continue;\n        }\n        // Three byte character\n        if ((byte_ & 0xf0) === 0xe0) {\n            string += String.fromCharCode(((byte_ & 0x0f) << 12) | ((view.getUint8(++i) & 0x3f) << 6) | ((view.getUint8(++i) & 0x3f) << 0));\n            continue;\n        }\n        // Four byte character\n        if ((byte_ & 0xf8) === 0xf0) {\n            string += String.fromCharCode(((byte_ & 0x07) << 18) |\n                ((view.getUint8(++i) & 0x3f) << 12) |\n                ((view.getUint8(++i) & 0x3f) << 6) |\n                ((view.getUint8(++i) & 0x3f) << 0));\n            continue;\n        }\n        throw new Error('Invalid byte ' + byte_.toString(16));\n    }\n    return string;\n}\nfunction utf8ByteCount(string) {\n    var count = 0;\n    for (var i = 0, l = string.length; i < l; i++) {\n        var codePoint = string.charCodeAt(i);\n        if (codePoint < 0x80) {\n            count += 1;\n            continue;\n        }\n        if (codePoint < 0x800) {\n            count += 2;\n            continue;\n        }\n        if (codePoint < 0x10000) {\n            count += 3;\n            continue;\n        }\n        if (codePoint < 0x110000) {\n            count += 4;\n            continue;\n        }\n        throw new Error('bad codepoint ' + codePoint);\n    }\n    return count;\n}\nfunction encode(value, sparse) {\n    var size = sizeof(value, sparse);\n    if (size === 0)\n        return undefined;\n    var buffer = new ArrayBuffer(size);\n    var view = new DataView(buffer);\n    _encode(value, view, 0, sparse);\n    return buffer;\n}\nvar SH_L_32 = (1 << 16) * (1 << 16), SH_R_32 = 1 / SH_L_32;\nfunction getInt64(view, offset) {\n    offset = offset || 0;\n    return view.getInt32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\nfunction getUint64(view, offset) {\n    offset = offset || 0;\n    return view.getUint32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\nfunction setInt64(view, offset, val) {\n    if (val < 0x8000000000000000) {\n        view.setInt32(offset, Math.floor(val * SH_R_32));\n        view.setInt32(offset + 4, val & -1);\n    }\n    else {\n        view.setUint32(offset, 0x7fffffff);\n        view.setUint32(offset + 4, 0x7fffffff);\n    }\n}\nfunction setUint64(view, offset, val) {\n    if (val < 0x10000000000000000) {\n        view.setUint32(offset, Math.floor(val * SH_R_32));\n        view.setInt32(offset + 4, val & -1);\n    }\n    else {\n        view.setUint32(offset, 0xffffffff);\n        view.setUint32(offset + 4, 0xffffffff);\n    }\n}\n// https://gist.github.com/frsyuki/5432559 - v5 spec\n//\n// I've used one extension point from `fixext 1` to store `undefined`. On the wire this\n// should translate to exactly 0xd40000\n//\n// +--------+--------+--------+\n// |  0xd4  |  0x00  |  0x00  |\n// +--------+--------+--------+\n//    ^ fixext |        ^ value part unused (fixed to be 0)\n//             ^ indicates undefined value\n//\nvar Decoder = /** @class */ (function () {\n    function Decoder(view, offset) {\n        var _this = this;\n        this.map = function (length) {\n            var value = {};\n            for (var i = 0; i < length; i++) {\n                var key = _this.parse();\n                value[key] = _this.parse();\n            }\n            return value;\n        };\n        this.bin = function (length) {\n            var value = new ArrayBuffer(length);\n            new Uint8Array(value).set(new Uint8Array(_this.view.buffer, _this.offset, length), 0);\n            _this.offset += length;\n            return value;\n        };\n        this.buf = this.bin;\n        this.str = function (length) {\n            var value = utf8Read(_this.view, _this.offset, length);\n            _this.offset += length;\n            return value;\n        };\n        this.array = function (length) {\n            var value = new Array(length);\n            for (var i = 0; i < length; i++) {\n                value[i] = _this.parse();\n            }\n            return value;\n        };\n        this.ext = function (length) {\n            _this.offset += length;\n            return {\n                type: _this.view.getInt8(_this.offset),\n                data: _this.buf(length),\n            };\n        };\n        this.parse = function () {\n            var type = _this.view.getUint8(_this.offset);\n            var value, length;\n            // Positive FixInt - 0xxxxxxx\n            if ((type & 0x80) === 0x00) {\n                _this.offset++;\n                return type;\n            }\n            // FixMap - 1000xxxx\n            if ((type & 0xf0) === 0x80) {\n                length = type & 0x0f;\n                _this.offset++;\n                return _this.map(length);\n            }\n            // FixArray - 1001xxxx\n            if ((type & 0xf0) === 0x90) {\n                length = type & 0x0f;\n                _this.offset++;\n                return _this.array(length);\n            }\n            // FixStr - 101xxxxx\n            if ((type & 0xe0) === 0xa0) {\n                length = type & 0x1f;\n                _this.offset++;\n                return _this.str(length);\n            }\n            // Negative FixInt - 111xxxxx\n            if ((type & 0xe0) === 0xe0) {\n                value = _this.view.getInt8(_this.offset);\n                _this.offset++;\n                return value;\n            }\n            switch (type) {\n                // nil\n                case 0xc0:\n                    _this.offset++;\n                    return null;\n                // 0xc1 never used - use for undefined (NON-STANDARD)\n                case 0xc1:\n                    _this.offset++;\n                    return undefined;\n                // false\n                case 0xc2:\n                    _this.offset++;\n                    return false;\n                // true\n                case 0xc3:\n                    _this.offset++;\n                    return true;\n                // bin 8\n                case 0xc4:\n                    length = _this.view.getUint8(_this.offset + 1);\n                    _this.offset += 2;\n                    return _this.bin(length);\n                // bin 16\n                case 0xc5:\n                    length = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return _this.bin(length);\n                // bin 32\n                case 0xc6:\n                    length = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return _this.bin(length);\n                // ext 8\n                case 0xc7:\n                    length = _this.view.getUint8(_this.offset + 1);\n                    _this.offset += 2;\n                    return _this.ext(length);\n                // ext 16\n                case 0xc8:\n                    length = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return _this.ext(length);\n                // ext 32\n                case 0xc9:\n                    length = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return _this.ext(length);\n                // float 32\n                case 0xca:\n                    value = _this.view.getFloat32(_this.offset + 1);\n                    _this.offset += 5;\n                    return value;\n                // float 64\n                case 0xcb:\n                    value = _this.view.getFloat64(_this.offset + 1);\n                    _this.offset += 9;\n                    return value;\n                // uint8\n                case 0xcc:\n                    value = _this.view.getUint8(_this.offset + 1);\n                    _this.offset += 2;\n                    return value;\n                // uint 16\n                case 0xcd:\n                    value = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return value;\n                // uint 32\n                case 0xce:\n                    value = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return value;\n                // uint 64\n                case 0xcf:\n                    value = getUint64(_this.view, _this.offset + 1);\n                    _this.offset += 9;\n                    return value;\n                // int 8\n                case 0xd0:\n                    value = _this.view.getInt8(_this.offset + 1);\n                    _this.offset += 2;\n                    return value;\n                // int 16\n                case 0xd1:\n                    value = _this.view.getInt16(_this.offset + 1);\n                    _this.offset += 3;\n                    return value;\n                // int 32\n                case 0xd2:\n                    value = _this.view.getInt32(_this.offset + 1);\n                    _this.offset += 5;\n                    return value;\n                // int 64\n                case 0xd3:\n                    value = getInt64(_this.view, _this.offset + 1);\n                    _this.offset += 9;\n                    return value;\n                // fixext 1\n                case 0xd4:\n                    length = 1;\n                    _this.offset++;\n                    return _this.ext(length);\n                // fixext 2\n                case 0xd5:\n                    length = 2;\n                    _this.offset++;\n                    return _this.ext(length);\n                // fixext 4\n                case 0xd6:\n                    length = 4;\n                    _this.offset++;\n                    return _this.ext(length);\n                // fixext 8\n                case 0xd7:\n                    length = 8;\n                    _this.offset++;\n                    return _this.ext(length);\n                // fixext 16\n                case 0xd8:\n                    length = 16;\n                    _this.offset++;\n                    return _this.ext(length);\n                // str8\n                case 0xd9:\n                    length = _this.view.getUint8(_this.offset + 1);\n                    _this.offset += 2;\n                    return _this.str(length);\n                // str 16\n                case 0xda:\n                    length = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return _this.str(length);\n                // str 32\n                case 0xdb:\n                    length = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return _this.str(length);\n                // array 16\n                case 0xdc:\n                    length = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return _this.array(length);\n                // array 32\n                case 0xdd:\n                    length = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return _this.array(length);\n                // map 16\n                case 0xde:\n                    length = _this.view.getUint16(_this.offset + 1);\n                    _this.offset += 3;\n                    return _this.map(length);\n                // map 32\n                case 0xdf:\n                    length = _this.view.getUint32(_this.offset + 1);\n                    _this.offset += 5;\n                    return _this.map(length);\n            }\n            throw new Error('Unknown type 0x' + type.toString(16));\n        };\n        this.offset = offset || 0;\n        this.view = view;\n    }\n    return Decoder;\n}());\nfunction decode(buffer) {\n    var view = new DataView(buffer);\n    var decoder = new Decoder(view);\n    var value = decoder.parse();\n    if (decoder.offset !== buffer.byteLength)\n        throw new Error(buffer.byteLength - decoder.offset + ' trailing bytes');\n    return value;\n}\nfunction encodeableKeys(value, sparse) {\n    return Object.keys(value).filter(function (e) {\n        var val = value[e], type = typeof val;\n        return (!sparse || (val !== undefined && val !== null)) && ('function' !== type || !!val.toJSON);\n    });\n}\nfunction _encode(value, view, offset, sparse) {\n    var type = typeof value;\n    // Strings Bytes\n    // There are four string types: fixstr/str8/str16/str32\n    if (typeof value === 'string') {\n        var length_1 = utf8ByteCount(value);\n        // fixstr\n        if (length_1 < 0x20) {\n            view.setUint8(offset, length_1 | 0xa0);\n            utf8Write(view, offset + 1, value);\n            return 1 + length_1;\n        }\n        // str8\n        if (length_1 < 0x100) {\n            view.setUint8(offset, 0xd9);\n            view.setUint8(offset + 1, length_1);\n            utf8Write(view, offset + 2, value);\n            return 2 + length_1;\n        }\n        // str16\n        if (length_1 < 0x10000) {\n            view.setUint8(offset, 0xda);\n            view.setUint16(offset + 1, length_1);\n            utf8Write(view, offset + 3, value);\n            return 3 + length_1;\n        }\n        // str32\n        if (length_1 < 0x100000000) {\n            view.setUint8(offset, 0xdb);\n            view.setUint32(offset + 1, length_1);\n            utf8Write(view, offset + 5, value);\n            return 5 + length_1;\n        }\n    }\n    if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n        // extract the arraybuffer and fallthrough\n        value = value.buffer;\n    }\n    // There are three bin types: bin8/bin16/bin32\n    if (value instanceof ArrayBuffer) {\n        var length_2 = value.byteLength;\n        // bin8\n        if (length_2 < 0x100) {\n            view.setUint8(offset, 0xc4);\n            view.setUint8(offset + 1, length_2);\n            new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 2);\n            return 2 + length_2;\n        }\n        // bin16\n        if (length_2 < 0x10000) {\n            view.setUint8(offset, 0xc5);\n            view.setUint16(offset + 1, length_2);\n            new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 3);\n            return 3 + length_2;\n        }\n        // bin 32\n        if (length_2 < 0x100000000) {\n            view.setUint8(offset, 0xc6);\n            view.setUint32(offset + 1, length_2);\n            new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 5);\n            return 5 + length_2;\n        }\n    }\n    if (typeof value === 'number') {\n        // Floating Point\n        // NOTE: We're always using float64\n        if (Math.floor(value) !== value) {\n            view.setUint8(offset, 0xcb);\n            view.setFloat64(offset + 1, value);\n            return 9;\n        }\n        // Integers\n        if (value >= 0) {\n            // positive fixnum\n            if (value < 0x80) {\n                view.setUint8(offset, value);\n                return 1;\n            }\n            // uint 8\n            if (value < 0x100) {\n                view.setUint8(offset, 0xcc);\n                view.setUint8(offset + 1, value);\n                return 2;\n            }\n            // uint 16\n            if (value < 0x10000) {\n                view.setUint8(offset, 0xcd);\n                view.setUint16(offset + 1, value);\n                return 3;\n            }\n            // uint 32\n            if (value < 0x100000000) {\n                view.setUint8(offset, 0xce);\n                view.setUint32(offset + 1, value);\n                return 5;\n            }\n            // uint 64\n            if (value < 0x10000000000000000) {\n                view.setUint8(offset, 0xcf);\n                setUint64(view, offset + 1, value);\n                return 9;\n            }\n            throw new Error('Number too big 0x' + value.toString(16));\n        }\n        // negative fixnum\n        if (value >= -0x20) {\n            view.setInt8(offset, value);\n            return 1;\n        }\n        // int 8\n        if (value >= -0x80) {\n            view.setUint8(offset, 0xd0);\n            view.setInt8(offset + 1, value);\n            return 2;\n        }\n        // int 16\n        if (value >= -0x8000) {\n            view.setUint8(offset, 0xd1);\n            view.setInt16(offset + 1, value);\n            return 3;\n        }\n        // int 32\n        if (value >= -0x80000000) {\n            view.setUint8(offset, 0xd2);\n            view.setInt32(offset + 1, value);\n            return 5;\n        }\n        // int 64\n        if (value >= -0x8000000000000000) {\n            view.setUint8(offset, 0xd3);\n            setInt64(view, offset + 1, value);\n            return 9;\n        }\n        throw new Error('Number too small -0x' + (-value).toString(16).substr(1));\n    }\n    // undefined - use d4 (NON-STANDARD)\n    if (type === 'undefined') {\n        if (sparse)\n            return 0;\n        view.setUint8(offset, 0xd4);\n        view.setUint8(offset + 1, 0x00);\n        view.setUint8(offset + 2, 0x00);\n        return 3;\n    }\n    // null\n    if (value === null) {\n        if (sparse)\n            return 0;\n        view.setUint8(offset, 0xc0);\n        return 1;\n    }\n    // Boolean\n    if (type === 'boolean') {\n        view.setUint8(offset, value ? 0xc3 : 0xc2);\n        return 1;\n    }\n    if ('function' === typeof value.toJSON)\n        return _encode(value.toJSON(), view, offset, sparse);\n    // Container Types\n    if (type === 'object') {\n        var length_3, size = 0;\n        var keys = void 0;\n        var isArray = Array.isArray(value);\n        if (isArray) {\n            length_3 = value.length;\n        }\n        else {\n            keys = encodeableKeys(value, sparse);\n            length_3 = keys.length;\n        }\n        if (length_3 < 0x10) {\n            view.setUint8(offset, length_3 | (isArray ? 0x90 : 0x80));\n            size = 1;\n        }\n        else if (length_3 < 0x10000) {\n            view.setUint8(offset, isArray ? 0xdc : 0xde);\n            view.setUint16(offset + 1, length_3);\n            size = 3;\n        }\n        else if (length_3 < 0x100000000) {\n            view.setUint8(offset, isArray ? 0xdd : 0xdf);\n            view.setUint32(offset + 1, length_3);\n            size = 5;\n        }\n        if (isArray) {\n            for (var i = 0; i < length_3; i++) {\n                size += _encode(value[i], view, offset + size, sparse);\n            }\n        }\n        else if (keys) {\n            for (var i = 0; i < length_3; i++) {\n                var key = keys[i];\n                size += _encode(key, view, offset + size);\n                size += _encode(value[key], view, offset + size, sparse);\n            }\n        }\n        return size;\n    }\n    if (type === 'function')\n        return 0;\n    throw new Error('Unknown type ' + type);\n}\nfunction sizeof(value, sparse) {\n    var type = typeof value;\n    // fixstr or str8 or str16 or str32\n    if (type === 'string') {\n        var length_4 = utf8ByteCount(value);\n        if (length_4 < 0x20) {\n            return 1 + length_4;\n        }\n        if (length_4 < 0x100) {\n            return 2 + length_4;\n        }\n        if (length_4 < 0x10000) {\n            return 3 + length_4;\n        }\n        if (length_4 < 0x100000000) {\n            return 5 + length_4;\n        }\n    }\n    if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n        // extract the arraybuffer and fallthrough\n        value = value.buffer;\n    }\n    // bin8 or bin16 or bin32\n    if (value instanceof ArrayBuffer) {\n        var length_5 = value.byteLength;\n        if (length_5 < 0x100) {\n            return 2 + length_5;\n        }\n        if (length_5 < 0x10000) {\n            return 3 + length_5;\n        }\n        if (length_5 < 0x100000000) {\n            return 5 + length_5;\n        }\n    }\n    if (typeof value === 'number') {\n        // Floating Point (32 bits)\n        // double\n        if (Math.floor(value) !== value)\n            return 9;\n        // Integers\n        if (value >= 0) {\n            // positive fixint\n            if (value < 0x80)\n                return 1;\n            // uint 8\n            if (value < 0x100)\n                return 2;\n            // uint 16\n            if (value < 0x10000)\n                return 3;\n            // uint 32\n            if (value < 0x100000000)\n                return 5;\n            // uint 64\n            if (value < 0x10000000000000000)\n                return 9;\n            // Too big\n            throw new Error('Number too big 0x' + value.toString(16));\n        }\n        // negative fixint\n        if (value >= -0x20)\n            return 1;\n        // int 8\n        if (value >= -0x80)\n            return 2;\n        // int 16\n        if (value >= -0x8000)\n            return 3;\n        // int 32\n        if (value >= -0x80000000)\n            return 5;\n        // int 64\n        if (value >= -0x8000000000000000)\n            return 9;\n        // Too small\n        throw new Error('Number too small -0x' + value.toString(16).substr(1));\n    }\n    // Boolean\n    if (type === 'boolean')\n        return 1;\n    // undefined, null\n    if (value === null)\n        return sparse ? 0 : 1;\n    if (value === undefined)\n        return sparse ? 0 : 3;\n    if ('function' === typeof value.toJSON)\n        return sizeof(value.toJSON(), sparse);\n    // Container Types\n    if (type === 'object') {\n        var length_6, size = 0;\n        if (Array.isArray(value)) {\n            length_6 = value.length;\n            for (var i = 0; i < length_6; i++) {\n                size += sizeof(value[i], sparse);\n            }\n        }\n        else {\n            var keys = encodeableKeys(value, sparse);\n            length_6 = keys.length;\n            for (var i = 0; i < length_6; i++) {\n                var key = keys[i];\n                size += sizeof(key) + sizeof(value[key], sparse);\n            }\n        }\n        if (length_6 < 0x10) {\n            return 1 + size;\n        }\n        if (length_6 < 0x10000) {\n            return 3 + size;\n        }\n        if (length_6 < 0x100000000) {\n            return 5 + size;\n        }\n        throw new Error('Array or object too long 0x' + length_6.toString(16));\n    }\n    if (type === 'function')\n        return 0;\n    throw new Error('Unknown type ' + type);\n}\nexports.default = {\n    encode: encode,\n    decode: decode,\n    inspect: inspect,\n    utf8Write: utf8Write,\n    utf8Read: utf8Read,\n    utf8ByteCount: utf8ByteCount,\n};\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __nested_webpack_require_467389__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_467389__(0);\n// Common\nvar rest_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(30));\nvar realtime_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(50));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(3));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(4));\n// Platform Specific\nvar bufferutils_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(55));\n// @ts-ignore\nvar crypto_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(57));\nvar http_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(62));\nvar config_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(64));\n// @ts-ignore\nvar transport_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(68));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(2));\nvar defaults_1 = __nested_webpack_require_467389__(8);\nvar webstorage_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(65));\nvar defaults_2 = tslib_1.__importDefault(__nested_webpack_require_467389__(66));\nvar msgpack_1 = tslib_1.__importDefault(__nested_webpack_require_467389__(41));\nvar Crypto = (0, crypto_1.default)(config_1.default, bufferutils_1.default);\nplatform_1.default.Crypto = Crypto;\nplatform_1.default.BufferUtils = bufferutils_1.default;\nplatform_1.default.Http = http_1.default;\nplatform_1.default.Config = config_1.default;\nplatform_1.default.Transports = transport_1.default;\nplatform_1.default.WebStorage = webstorage_1.default;\nrest_1.default.Crypto = Crypto;\nrealtime_1.default.Crypto = Crypto;\nlogger_1.default.initLogHandlers();\nplatform_1.default.Defaults = (0, defaults_1.getDefaults)(defaults_2.default);\nif (platform_1.default.Config.agent) {\n    // @ts-ignore\n    platform_1.default.Defaults.agent += ' ' + platform_1.default.Config.agent;\n}\n/* If using IE8, don't attempt to upgrade from xhr_polling to xhr_streaming -\n * while it can do streaming, the low max http-connections-per-host limit means\n * that the polling transport is crippled during the upgrade process. So just\n * leave it at the base transport */\nif (platform_1.default.Config.noUpgrade) {\n    platform_1.default.Defaults.upgradeTransports = [];\n}\nexports.default = {\n    ErrorInfo: errorinfo_1.default,\n    Rest: rest_1.default,\n    Realtime: realtime_1.default,\n    msgpack: msgpack_1.default,\n};\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module) {\n\nmodule.exports = JSON.parse(\"{\\\"name\\\":\\\"ably\\\",\\\"description\\\":\\\"Realtime client library for Ably, the realtime messaging service\\\",\\\"version\\\":\\\"1.2.49\\\",\\\"license\\\":\\\"Apache-2.0\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/ably/ably-js/issues\\\",\\\"email\\\":\\\"support@ably.com\\\"},\\\"main\\\":\\\"./build/ably-node.js\\\",\\\"typings\\\":\\\"./ably.d.ts\\\",\\\"react-native\\\":{\\\"./build/ably-node.js\\\":\\\"./build/ably-reactnative.js\\\"},\\\"browser\\\":{\\\"./build/ably-node.js\\\":\\\"./build/ably-commonjs.js\\\"},\\\"files\\\":[\\\"build/**\\\",\\\"ably.d.ts\\\",\\\"callbacks.d.ts\\\",\\\"callbacks.js\\\",\\\"promises.d.ts\\\",\\\"promises.js\\\",\\\"resources/**\\\",\\\"src/**\\\",\\\"react/**\\\"],\\\"dependencies\\\":{\\\"@ably/msgpack-js\\\":\\\"^0.4.0\\\",\\\"got\\\":\\\"^11.8.5\\\",\\\"ws\\\":\\\"^8.14.2\\\"},\\\"peerDependencies\\\":{\\\"react\\\":\\\">=16.8.0\\\",\\\"react-dom\\\":\\\">=16.8.0\\\"},\\\"peerDependenciesMeta\\\":{\\\"react\\\":{\\\"optional\\\":true},\\\"react-dom\\\":{\\\"optional\\\":true}},\\\"devDependencies\\\":{\\\"@ably/vcdiff-decoder\\\":\\\"1.0.4\\\",\\\"@arethetypeswrong/cli\\\":\\\"^0.13.1\\\",\\\"@babel/preset-env\\\":\\\"^7.23.6\\\",\\\"@testing-library/react\\\":\\\"^13.3.0\\\",\\\"@types/crypto-js\\\":\\\"^4.0.1\\\",\\\"@types/jmespath\\\":\\\"^0.15.2\\\",\\\"@types/node\\\":\\\"^15.0.0\\\",\\\"@types/request\\\":\\\"^2.48.7\\\",\\\"@types/ws\\\":\\\"^8.2.0\\\",\\\"@typescript-eslint/eslint-plugin\\\":\\\"^5.14.0\\\",\\\"@typescript-eslint/parser\\\":\\\"^5.14.0\\\",\\\"@vitejs/plugin-react\\\":\\\"^1.3.2\\\",\\\"async\\\":\\\"ably-forks/async#requirejs\\\",\\\"aws-sdk\\\":\\\"^2.1413.0\\\",\\\"babel-loader\\\":\\\"^8.3.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"copy-webpack-plugin\\\":\\\"^6.4.1\\\",\\\"cors\\\":\\\"^2.8.5\\\",\\\"crypto-js\\\":\\\"ably-forks/crypto-js#crypto-lite\\\",\\\"eslint\\\":\\\"^7.13.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.28.0\\\",\\\"eslint-plugin-jsdoc\\\":\\\"^40.0.0\\\",\\\"eslint-plugin-react\\\":\\\"^7.32.2\\\",\\\"eslint-plugin-react-hooks\\\":\\\"^4.6.0\\\",\\\"eslint-plugin-security\\\":\\\"^1.4.0\\\",\\\"express\\\":\\\"^4.17.1\\\",\\\"glob\\\":\\\"~4.4\\\",\\\"google-closure-compiler\\\":\\\"^20180610.0.1\\\",\\\"grunt\\\":\\\"^1.6.1\\\",\\\"grunt-bump\\\":\\\"^0.3.1\\\",\\\"grunt-cli\\\":\\\"~1.2.0\\\",\\\"grunt-closure-tools\\\":\\\"^1.0.0\\\",\\\"grunt-contrib-concat\\\":\\\"~0.5\\\",\\\"grunt-shell\\\":\\\"~1.1\\\",\\\"grunt-webpack\\\":\\\"^4.0.2\\\",\\\"hexy\\\":\\\"~0.2\\\",\\\"jmespath\\\":\\\"^0.16.0\\\",\\\"jsdom\\\":\\\"^20.0.0\\\",\\\"kexec\\\":\\\"ably-forks/node-kexec#update-for-node-12\\\",\\\"minimist\\\":\\\"^1.2.5\\\",\\\"mocha\\\":\\\"^8.1.3\\\",\\\"mocha-junit-reporter\\\":\\\"^2.2.1\\\",\\\"null-loader\\\":\\\"^4.0.1\\\",\\\"playwright\\\":\\\"^1.39.0\\\",\\\"prettier\\\":\\\"^2.5.1\\\",\\\"react\\\":\\\">=18.1.0\\\",\\\"react-dom\\\":\\\">=18.1.0\\\",\\\"requirejs\\\":\\\"~2.1\\\",\\\"shelljs\\\":\\\"~0.8\\\",\\\"source-map-explorer\\\":\\\"^2.5.2\\\",\\\"ts-loader\\\":\\\"^8.2.0\\\",\\\"tsconfig-paths-webpack-plugin\\\":\\\"^4.0.1\\\",\\\"tslib\\\":\\\"^2.3.1\\\",\\\"typedoc\\\":\\\"^0.23.8\\\",\\\"typescript\\\":\\\"^4.6.4\\\",\\\"vite\\\":\\\"^4.4.9\\\",\\\"vitest\\\":\\\"^0.18.0\\\",\\\"webpack\\\":\\\"^4.44.2\\\",\\\"webpack-cli\\\":\\\"^4.2.0\\\",\\\"webpack-node-externals\\\":\\\"^3.0.0\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=5.10.x\\\"},\\\"repository\\\":\\\"ably/ably-js\\\",\\\"jspm\\\":{\\\"registry\\\":\\\"npm\\\",\\\"directories\\\":{\\\"lib\\\":\\\"build\\\"},\\\"main\\\":\\\"ably\\\"},\\\"scripts\\\":{\\\"start:react\\\":\\\"npx vite serve\\\",\\\"grunt\\\":\\\"grunt\\\",\\\"test\\\":\\\"grunt test\\\",\\\"test:node\\\":\\\"grunt test:node\\\",\\\"test:node:skip-build\\\":\\\"grunt mocha\\\",\\\"test:webserver\\\":\\\"grunt test:webserver\\\",\\\"test:playwright\\\":\\\"node test/support/runPlaywrightTests.js\\\",\\\"test:react\\\":\\\"vitest run\\\",\\\"concat\\\":\\\"grunt concat\\\",\\\"build\\\":\\\"grunt build:all && npm run build:react\\\",\\\"build:node\\\":\\\"grunt build:node\\\",\\\"build:browser\\\":\\\"grunt build:browser\\\",\\\"build:react\\\":\\\"npm run build:react:mjs && npm run build:react:cjs && cp src/platform/react-hooks/res/package.react.json react/package.json\\\",\\\"build:react:mjs\\\":\\\"tsc --project src/platform/react-hooks/tsconfig.mjs.json && cp src/platform/react-hooks/res/package.mjs.json react/mjs/package.json\\\",\\\"build:react:cjs\\\":\\\"tsc --project src/platform/react-hooks/tsconfig.cjs.json && cp src/platform/react-hooks/res/package.cjs.json react/cjs/package.json\\\",\\\"requirejs\\\":\\\"grunt requirejs\\\",\\\"lint\\\":\\\"eslint .\\\",\\\"lint:fix\\\":\\\"eslint --fix .\\\",\\\"check-closure-compiler\\\":\\\"grunt check-closure-compiler\\\",\\\"prepare\\\":\\\"npm run build\\\",\\\"format\\\":\\\"prettier --write --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js docs/chrome-mv3.md\\\",\\\"format:check\\\":\\\"prettier --check --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js\\\",\\\"sourcemap\\\":\\\"source-map-explorer build/ably.min.js\\\",\\\"sourcemap:noencryption\\\":\\\"source-map-explorer build/ably.noencryption.min.js\\\",\\\"docs\\\":\\\"typedoc --entryPoints ably.d.ts --out docs/generated/default --readme docs/landing-pages/default.md && typedoc --entryPoints promises.d.ts --out docs/generated/promises --name \\\\\\\"ably (Promise-based)\\\\\\\" --readme docs/landing-pages/promises.md && cp docs/landing-pages/choose-library.html docs/generated/index.html\\\"}}\");\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __nested_webpack_require_474650__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_474650__(6), __nested_webpack_require_474650__(32), __nested_webpack_require_474650__(24));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.HmacSHA256;\n\n}));\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __nested_webpack_require_474973__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_474973__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_474973__(1));\nvar devicedetails_1 = tslib_1.__importDefault(__nested_webpack_require_474973__(47));\nvar resource_1 = tslib_1.__importDefault(__nested_webpack_require_474973__(14));\nvar paginatedresource_1 = tslib_1.__importDefault(__nested_webpack_require_474973__(19));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_474973__(4));\nvar pushchannelsubscription_1 = tslib_1.__importDefault(__nested_webpack_require_474973__(48));\nvar noop = function () { };\nvar Push = /** @class */ (function () {\n    function Push(rest) {\n        this.rest = rest;\n        this.admin = new Admin(rest);\n    }\n    return Push;\n}());\nvar Admin = /** @class */ (function () {\n    function Admin(rest) {\n        this.rest = rest;\n        this.deviceRegistrations = new DeviceRegistrations(rest);\n        this.channelSubscriptions = new ChannelSubscriptions(rest);\n    }\n    Admin.prototype.publish = function (recipient, payload, callback) {\n        var rest = this.rest;\n        var format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(rest.options, format), params = {};\n        var body = Utils.mixin({ recipient: recipient }, payload);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'publish', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        var requestBody = Utils.encodeBody(body, format);\n        resource_1.default.post(rest, '/push/publish', requestBody, headers, params, null, function (err) { return callback(err); });\n    };\n    return Admin;\n}());\nvar DeviceRegistrations = /** @class */ (function () {\n    function DeviceRegistrations(rest) {\n        this.rest = rest;\n    }\n    DeviceRegistrations.prototype.save = function (device, callback) {\n        var rest = this.rest;\n        var body = devicedetails_1.default.fromValues(device);\n        var format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(rest.options, format), params = {};\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'save', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        var requestBody = Utils.encodeBody(body, format);\n        resource_1.default.put(rest, '/push/deviceRegistrations/' + encodeURIComponent(device.id), requestBody, headers, params, null, function (err, body, headers, unpacked) {\n            callback(err, !err\n                ? devicedetails_1.default.fromResponseBody(body, unpacked ? undefined : format)\n                : undefined);\n        });\n    };\n    DeviceRegistrations.prototype.get = function (deviceIdOrDetails, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultGetHeaders(rest.options, format), deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'get', arguments);\n            }\n            callback = noop;\n        }\n        if (typeof deviceId !== 'string' || !deviceId.length) {\n            callback(new errorinfo_1.default('First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails', 40000, 400));\n            return;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        resource_1.default.get(rest, '/push/deviceRegistrations/' + encodeURIComponent(deviceId), headers, {}, null, function (err, body, headers, unpacked) {\n            callback(err, !err\n                ? devicedetails_1.default.fromResponseBody(body, unpacked ? undefined : format)\n                : undefined);\n        });\n    };\n    DeviceRegistrations.prototype.list = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'list', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        new paginatedresource_1.default(rest, '/push/deviceRegistrations', headers, envelope, function (body, headers, unpacked) {\n            return devicedetails_1.default.fromResponseBody(body, unpacked ? undefined : format);\n        }).get(params, callback);\n    };\n    DeviceRegistrations.prototype.remove = function (deviceIdOrDetails, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultGetHeaders(rest.options, format), params = {}, deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'remove', arguments);\n            }\n            callback = noop;\n        }\n        if (typeof deviceId !== 'string' || !deviceId.length) {\n            callback(new errorinfo_1.default('First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails', 40000, 400));\n            return;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        resource_1.default['delete'](rest, '/push/deviceRegistrations/' + encodeURIComponent(deviceId), headers, params, null, function (err) { return callback(err); });\n    };\n    DeviceRegistrations.prototype.removeWhere = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'removeWhere', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        resource_1.default['delete'](rest, '/push/deviceRegistrations', headers, params, null, function (err) { return callback(err); });\n    };\n    return DeviceRegistrations;\n}());\nvar ChannelSubscriptions = /** @class */ (function () {\n    function ChannelSubscriptions(rest) {\n        /* ChannelSubscriptions have no unique id; removing one is equivalent to removeWhere by its properties */\n        this.remove = ChannelSubscriptions.prototype.removeWhere;\n        this.rest = rest;\n    }\n    ChannelSubscriptions.prototype.save = function (subscription, callback) {\n        var rest = this.rest;\n        var body = pushchannelsubscription_1.default.fromValues(subscription);\n        var format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultPostHeaders(rest.options, format), params = {};\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'save', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        var requestBody = Utils.encodeBody(body, format);\n        resource_1.default.post(rest, '/push/channelSubscriptions', requestBody, headers, params, null, function (err, body, headers, unpacked) {\n            callback(err, !err && pushchannelsubscription_1.default.fromResponseBody(body, unpacked ? undefined : format));\n        });\n    };\n    ChannelSubscriptions.prototype.list = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'list', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        new paginatedresource_1.default(rest, '/push/channelSubscriptions', headers, envelope, function (body, headers, unpacked) {\n            return pushchannelsubscription_1.default.fromResponseBody(body, unpacked ? undefined : format);\n        }).get(params, callback);\n    };\n    ChannelSubscriptions.prototype.removeWhere = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'removeWhere', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        resource_1.default['delete'](rest, '/push/channelSubscriptions', headers, params, null, function (err) { return callback(err); });\n    };\n    ChannelSubscriptions.prototype.listChannels = function (params, callback) {\n        var rest = this.rest, format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json, envelope = this.rest.http.supportsLinkHeaders ? undefined : format, headers = Utils.defaultGetHeaders(rest.options, format);\n        if (typeof callback !== 'function') {\n            if (this.rest.options.promises) {\n                return Utils.promisify(this, 'listChannels', arguments);\n            }\n            callback = noop;\n        }\n        if (rest.options.headers)\n            Utils.mixin(headers, rest.options.headers);\n        if (rest.options.pushFullWait)\n            Utils.mixin(params, { fullWait: 'true' });\n        new paginatedresource_1.default(rest, '/push/channels', headers, envelope, function (body, headers, unpacked) {\n            var parsedBody = (!unpacked && format ? Utils.decodeBody(body, format) : body);\n            for (var i = 0; i < parsedBody.length; i++) {\n                parsedBody[i] = String(parsedBody[i]);\n            }\n            return parsedBody;\n        }).get(params, callback);\n    };\n    return ChannelSubscriptions;\n}());\nexports.default = Push;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __nested_webpack_require_486552__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_486552__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_486552__(1));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_486552__(4));\nvar DeviceFormFactor;\n(function (DeviceFormFactor) {\n    DeviceFormFactor[\"Phone\"] = \"phone\";\n    DeviceFormFactor[\"Tablet\"] = \"tablet\";\n    DeviceFormFactor[\"Desktop\"] = \"desktop\";\n    DeviceFormFactor[\"TV\"] = \"tv\";\n    DeviceFormFactor[\"Watch\"] = \"watch\";\n    DeviceFormFactor[\"Car\"] = \"car\";\n    DeviceFormFactor[\"Embedded\"] = \"embedded\";\n    DeviceFormFactor[\"Other\"] = \"other\";\n})(DeviceFormFactor || (DeviceFormFactor = {}));\nvar DevicePlatform;\n(function (DevicePlatform) {\n    DevicePlatform[\"Android\"] = \"android\";\n    DevicePlatform[\"IOS\"] = \"ios\";\n    DevicePlatform[\"Browser\"] = \"browser\";\n})(DevicePlatform || (DevicePlatform = {}));\nvar DeviceDetails = /** @class */ (function () {\n    function DeviceDetails() {\n    }\n    DeviceDetails.prototype.toJSON = function () {\n        var _a, _b, _c;\n        return {\n            id: this.id,\n            deviceSecret: this.deviceSecret,\n            platform: this.platform,\n            formFactor: this.formFactor,\n            clientId: this.clientId,\n            metadata: this.metadata,\n            deviceIdentityToken: this.deviceIdentityToken,\n            push: {\n                recipient: (_a = this.push) === null || _a === void 0 ? void 0 : _a.recipient,\n                state: (_b = this.push) === null || _b === void 0 ? void 0 : _b.state,\n                error: (_c = this.push) === null || _c === void 0 ? void 0 : _c.error,\n            },\n        };\n    };\n    DeviceDetails.prototype.toString = function () {\n        var _a, _b, _c, _d;\n        var result = '[DeviceDetails';\n        if (this.id)\n            result += '; id=' + this.id;\n        if (this.platform)\n            result += '; platform=' + this.platform;\n        if (this.formFactor)\n            result += '; formFactor=' + this.formFactor;\n        if (this.clientId)\n            result += '; clientId=' + this.clientId;\n        if (this.metadata)\n            result += '; metadata=' + this.metadata;\n        if (this.deviceIdentityToken)\n            result += '; deviceIdentityToken=' + JSON.stringify(this.deviceIdentityToken);\n        if ((_a = this.push) === null || _a === void 0 ? void 0 : _a.recipient)\n            result += '; push.recipient=' + JSON.stringify(this.push.recipient);\n        if ((_b = this.push) === null || _b === void 0 ? void 0 : _b.state)\n            result += '; push.state=' + this.push.state;\n        if ((_c = this.push) === null || _c === void 0 ? void 0 : _c.error)\n            result += '; push.error=' + JSON.stringify(this.push.error);\n        if ((_d = this.push) === null || _d === void 0 ? void 0 : _d.metadata)\n            result += '; push.metadata=' + this.push.metadata;\n        result += ']';\n        return result;\n    };\n    DeviceDetails.fromResponseBody = function (body, format) {\n        if (format) {\n            body = Utils.decodeBody(body, format);\n        }\n        if (Utils.isArray(body)) {\n            return DeviceDetails.fromValuesArray(body);\n        }\n        else {\n            return DeviceDetails.fromValues(body);\n        }\n    };\n    DeviceDetails.fromValues = function (values) {\n        values.error = values.error && errorinfo_1.default.fromValues(values.error);\n        return Object.assign(new DeviceDetails(), values);\n    };\n    DeviceDetails.fromValuesArray = function (values) {\n        var count = values.length, result = new Array(count);\n        for (var i = 0; i < count; i++)\n            result[i] = DeviceDetails.fromValues(values[i]);\n        return result;\n    };\n    DeviceDetails.toRequestBody = Utils.encodeBody;\n    return DeviceDetails;\n}());\nexports.default = DeviceDetails;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __nested_webpack_require_490472__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_490472__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_490472__(1));\nvar PushChannelSubscription = /** @class */ (function () {\n    function PushChannelSubscription() {\n    }\n    /**\n     * Overload toJSON() to intercept JSON.stringify()\n     * @return {*}\n     */\n    PushChannelSubscription.prototype.toJSON = function () {\n        return {\n            channel: this.channel,\n            deviceId: this.deviceId,\n            clientId: this.clientId,\n        };\n    };\n    PushChannelSubscription.prototype.toString = function () {\n        var result = '[PushChannelSubscription';\n        if (this.channel)\n            result += '; channel=' + this.channel;\n        if (this.deviceId)\n            result += '; deviceId=' + this.deviceId;\n        if (this.clientId)\n            result += '; clientId=' + this.clientId;\n        result += ']';\n        return result;\n    };\n    PushChannelSubscription.fromResponseBody = function (body, format) {\n        if (format) {\n            body = Utils.decodeBody(body, format);\n        }\n        if (Utils.isArray(body)) {\n            return PushChannelSubscription.fromValuesArray(body);\n        }\n        else {\n            return PushChannelSubscription.fromValues(body);\n        }\n    };\n    PushChannelSubscription.fromValues = function (values) {\n        return Object.assign(new PushChannelSubscription(), values);\n    };\n    PushChannelSubscription.fromValuesArray = function (values) {\n        var count = values.length, result = new Array(count);\n        for (var i = 0; i < count; i++)\n            result[i] = PushChannelSubscription.fromValues(values[i]);\n        return result;\n    };\n    PushChannelSubscription.toRequestBody = Utils.encodeBody;\n    return PushChannelSubscription;\n}());\nexports.default = PushChannelSubscription;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __nested_webpack_require_492440__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_492440__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_492440__(1));\nvar MessageCount = /** @class */ (function () {\n    function MessageCount(values) {\n        this.count = (values && values.count) || 0;\n        this.data = (values && values.data) || 0;\n        this.uncompressedData = (values && values.uncompressedData) || 0;\n        this.failed = (values && values.failed) || 0;\n        this.refused = (values && values.refused) || 0;\n    }\n    return MessageCount;\n}());\nvar MessageCategory = /** @class */ (function (_super) {\n    tslib_1.__extends(MessageCategory, _super);\n    function MessageCategory(values) {\n        var _this = _super.call(this, values) || this;\n        if (values && values.category) {\n            _this.category = {};\n            Utils.forInOwnNonNullProperties(values.category, function (prop) {\n                _this.category[prop] = new MessageCount(values.category[prop]);\n            });\n        }\n        return _this;\n    }\n    return MessageCategory;\n}(MessageCount));\nvar ResourceCount = /** @class */ (function () {\n    function ResourceCount(values) {\n        this.peak = (values && values.peak) || 0;\n        this.min = (values && values.min) || 0;\n        this.mean = (values && values.mean) || 0;\n        this.opened = (values && values.opened) || 0;\n        this.refused = (values && values.refused) || 0;\n    }\n    return ResourceCount;\n}());\nvar RequestCount = /** @class */ (function () {\n    function RequestCount(values) {\n        this.succeeded = (values && values.succeeded) || 0;\n        this.failed = (values && values.failed) || 0;\n        this.refused = (values && values.refused) || 0;\n    }\n    return RequestCount;\n}());\nvar ConnectionTypes = /** @class */ (function () {\n    function ConnectionTypes(values) {\n        this.plain = new ResourceCount(values && values.plain);\n        this.tls = new ResourceCount(values && values.tls);\n        this.all = new ResourceCount(values && values.all);\n    }\n    return ConnectionTypes;\n}());\nvar MessageTypes = /** @class */ (function () {\n    function MessageTypes(values) {\n        this.messages = new MessageCategory(values && values.messages);\n        this.presence = new MessageCategory(values && values.presence);\n        this.all = new MessageCategory(values && values.all);\n    }\n    return MessageTypes;\n}());\nvar MessageTraffic = /** @class */ (function () {\n    function MessageTraffic(values) {\n        this.realtime = new MessageTypes(values && values.realtime);\n        this.rest = new MessageTypes(values && values.rest);\n        this.webhook = new MessageTypes(values && values.webhook);\n        this.sharedQueue = new MessageTypes(values && values.sharedQueue);\n        this.externalQueue = new MessageTypes(values && values.externalQueue);\n        this.httpEvent = new MessageTypes(values && values.httpEvent);\n        this.push = new MessageTypes(values && values.push);\n        this.all = new MessageTypes(values && values.all);\n    }\n    return MessageTraffic;\n}());\nvar MessageDirections = /** @class */ (function () {\n    function MessageDirections(values) {\n        this.all = new MessageTypes(values && values.all);\n        this.inbound = new MessageTraffic(values && values.inbound);\n        this.outbound = new MessageTraffic(values && values.outbound);\n    }\n    return MessageDirections;\n}());\nvar XchgMessages = /** @class */ (function () {\n    function XchgMessages(values) {\n        this.all = new MessageTypes(values && values.all);\n        this.producerPaid = new MessageDirections(values && values.producerPaid);\n        this.consumerPaid = new MessageDirections(values && values.consumerPaid);\n    }\n    return XchgMessages;\n}());\nvar PushStats = /** @class */ (function () {\n    function PushStats(values) {\n        this.messages = (values && values.messages) || 0;\n        var notifications = values && values.notifications;\n        this.notifications = {\n            invalid: (notifications && notifications.invalid) || 0,\n            attempted: (notifications && notifications.attempted) || 0,\n            successful: (notifications && notifications.successful) || 0,\n            failed: (notifications && notifications.failed) || 0,\n        };\n        this.directPublishes = (values && values.directPublishes) || 0;\n    }\n    return PushStats;\n}());\nvar ProcessedCount = /** @class */ (function () {\n    function ProcessedCount(values) {\n        this.succeeded = (values && values.succeeded) || 0;\n        this.skipped = (values && values.skipped) || 0;\n        this.failed = (values && values.failed) || 0;\n    }\n    return ProcessedCount;\n}());\nvar ProcessedMessages = /** @class */ (function () {\n    function ProcessedMessages(values) {\n        var _this = this;\n        this.delta = undefined;\n        if (values && values.delta) {\n            this.delta = {};\n            Utils.forInOwnNonNullProperties(values.delta, function (prop) {\n                _this.delta[prop] = new ProcessedCount(values.delta[prop]);\n            });\n        }\n    }\n    return ProcessedMessages;\n}());\nvar Stats = /** @class */ (function (_super) {\n    tslib_1.__extends(Stats, _super);\n    function Stats(values) {\n        var _this = _super.call(this, values) || this;\n        _this.persisted = new MessageTypes(values && values.persisted);\n        _this.connections = new ConnectionTypes(values && values.connections);\n        _this.channels = new ResourceCount(values && values.channels);\n        _this.apiRequests = new RequestCount(values && values.apiRequests);\n        _this.tokenRequests = new RequestCount(values && values.tokenRequests);\n        _this.xchgProducer = new XchgMessages(values && values.xchgProducer);\n        _this.xchgConsumer = new XchgMessages(values && values.xchgConsumer);\n        _this.push = new PushStats(values && values.pushStats);\n        _this.processed = new ProcessedMessages(values && values.processed);\n        _this.inProgress = (values && values.inProgress) || undefined;\n        _this.unit = (values && values.unit) || undefined;\n        _this.intervalId = (values && values.intervalId) || undefined;\n        return _this;\n    }\n    Stats.fromValues = function (values) {\n        return new Stats(values);\n    };\n    return Stats;\n}(MessageDirections));\nexports.default = Stats;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __nested_webpack_require_498876__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_498876__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_498876__(1));\nvar rest_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(30));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(2));\nvar connection_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(51));\nvar realtimechannel_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(38));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(8));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(4));\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(10));\nvar connectionmanager_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(35));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(3));\nvar message_1 = tslib_1.__importDefault(__nested_webpack_require_498876__(9));\nvar Realtime = /** @class */ (function (_super) {\n    tslib_1.__extends(Realtime, _super);\n    function Realtime(options) {\n        var _this = _super.call(this, options) || this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Realtime()', '');\n        _this.connection = new connection_1.default(_this, _this.options);\n        _this.channels = new Channels(_this);\n        if (options.autoConnect !== false)\n            _this.connect();\n        return _this;\n    }\n    Realtime.prototype.connect = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Realtime.connect()', '');\n        this.connection.connect();\n    };\n    Realtime.prototype.close = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Realtime.close()', '');\n        this.connection.close();\n    };\n    Realtime.Promise = function (options) {\n        options = defaults_1.default.objectifyOptions(options);\n        options.promises = true;\n        return new Realtime(options);\n    };\n    Realtime.Callbacks = Realtime;\n    Realtime.Utils = Utils;\n    Realtime.ConnectionManager = connectionmanager_1.default;\n    Realtime.Platform = platform_1.default;\n    Realtime.ProtocolMessage = protocolmessage_1.default;\n    Realtime.Message = message_1.default;\n    return Realtime;\n}(rest_1.default));\nvar Channels = /** @class */ (function (_super) {\n    tslib_1.__extends(Channels, _super);\n    function Channels(realtime) {\n        var _this = _super.call(this) || this;\n        _this.realtime = realtime;\n        _this.all = Object.create(null);\n        realtime.connection.connectionManager.on('transport.active', function () {\n            _this.onTransportActive();\n        });\n        return _this;\n    }\n    Channels.prototype.channelSerials = function () {\n        var serials = {};\n        for (var _i = 0, _a = Utils.keysArray(this.all, true); _i < _a.length; _i++) {\n            var name_1 = _a[_i];\n            var channel = this.all[name_1];\n            if (channel.properties.channelSerial) {\n                serials[name_1] = channel.properties.channelSerial;\n            }\n        }\n        return serials;\n    };\n    // recoverChannels gets the given channels and sets their channel serials.\n    Channels.prototype.recoverChannels = function (channelSerials) {\n        for (var _i = 0, _a = Utils.keysArray(channelSerials, true); _i < _a.length; _i++) {\n            var name_2 = _a[_i];\n            var channel = this.get(name_2);\n            channel.properties.channelSerial = channelSerials[name_2];\n        }\n    };\n    Channels.prototype.onChannelMessage = function (msg) {\n        var channelName = msg.channel;\n        if (channelName === undefined) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Channels.onChannelMessage()', 'received event unspecified channel, action = ' + msg.action);\n            return;\n        }\n        var channel = this.all[channelName];\n        if (!channel) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Channels.onChannelMessage()', 'received event for non-existent channel: ' + channelName);\n            return;\n        }\n        channel.onMessage(msg);\n    };\n    /* called when a transport becomes connected; reattempt attach/detach\n     * for channels that are attaching or detaching. */\n    Channels.prototype.onTransportActive = function () {\n        for (var channelName in this.all) {\n            var channel = this.all[channelName];\n            if (channel.state === 'attaching' || channel.state === 'detaching') {\n                channel.checkPendingState();\n            }\n            else if (channel.state === 'suspended') {\n                channel._attach(false, null);\n            }\n            else if (channel.state === 'attached') {\n                // Note explicity request the state, channel.attach() would do nothing\n                // as its already attached.\n                channel.requestState('attaching');\n            }\n        }\n    };\n    /* Connection interruptions (ie when the connection will no longer queue\n     * events) imply connection state changes for any channel which is either\n     * attached, pending, or will attempt to become attached in the future */\n    Channels.prototype.propogateConnectionInterruption = function (connectionState, reason) {\n        var connectionStateToChannelState = {\n            closing: 'detached',\n            closed: 'detached',\n            failed: 'failed',\n            suspended: 'suspended',\n        };\n        var fromChannelStates = ['attaching', 'attached', 'detaching', 'suspended'];\n        var toChannelState = connectionStateToChannelState[connectionState];\n        for (var channelId in this.all) {\n            var channel = this.all[channelId];\n            if (Utils.arrIn(fromChannelStates, channel.state)) {\n                channel.notifyState(toChannelState, reason);\n            }\n        }\n    };\n    Channels.prototype.get = function (name, channelOptions) {\n        name = String(name);\n        var channel = this.all[name];\n        if (!channel) {\n            channel = this.all[name] = new realtimechannel_1.default(this.realtime, name, channelOptions);\n        }\n        else if (channelOptions) {\n            if (channel._shouldReattachToSetOptions(channelOptions, channel.channelOptions)) {\n                throw new errorinfo_1.default('Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.', 40000, 400);\n            }\n            channel.setOptions(channelOptions);\n        }\n        return channel;\n    };\n    Channels.prototype.getDerived = function (name, deriveOptions, channelOptions) {\n        if (deriveOptions.filter) {\n            var filter = Utils.toBase64(deriveOptions.filter);\n            var match = Utils.matchDerivedChannel(name);\n            name = \"[filter=\".concat(filter).concat(match.qualifierParam, \"]\").concat(match.channelName);\n        }\n        return this.get(name, channelOptions);\n    };\n    /* Included to support certain niche use-cases; most users should ignore this.\n     * Please do not use this unless you know what you're doing */\n    Channels.prototype.release = function (name) {\n        name = String(name);\n        var channel = this.all[name];\n        if (!channel) {\n            return;\n        }\n        var releaseErr = channel.getReleaseErr();\n        if (releaseErr) {\n            throw releaseErr;\n        }\n        delete this.all[name];\n    };\n    return Channels;\n}(eventemitter_1.default));\nexports.default = Realtime;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __nested_webpack_require_506473__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_506473__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_506473__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_506473__(7));\nvar connectionmanager_1 = tslib_1.__importDefault(__nested_webpack_require_506473__(35));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_506473__(2));\nvar connectionstatechange_1 = tslib_1.__importDefault(__nested_webpack_require_506473__(37));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_506473__(3));\nfunction noop() { }\nvar Connection = /** @class */ (function (_super) {\n    tslib_1.__extends(Connection, _super);\n    function Connection(ably, options) {\n        var _this = _super.call(this) || this;\n        _this.whenState = (function (state, listener) {\n            return eventemitter_1.default.prototype.whenState.call(_this, state, _this.state, listener, new connectionstatechange_1.default(undefined, state));\n        });\n        _this.ably = ably;\n        _this.connectionManager = new connectionmanager_1.default(ably, options);\n        _this.state = _this.connectionManager.state.state;\n        _this.key = undefined;\n        _this.id = undefined;\n        _this.errorReason = null;\n        _this.connectionManager.on('connectionstate', function (stateChange) {\n            var state = (_this.state = stateChange.current);\n            platform_1.default.Config.nextTick(function () {\n                _this.emit(state, stateChange);\n            });\n        });\n        _this.connectionManager.on('update', function (stateChange) {\n            platform_1.default.Config.nextTick(function () {\n                _this.emit('update', stateChange);\n            });\n        });\n        return _this;\n    }\n    Connection.prototype.connect = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Connection.connect()', '');\n        this.connectionManager.requestState({ state: 'connecting' });\n    };\n    Connection.prototype.ping = function (callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Connection.ping()', '');\n        if (!callback) {\n            if (this.ably.options.promises) {\n                return Utils.promisify(this, 'ping', arguments);\n            }\n            callback = noop;\n        }\n        this.connectionManager.ping(null, callback);\n    };\n    Connection.prototype.close = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'Connection.close()', 'connectionKey = ' + this.key);\n        this.connectionManager.requestState({ state: 'closing' });\n    };\n    Object.defineProperty(Connection.prototype, \"recoveryKey\", {\n        get: function () {\n            return this.createRecoveryKey();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Connection.prototype.createRecoveryKey = function () {\n        return this.connectionManager.createRecoveryKey();\n    };\n    return Connection;\n}(eventemitter_1.default));\nexports.default = Connection;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __nested_webpack_require_509554__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PendingMessage = void 0;\nvar tslib_1 = __nested_webpack_require_509554__(0);\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_509554__(10));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_509554__(1));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_509554__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_509554__(2));\nvar messagequeue_1 = tslib_1.__importDefault(__nested_webpack_require_509554__(36));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_509554__(4));\nvar actions = protocolmessage_1.default.Action;\nvar PendingMessage = /** @class */ (function () {\n    function PendingMessage(message, callback) {\n        this.message = message;\n        this.callback = callback;\n        this.merged = false;\n        var action = message.action;\n        this.sendAttempted = false;\n        this.ackRequired = action == actions.MESSAGE || action == actions.PRESENCE;\n    }\n    return PendingMessage;\n}());\nexports.PendingMessage = PendingMessage;\nvar Protocol = /** @class */ (function (_super) {\n    tslib_1.__extends(Protocol, _super);\n    function Protocol(transport) {\n        var _this = _super.call(this) || this;\n        _this.transport = transport;\n        _this.messageQueue = new messagequeue_1.default();\n        transport.on('ack', function (serial, count) {\n            _this.onAck(serial, count);\n        });\n        transport.on('nack', function (serial, count, err) {\n            _this.onNack(serial, count, err);\n        });\n        return _this;\n    }\n    Protocol.prototype.onAck = function (serial, count) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Protocol.onAck()', 'serial = ' + serial + '; count = ' + count);\n        this.messageQueue.completeMessages(serial, count);\n    };\n    Protocol.prototype.onNack = function (serial, count, err) {\n        logger_1.default.logAction(logger_1.default.LOG_ERROR, 'Protocol.onNack()', 'serial = ' + serial + '; count = ' + count + '; err = ' + Utils.inspectError(err));\n        if (!err) {\n            err = new errorinfo_1.default('Unable to send message; channel not responding', 50001, 500);\n        }\n        this.messageQueue.completeMessages(serial, count, err);\n    };\n    Protocol.prototype.onceIdle = function (listener) {\n        var messageQueue = this.messageQueue;\n        if (messageQueue.count() === 0) {\n            listener();\n            return;\n        }\n        messageQueue.once('idle', listener);\n    };\n    Protocol.prototype.send = function (pendingMessage) {\n        if (pendingMessage.ackRequired) {\n            this.messageQueue.push(pendingMessage);\n        }\n        if (logger_1.default.shouldLog(logger_1.default.LOG_MICRO)) {\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'Protocol.send()', 'sending msg; ' + protocolmessage_1.default.stringify(pendingMessage.message));\n        }\n        pendingMessage.sendAttempted = true;\n        this.transport.send(pendingMessage.message);\n    };\n    Protocol.prototype.getTransport = function () {\n        return this.transport;\n    };\n    Protocol.prototype.getPendingMessages = function () {\n        return this.messageQueue.copyAll();\n    };\n    Protocol.prototype.clearPendingMessages = function () {\n        return this.messageQueue.clear();\n    };\n    Protocol.prototype.finish = function () {\n        var transport = this.transport;\n        this.onceIdle(function () {\n            transport.disconnect();\n        });\n    };\n    return Protocol;\n}(eventemitter_1.default));\nexports.default = Protocol;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __nested_webpack_require_513204__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_513204__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(3));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_513204__(1));\nvar transport_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(26));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(8));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(2));\nvar protocolmessage_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(10));\nvar errorinfo_1 = tslib_1.__importDefault(__nested_webpack_require_513204__(4));\nvar shortName = 'web_socket';\nfunction isNodeWebSocket(ws) {\n    return !!ws.on;\n}\nvar WebSocketTransport = /** @class */ (function (_super) {\n    tslib_1.__extends(WebSocketTransport, _super);\n    function WebSocketTransport(connectionManager, auth, params) {\n        var _this = _super.call(this, connectionManager, auth, params) || this;\n        _this.shortName = shortName;\n        /* If is a browser, can't detect pings, so request protocol heartbeats */\n        params.heartbeats = platform_1.default.Config.useProtocolHeartbeats;\n        _this.wsHost = defaults_1.default.getHost(params.options, params.host, true);\n        return _this;\n    }\n    WebSocketTransport.isAvailable = function () {\n        return !!platform_1.default.Config.WebSocket;\n    };\n    WebSocketTransport.prototype.createWebSocket = function (uri, connectParams) {\n        this.uri = uri + Utils.toQueryString(connectParams);\n        return new platform_1.default.Config.WebSocket(this.uri);\n    };\n    WebSocketTransport.prototype.toString = function () {\n        return 'WebSocketTransport; uri=' + this.uri;\n    };\n    WebSocketTransport.prototype.connect = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.connect()', 'starting');\n        transport_1.default.prototype.connect.call(this);\n        var self = this, params = this.params, options = params.options;\n        var wsScheme = options.tls ? 'wss://' : 'ws://';\n        var wsUri = wsScheme + this.wsHost + ':' + defaults_1.default.getPort(options) + '/';\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.connect()', 'uri: ' + wsUri);\n        this.auth.getAuthParams(function (err, authParams) {\n            if (self.isDisposed) {\n                return;\n            }\n            var paramStr = '';\n            for (var param in authParams)\n                paramStr += ' ' + param + ': ' + authParams[param] + ';';\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.connect()', 'authParams:' + paramStr + ' err: ' + err);\n            if (err) {\n                self.disconnect(err);\n                return;\n            }\n            var connectParams = params.getConnectParams(authParams);\n            try {\n                var wsConnection = (self.wsConnection = self.createWebSocket(wsUri, connectParams));\n                wsConnection.binaryType = platform_1.default.Config.binaryType;\n                wsConnection.onopen = function () {\n                    self.onWsOpen();\n                };\n                wsConnection.onclose = function (ev) {\n                    self.onWsClose(ev);\n                };\n                wsConnection.onmessage = function (ev) {\n                    self.onWsData(ev.data);\n                };\n                wsConnection.onerror = function (ev) {\n                    self.onWsError(ev);\n                };\n                if (isNodeWebSocket(wsConnection)) {\n                    /* node; browsers currently don't have a general eventemitter and can't detect\n                     * pings. Also, no need to reply with a pong explicitly, ws lib handles that */\n                    wsConnection.on('ping', function () {\n                        self.onActivity();\n                    });\n                }\n            }\n            catch (e) {\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'WebSocketTransport.connect()', 'Unexpected exception creating websocket: err = ' + (e.stack || e.message));\n                self.disconnect(e);\n            }\n        });\n    };\n    WebSocketTransport.prototype.send = function (message) {\n        var wsConnection = this.wsConnection;\n        if (!wsConnection) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'WebSocketTransport.send()', 'No socket connection');\n            return;\n        }\n        try {\n            wsConnection.send(protocolmessage_1.default.serialize(message, this.params.format));\n        }\n        catch (e) {\n            var msg = 'Exception from ws connection when trying to send: ' + Utils.inspectError(e);\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'WebSocketTransport.send()', msg);\n            /* Don't try to request a disconnect, that'll just involve sending data\n             * down the websocket again. Just finish the transport. */\n            this.finish('disconnected', new errorinfo_1.default(msg, 50000, 500));\n        }\n    };\n    WebSocketTransport.prototype.onWsData = function (data) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'WebSocketTransport.onWsData()', 'data received; length = ' + data.length + '; type = ' + typeof data);\n        try {\n            this.onProtocolMessage(protocolmessage_1.default.deserialize(data, this.format));\n        }\n        catch (e) {\n            logger_1.default.logAction(logger_1.default.LOG_ERROR, 'WebSocketTransport.onWsData()', 'Unexpected exception handing channel message: ' + e.stack);\n        }\n    };\n    WebSocketTransport.prototype.onWsOpen = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.onWsOpen()', 'opened WebSocket');\n        this.emit('preconnect');\n    };\n    WebSocketTransport.prototype.onWsClose = function (ev) {\n        var wasClean, code;\n        if (typeof ev == 'object') {\n            /* W3C spec-compatible */\n            code = ev.code;\n            // ev.wasClean is undefined in reactnative\n            wasClean = ev.wasClean || code === 1000;\n        } /*if(typeof(ev) == 'number')*/\n        else {\n            /* ws in node */\n            code = ev;\n            wasClean = code == 1000;\n        }\n        delete this.wsConnection;\n        if (wasClean) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.onWsClose()', 'Cleanly closed WebSocket');\n            var err = new errorinfo_1.default('Websocket closed', 80003, 400);\n            this.finish('disconnected', err);\n        }\n        else {\n            var msg = 'Unclean disconnection of WebSocket ; code = ' + code, err = new errorinfo_1.default(msg, 80003, 400);\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.onWsClose()', msg);\n            this.finish('disconnected', err);\n        }\n        this.emit('disposed');\n    };\n    WebSocketTransport.prototype.onWsError = function (err) {\n        var _this = this;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.onError()', 'Error from WebSocket: ' + err.message);\n        /* Wait a tick before aborting: if the websocket was connected, this event\n         * will be immediately followed by an onclose event with a close code. Allow\n         * that to close it (so we see the close code) rather than anticipating it */\n        platform_1.default.Config.nextTick(function () {\n            _this.disconnect(Error(err.message));\n        });\n    };\n    WebSocketTransport.prototype.dispose = function () {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'WebSocketTransport.dispose()', '');\n        this.isDisposed = true;\n        var wsConnection = this.wsConnection;\n        if (wsConnection) {\n            /* Ignore any messages that come through after dispose() is called but before\n             * websocket is actually closed. (mostly would be harmless, but if it's a\n             * CONNECTED, it'll re-tick isConnected and cause all sorts of havoc) */\n            wsConnection.onmessage = function () { };\n            delete this.wsConnection;\n            /* defer until the next event loop cycle before closing the socket,\n             * giving some implementations the opportunity to send any outstanding close message */\n            platform_1.default.Config.nextTick(function () {\n                logger_1.default.logAction(logger_1.default.LOG_MICRO, 'WebSocketTransport.dispose()', 'closing websocket');\n                if (!wsConnection) {\n                    throw new Error('WebSocketTransport.dispose(): wsConnection is not defined');\n                }\n                wsConnection.close();\n            });\n        }\n    };\n    return WebSocketTransport;\n}(transport_1.default));\nfunction initialiseTransport(connectionManager) {\n    if (WebSocketTransport.isAvailable())\n        connectionManager.supportedTransports[shortName] = WebSocketTransport;\n    return WebSocketTransport;\n}\nexports.default = initialiseTransport;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __nested_webpack_require_522322__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_522322__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_522322__(1));\nvar presence_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(34));\nvar eventemitter_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(7));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(2));\nvar presencemessage_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(15));\nvar errorinfo_1 = tslib_1.__importStar(__nested_webpack_require_522322__(4));\nvar realtimechannel_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(38));\nvar multicaster_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(23));\nvar channelstatechange_1 = tslib_1.__importDefault(__nested_webpack_require_522322__(39));\nvar noop = function () { };\nfunction getClientId(realtimePresence) {\n    return realtimePresence.channel.realtime.auth.clientId;\n}\nfunction isAnonymousOrWildcard(realtimePresence) {\n    var realtime = realtimePresence.channel.realtime;\n    /* If not currently connected, we can't assume that we're an anonymous\n     * client, as realtime may inform us of our clientId in the CONNECTED\n     * message. So assume we're not anonymous and leave it to realtime to\n     * return an error if we are */\n    var clientId = realtime.auth.clientId;\n    return (!clientId || clientId === '*') && realtime.connection.state === 'connected';\n}\n/* Callback is called only in the event of an error */\nfunction waitAttached(channel, callback, action) {\n    switch (channel.state) {\n        case 'attached':\n        case 'suspended':\n            action();\n            break;\n        case 'initialized':\n        case 'detached':\n        case 'detaching':\n        case 'attaching':\n            channel.attach(function (err) {\n                if (err)\n                    callback(err);\n                else\n                    action();\n            });\n            break;\n        default:\n            callback(errorinfo_1.default.fromValues(channel.invalidStateError()));\n    }\n}\nfunction newerThan(item, existing) {\n    /* RTP2b1: if either is synthesised, compare by timestamp */\n    if (item.isSynthesized() || existing.isSynthesized()) {\n        // RTP2b1a: if equal, prefer the newly-arrived one\n        return item.timestamp >= existing.timestamp;\n    }\n    /* RTP2b2 */\n    var itemOrderings = item.parseId(), existingOrderings = existing.parseId();\n    if (itemOrderings.msgSerial === existingOrderings.msgSerial) {\n        return itemOrderings.index > existingOrderings.index;\n    }\n    else {\n        return itemOrderings.msgSerial > existingOrderings.msgSerial;\n    }\n}\nvar RealtimePresence = /** @class */ (function (_super) {\n    tslib_1.__extends(RealtimePresence, _super);\n    function RealtimePresence(channel) {\n        var _this = _super.call(this, channel) || this;\n        _this.channel = channel;\n        _this.syncComplete = false;\n        _this.members = new PresenceMap(_this, function (item) { return item.clientId + ':' + item.connectionId; });\n        // RTP17h: Store own members by clientId only.\n        _this._myMembers = new PresenceMap(_this, function (item) { return item.clientId; });\n        _this.subscriptions = new eventemitter_1.default();\n        _this.pendingPresence = [];\n        return _this;\n    }\n    RealtimePresence.prototype.enter = function (data, callback) {\n        if (isAnonymousOrWildcard(this)) {\n            throw new errorinfo_1.default('clientId must be specified to enter a presence channel', 40012, 400);\n        }\n        return this._enterOrUpdateClient(undefined, undefined, data, 'enter', callback);\n    };\n    RealtimePresence.prototype.update = function (data, callback) {\n        if (isAnonymousOrWildcard(this)) {\n            throw new errorinfo_1.default('clientId must be specified to update presence data', 40012, 400);\n        }\n        return this._enterOrUpdateClient(undefined, undefined, data, 'update', callback);\n    };\n    RealtimePresence.prototype.enterClient = function (clientId, data, callback) {\n        return this._enterOrUpdateClient(undefined, clientId, data, 'enter', callback);\n    };\n    RealtimePresence.prototype.updateClient = function (clientId, data, callback) {\n        return this._enterOrUpdateClient(undefined, clientId, data, 'update', callback);\n    };\n    RealtimePresence.prototype._enterOrUpdateClient = function (id, clientId, data, action, callback) {\n        var _this = this;\n        if (!callback) {\n            if (typeof data === 'function') {\n                callback = data;\n                data = null;\n            }\n            else {\n                if (this.channel.realtime.options.promises) {\n                    return Utils.promisify(this, '_enterOrUpdateClient', [id, clientId, data, action]);\n                }\n                callback = noop;\n            }\n        }\n        var channel = this.channel;\n        if (!channel.connectionManager.activeState()) {\n            callback(channel.connectionManager.getError());\n            return;\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence.' + action + 'Client()', 'channel = ' + channel.name + ', id = ' + id + ', client = ' + (clientId || '(implicit) ' + getClientId(this)));\n        var presence = presencemessage_1.default.fromData(data);\n        presence.action = action;\n        if (id) {\n            presence.id = id;\n        }\n        if (clientId) {\n            presence.clientId = clientId;\n        }\n        presencemessage_1.default.encode(presence, channel.channelOptions, function (err) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            switch (channel.state) {\n                case 'attached':\n                    channel.sendPresence(presence, callback);\n                    break;\n                case 'initialized':\n                case 'detached':\n                    channel.attach();\n                // eslint-disable-next-line no-fallthrough\n                case 'attaching':\n                    _this.pendingPresence.push({\n                        presence: presence,\n                        callback: callback,\n                    });\n                    break;\n                default:\n                    err = new errorinfo_1.PartialErrorInfo('Unable to ' + action + ' presence channel while in ' + channel.state + ' state', 90001);\n                    err.code = 90001;\n                    callback(err);\n            }\n        });\n    };\n    RealtimePresence.prototype.leave = function (data, callback) {\n        if (isAnonymousOrWildcard(this)) {\n            throw new errorinfo_1.default('clientId must have been specified to enter or leave a presence channel', 40012, 400);\n        }\n        return this.leaveClient(undefined, data, callback);\n    };\n    RealtimePresence.prototype.leaveClient = function (clientId, data, callback) {\n        if (!callback) {\n            if (typeof data === 'function') {\n                callback = data;\n                data = null;\n            }\n            else {\n                if (this.channel.realtime.options.promises) {\n                    return Utils.promisify(this, 'leaveClient', [clientId, data]);\n                }\n                callback = noop;\n            }\n        }\n        var channel = this.channel;\n        if (!channel.connectionManager.activeState()) {\n            callback === null || callback === void 0 ? void 0 : callback(channel.connectionManager.getError());\n            return;\n        }\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence.leaveClient()', 'leaving; channel = ' + this.channel.name + ', client = ' + clientId);\n        var presence = presencemessage_1.default.fromData(data);\n        presence.action = 'leave';\n        if (clientId) {\n            presence.clientId = clientId;\n        }\n        switch (channel.state) {\n            case 'attached':\n                channel.sendPresence(presence, callback);\n                break;\n            case 'attaching':\n                this.pendingPresence.push({\n                    presence: presence,\n                    callback: callback,\n                });\n                break;\n            case 'initialized':\n            case 'failed': {\n                /* we're not attached; therefore we let any entered status\n                 * timeout by itself instead of attaching just in order to leave */\n                var err = new errorinfo_1.PartialErrorInfo('Unable to leave presence channel (incompatible state)', 90001);\n                callback === null || callback === void 0 ? void 0 : callback(err);\n                break;\n            }\n            default:\n                callback === null || callback === void 0 ? void 0 : callback(channel.invalidStateError());\n        }\n    };\n    // Return type is any to avoid conflict with base Presence class\n    RealtimePresence.prototype.get = function (params, callback) {\n        var _this = this;\n        var args = Array.prototype.slice.call(arguments);\n        if (args.length == 1 && typeof args[0] == 'function')\n            args.unshift(null);\n        params = args[0];\n        callback = args[1];\n        var waitForSync = !params || ('waitForSync' in params ? params.waitForSync : true);\n        if (!callback) {\n            if (this.channel.realtime.options.promises) {\n                return Utils.promisify(this, 'get', args);\n            }\n            callback = noop;\n        }\n        function returnMembers(members) {\n            callback(null, params ? members.list(params) : members.values());\n        }\n        /* Special-case the suspended state: can still get (stale) presence set if waitForSync is false */\n        if (this.channel.state === 'suspended') {\n            if (waitForSync) {\n                callback(errorinfo_1.default.fromValues({\n                    statusCode: 400,\n                    code: 91005,\n                    message: 'Presence state is out of sync due to channel being in the SUSPENDED state',\n                }));\n            }\n            else {\n                returnMembers(this.members);\n            }\n            return;\n        }\n        waitAttached(this.channel, callback, function () {\n            var members = _this.members;\n            if (waitForSync) {\n                members.waitSync(function () {\n                    returnMembers(members);\n                });\n            }\n            else {\n                returnMembers(members);\n            }\n        });\n    };\n    RealtimePresence.prototype.history = function (params, callback) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence.history()', 'channel = ' + this.name);\n        /* params and callback are optional; see if params contains the callback */\n        if (callback === undefined) {\n            if (typeof params == 'function') {\n                callback = params;\n                params = null;\n            }\n            else {\n                if (this.channel.realtime.options.promises) {\n                    return Utils.promisify(this, 'history', arguments);\n                }\n                callback = noop;\n            }\n        }\n        if (params && params.untilAttach) {\n            if (this.channel.state === 'attached') {\n                delete params.untilAttach;\n                params.from_serial = this.channel.properties.attachSerial;\n            }\n            else {\n                callback(new errorinfo_1.default('option untilAttach requires the channel to be attached, was: ' + this.channel.state, 40000, 400));\n            }\n        }\n        presence_1.default.prototype._history.call(this, params, callback);\n    };\n    RealtimePresence.prototype.setPresence = function (presenceSet, isSync, syncChannelSerial) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence.setPresence()', 'received presence for ' + presenceSet.length + ' participants; syncChannelSerial = ' + syncChannelSerial);\n        var syncCursor, match;\n        var members = this.members, myMembers = this._myMembers, broadcastMessages = [], connId = this.channel.connectionManager.connectionId;\n        if (isSync) {\n            this.members.startSync();\n            if (syncChannelSerial && (match = syncChannelSerial.match(/^[\\w-]+:(.*)$/))) {\n                syncCursor = match[1];\n            }\n        }\n        for (var i = 0; i < presenceSet.length; i++) {\n            var presence = presencemessage_1.default.fromValues(presenceSet[i]);\n            switch (presence.action) {\n                case 'leave':\n                    if (members.remove(presence)) {\n                        broadcastMessages.push(presence);\n                    }\n                    if (presence.connectionId === connId && !presence.isSynthesized()) {\n                        myMembers.remove(presence);\n                    }\n                    break;\n                case 'enter':\n                case 'present':\n                case 'update':\n                    if (members.put(presence)) {\n                        broadcastMessages.push(presence);\n                    }\n                    if (presence.connectionId === connId) {\n                        myMembers.put(presence);\n                    }\n                    break;\n            }\n        }\n        /* if this is the last (or only) message in a sequence of sync updates, end the sync */\n        if (isSync && !syncCursor) {\n            members.endSync();\n            this.channel.syncChannelSerial = null;\n        }\n        /* broadcast to listeners */\n        for (var i = 0; i < broadcastMessages.length; i++) {\n            var presence = broadcastMessages[i];\n            this.subscriptions.emit(presence.action, presence);\n        }\n    };\n    RealtimePresence.prototype.onAttached = function (hasPresence) {\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimePresence.onAttached()', 'channel = ' + this.channel.name + ', hasPresence = ' + hasPresence);\n        if (hasPresence) {\n            this.members.startSync();\n        }\n        else {\n            this._synthesizeLeaves(this.members.values());\n            this.members.clear();\n        }\n        // RTP17f: Re-enter own members when moving into the attached state.\n        this._ensureMyMembersPresent();\n        /* NB this must be after the _ensureMyMembersPresent call, which may add items to pendingPresence */\n        var pendingPresence = this.pendingPresence, pendingPresCount = pendingPresence.length;\n        if (pendingPresCount) {\n            this.pendingPresence = [];\n            var presenceArray = [];\n            var multicaster = multicaster_1.default.create();\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence.onAttached', 'sending ' + pendingPresCount + ' queued presence messages');\n            for (var i = 0; i < pendingPresCount; i++) {\n                var event_1 = pendingPresence[i];\n                presenceArray.push(event_1.presence);\n                multicaster.push(event_1.callback);\n            }\n            this.channel.sendPresence(presenceArray, multicaster);\n        }\n    };\n    RealtimePresence.prototype.actOnChannelState = function (state, hasPresence, err) {\n        switch (state) {\n            case 'attached':\n                this.onAttached(hasPresence);\n                break;\n            case 'detached':\n            case 'failed':\n                this._clearMyMembers();\n                this.members.clear();\n            /* falls through */\n            case 'suspended':\n                this.failPendingPresence(err);\n                break;\n        }\n    };\n    RealtimePresence.prototype.failPendingPresence = function (err) {\n        if (this.pendingPresence.length) {\n            logger_1.default.logAction(logger_1.default.LOG_MINOR, 'RealtimeChannel.failPendingPresence', 'channel; name = ' + this.channel.name + ', err = ' + Utils.inspectError(err));\n            for (var i = 0; i < this.pendingPresence.length; i++)\n                try {\n                    this.pendingPresence[i].callback(err);\n                    // eslint-disable-next-line no-empty\n                }\n                catch (e) { }\n            this.pendingPresence = [];\n        }\n    };\n    RealtimePresence.prototype._clearMyMembers = function () {\n        this._myMembers.clear();\n    };\n    RealtimePresence.prototype._ensureMyMembersPresent = function () {\n        var _this = this;\n        var myMembers = this._myMembers, reenterCb = function (err) {\n            if (err) {\n                var msg = 'Presence auto-re-enter failed: ' + err.toString();\n                var wrappedErr = new errorinfo_1.default(msg, 91004, 400);\n                logger_1.default.logAction(logger_1.default.LOG_ERROR, 'RealtimePresence._ensureMyMembersPresent()', msg);\n                var change = new channelstatechange_1.default(_this.channel.state, _this.channel.state, true, false, wrappedErr);\n                _this.channel.emit('update', change);\n            }\n        };\n        for (var memberKey in myMembers.map) {\n            var entry = myMembers.map[memberKey];\n            logger_1.default.logAction(logger_1.default.LOG_MICRO, 'RealtimePresence._ensureMyMembersPresent()', 'Auto-reentering clientId \"' + entry.clientId + '\" into the presence set');\n            // RTP17g: Send ENTER containing the member id, clientId and data\n            // attributes.\n            this._enterOrUpdateClient(entry.id, entry.clientId, entry.data, 'enter', reenterCb);\n        }\n    };\n    RealtimePresence.prototype._synthesizeLeaves = function (items) {\n        var subscriptions = this.subscriptions;\n        Utils.arrForEach(items, function (item) {\n            var presence = presencemessage_1.default.fromValues({\n                action: 'leave',\n                connectionId: item.connectionId,\n                clientId: item.clientId,\n                data: item.data,\n                encoding: item.encoding,\n                timestamp: Utils.now(),\n            });\n            subscriptions.emit('leave', presence);\n        });\n    };\n    /* Deprecated */\n    RealtimePresence.prototype.on = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        logger_1.default.deprecated('presence.on', 'presence.subscribe');\n        this.subscribe.apply(this, args);\n    };\n    /* Deprecated */\n    RealtimePresence.prototype.off = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        logger_1.default.deprecated('presence.off', 'presence.unsubscribe');\n        this.unsubscribe.apply(this, args);\n    };\n    RealtimePresence.prototype.subscribe = function () {\n        var _args = []; /* [event], listener, [callback] */\n        for (var _i = 0 /* [event], listener, [callback] */; _i < arguments.length /* [event], listener, [callback] */; _i++ /* [event], listener, [callback] */) {\n            _args[_i] = arguments[_i]; /* [event], listener, [callback] */\n        }\n        var args = realtimechannel_1.default.processListenerArgs(_args);\n        var event = args[0];\n        var listener = args[1];\n        var callback = args[2];\n        var channel = this.channel;\n        if (!callback) {\n            if (this.channel.realtime.options.promises) {\n                return Utils.promisify(this, 'subscribe', [event, listener]);\n            }\n            callback = noop;\n        }\n        if (channel.state === 'failed') {\n            callback(errorinfo_1.default.fromValues(channel.invalidStateError()));\n            return;\n        }\n        this.subscriptions.on(event, listener);\n        channel.attach(callback);\n    };\n    RealtimePresence.prototype.unsubscribe = function () {\n        var _args = []; /* [event], listener */\n        for (var _i = 0 /* [event], listener */; _i < arguments.length /* [event], listener */; _i++ /* [event], listener */) {\n            _args[_i] = arguments[_i]; /* [event], listener */\n        }\n        var args = realtimechannel_1.default.processListenerArgs(_args);\n        var event = args[0];\n        var listener = args[1];\n        this.subscriptions.off(event, listener);\n    };\n    return RealtimePresence;\n}(presence_1.default));\nvar PresenceMap = /** @class */ (function (_super) {\n    tslib_1.__extends(PresenceMap, _super);\n    function PresenceMap(presence, memberKey) {\n        var _this = _super.call(this) || this;\n        _this.presence = presence;\n        _this.map = Object.create(null);\n        _this.syncInProgress = false;\n        _this.residualMembers = null;\n        _this.memberKey = memberKey;\n        return _this;\n    }\n    PresenceMap.prototype.get = function (key) {\n        return this.map[key];\n    };\n    PresenceMap.prototype.getClient = function (clientId) {\n        var map = this.map, result = [];\n        for (var key in map) {\n            var item = map[key];\n            if (item.clientId == clientId && item.action != 'absent')\n                result.push(item);\n        }\n        return result;\n    };\n    PresenceMap.prototype.list = function (params) {\n        var map = this.map, clientId = params && params.clientId, connectionId = params && params.connectionId, result = [];\n        for (var key in map) {\n            var item = map[key];\n            if (item.action === 'absent')\n                continue;\n            if (clientId && clientId != item.clientId)\n                continue;\n            if (connectionId && connectionId != item.connectionId)\n                continue;\n            result.push(item);\n        }\n        return result;\n    };\n    PresenceMap.prototype.put = function (item) {\n        if (item.action === 'enter' || item.action === 'update') {\n            item = presencemessage_1.default.fromValues(item);\n            item.action = 'present';\n        }\n        var map = this.map, key = this.memberKey(item);\n        /* we've seen this member, so do not remove it at the end of sync */\n        if (this.residualMembers)\n            delete this.residualMembers[key];\n        /* compare the timestamp of the new item with any existing member (or ABSENT witness) */\n        var existingItem = map[key];\n        if (existingItem && !newerThan(item, existingItem)) {\n            return false;\n        }\n        map[key] = item;\n        return true;\n    };\n    PresenceMap.prototype.values = function () {\n        var map = this.map, result = [];\n        for (var key in map) {\n            var item = map[key];\n            if (item.action != 'absent')\n                result.push(item);\n        }\n        return result;\n    };\n    PresenceMap.prototype.remove = function (item) {\n        var map = this.map, key = this.memberKey(item);\n        var existingItem = map[key];\n        if (existingItem && !newerThan(item, existingItem)) {\n            return false;\n        }\n        /* RTP2f */\n        if (this.syncInProgress) {\n            item = presencemessage_1.default.fromValues(item);\n            item.action = 'absent';\n            map[key] = item;\n        }\n        else {\n            delete map[key];\n        }\n        return true;\n    };\n    PresenceMap.prototype.startSync = function () {\n        var map = this.map, syncInProgress = this.syncInProgress;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'PresenceMap.startSync()', 'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress);\n        /* we might be called multiple times while a sync is in progress */\n        if (!this.syncInProgress) {\n            this.residualMembers = Utils.copy(map);\n            this.setInProgress(true);\n        }\n    };\n    PresenceMap.prototype.endSync = function () {\n        var map = this.map, syncInProgress = this.syncInProgress;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'PresenceMap.endSync()', 'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress);\n        if (syncInProgress) {\n            /* we can now strip out the ABSENT members, as we have\n             * received all of the out-of-order sync messages */\n            for (var memberKey in map) {\n                var entry = map[memberKey];\n                if (entry.action === 'absent') {\n                    delete map[memberKey];\n                }\n            }\n            /* any members that were present at the start of the sync,\n             * and have not been seen in sync, can be removed, and leave events emitted */\n            this.presence._synthesizeLeaves(Utils.valuesArray(this.residualMembers));\n            for (var memberKey in this.residualMembers) {\n                delete map[memberKey];\n            }\n            this.residualMembers = null;\n            /* finish, notifying any waiters */\n            this.setInProgress(false);\n        }\n        this.emit('sync');\n    };\n    PresenceMap.prototype.waitSync = function (callback) {\n        var syncInProgress = this.syncInProgress;\n        logger_1.default.logAction(logger_1.default.LOG_MINOR, 'PresenceMap.waitSync()', 'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress);\n        if (!syncInProgress) {\n            callback();\n            return;\n        }\n        this.once('sync', callback);\n    };\n    PresenceMap.prototype.clear = function () {\n        this.map = {};\n        this.setInProgress(false);\n        this.residualMembers = null;\n    };\n    PresenceMap.prototype.setInProgress = function (inProgress) {\n        logger_1.default.logAction(logger_1.default.LOG_MICRO, 'PresenceMap.setInProgress()', 'inProgress = ' + inProgress);\n        this.syncInProgress = inProgress;\n        this.presence.syncComplete = !inProgress;\n    };\n    return PresenceMap;\n}(eventemitter_1.default));\nexports.default = RealtimePresence;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __nested_webpack_require_548181__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_548181__(0);\nvar enc_hex_1 = __nested_webpack_require_548181__(56);\nvar enc_utf8_1 = __nested_webpack_require_548181__(31);\nvar enc_base64_1 = __nested_webpack_require_548181__(11);\nvar lib_typedarrays_1 = tslib_1.__importDefault(__nested_webpack_require_548181__(5));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_548181__(3));\nvar BufferUtils = /** @class */ (function () {\n    function BufferUtils() {\n        this.base64CharSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        this.hexCharSet = '0123456789abcdef';\n    }\n    BufferUtils.prototype.isWordArray = function (ob) {\n        return ob !== null && ob !== undefined && ob.sigBytes !== undefined;\n    };\n    BufferUtils.prototype.isArrayBuffer = function (ob) {\n        return ob !== null && ob !== undefined && ob.constructor === ArrayBuffer;\n    };\n    BufferUtils.prototype.isTypedArray = function (ob) {\n        return !!ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(ob);\n    };\n    // // https://gist.githubusercontent.com/jonleighton/958841/raw/f200e30dfe95212c0165ccf1ae000ca51e9de803/gistfile1.js\n    BufferUtils.prototype.uint8ViewToBase64 = function (bytes) {\n        var base64 = '';\n        var encodings = this.base64CharSet;\n        var byteLength = bytes.byteLength;\n        var byteRemainder = byteLength % 3;\n        var mainLength = byteLength - byteRemainder;\n        var a, b, c, d;\n        var chunk;\n        // Main loop deals with bytes in chunks of 3\n        for (var i = 0; i < mainLength; i = i + 3) {\n            // Combine the three bytes into a single integer\n            chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n            // Use bitmasks to extract 6-bit segments from the triplet\n            a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n            b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n            c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n            d = chunk & 63; // 63       = 2^6 - 1\n            // Convert the raw binary segments to the appropriate ASCII encoding\n            base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n        }\n        // Deal with the remaining bytes and padding\n        if (byteRemainder == 1) {\n            chunk = bytes[mainLength];\n            a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n            // Set the 4 least significant bits to zero\n            b = (chunk & 3) << 4; // 3   = 2^2 - 1\n            base64 += encodings[a] + encodings[b] + '==';\n        }\n        else if (byteRemainder == 2) {\n            chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n            a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n            b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n            // Set the 2 least significant bits to zero\n            c = (chunk & 15) << 2; // 15    = 2^4 - 1\n            base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n        }\n        return base64;\n    };\n    BufferUtils.prototype.base64ToArrayBuffer = function (base64) {\n        var binary_string = atob === null || atob === void 0 ? void 0 : atob(base64); // this will always be defined in browser so it's safe to cast\n        var len = binary_string.length;\n        var bytes = new Uint8Array(len);\n        for (var i = 0; i < len; i++) {\n            var ascii = binary_string.charCodeAt(i);\n            bytes[i] = ascii;\n        }\n        return bytes.buffer;\n    };\n    BufferUtils.prototype.isBuffer = function (buffer) {\n        return this.isArrayBuffer(buffer) || this.isWordArray(buffer) || this.isTypedArray(buffer);\n    };\n    /* In browsers, returns a Uint8Array */\n    BufferUtils.prototype.toBuffer = function (buffer) {\n        if (!ArrayBuffer) {\n            throw new Error(\"Can't convert to Buffer: browser does not support the necessary types\");\n        }\n        if (this.isArrayBuffer(buffer)) {\n            return new Uint8Array(buffer);\n        }\n        if (this.isTypedArray(buffer)) {\n            return new Uint8Array(buffer.buffer);\n        }\n        if (this.isWordArray(buffer)) {\n            /* Backported from unreleased CryptoJS\n             * https://code.google.com/p/crypto-js/source/browse/branches/3.x/src/lib-typedarrays.js?r=661 */\n            var arrayBuffer = new ArrayBuffer(buffer.sigBytes);\n            var uint8View = new Uint8Array(arrayBuffer);\n            for (var i = 0; i < buffer.sigBytes; i++) {\n                uint8View[i] = (buffer.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n            }\n            return uint8View;\n        }\n        throw new Error('BufferUtils.toBuffer expected an arraybuffer, typed array, or CryptoJS wordarray');\n    };\n    BufferUtils.prototype.toArrayBuffer = function (buffer) {\n        if (this.isArrayBuffer(buffer)) {\n            return buffer;\n        }\n        return this.toBuffer(buffer).buffer;\n    };\n    BufferUtils.prototype.toWordArray = function (buffer) {\n        if (this.isTypedArray(buffer)) {\n            buffer = buffer.buffer;\n        }\n        return this.isWordArray(buffer) ? buffer : lib_typedarrays_1.default.create(buffer);\n    };\n    BufferUtils.prototype.base64Encode = function (buffer) {\n        if (this.isWordArray(buffer)) {\n            return (0, enc_base64_1.stringify)(buffer);\n        }\n        return this.uint8ViewToBase64(this.toBuffer(buffer));\n    };\n    BufferUtils.prototype.base64Decode = function (str) {\n        if (ArrayBuffer && platform_1.default.Config.atob) {\n            return this.base64ToArrayBuffer(str);\n        }\n        return (0, enc_base64_1.parse)(str);\n    };\n    BufferUtils.prototype.hexEncode = function (buffer) {\n        return (0, enc_hex_1.stringify)(this.toWordArray(buffer));\n    };\n    BufferUtils.prototype.hexDecode = function (string) {\n        var wordArray = (0, enc_hex_1.parse)(string);\n        return ArrayBuffer ? this.toArrayBuffer(wordArray) : wordArray;\n    };\n    BufferUtils.prototype.utf8Encode = function (string) {\n        if (platform_1.default.Config.TextEncoder) {\n            return new platform_1.default.Config.TextEncoder().encode(string).buffer;\n        }\n        return (0, enc_utf8_1.parse)(string);\n    };\n    /* For utf8 decoding we apply slightly stricter input validation than to\n     * hexEncode/base64Encode/etc: in those we accept anything that Buffer.from\n     * can take (in particular allowing strings, which are just interpreted as\n     * binary); here we ensure that the input is actually a buffer since trying\n     * to utf8-decode a string to another string is almost certainly a mistake */\n    BufferUtils.prototype.utf8Decode = function (buffer) {\n        if (!this.isBuffer(buffer)) {\n            throw new Error('Expected input of utf8decode to be an arraybuffer, typed array, or CryptoJS wordarray');\n        }\n        if (TextDecoder && !this.isWordArray(buffer)) {\n            return new TextDecoder().decode(buffer);\n        }\n        buffer = this.toWordArray(buffer);\n        return (0, enc_utf8_1.stringify)(buffer);\n    };\n    BufferUtils.prototype.bufferCompare = function (buffer1, buffer2) {\n        if (!buffer1)\n            return -1;\n        if (!buffer2)\n            return 1;\n        var wordArray1 = this.toWordArray(buffer1);\n        var wordArray2 = this.toWordArray(buffer2);\n        wordArray1.clamp();\n        wordArray2.clamp();\n        var cmp = wordArray1.sigBytes - wordArray2.sigBytes;\n        if (cmp != 0)\n            return cmp;\n        var words1 = wordArray1.words;\n        var words2 = wordArray2.words;\n        for (var i = 0; i < words1.length; i++) {\n            cmp = words1[i] - words2[i];\n            if (cmp != 0)\n                return cmp;\n        }\n        return 0;\n    };\n    BufferUtils.prototype.byteLength = function (buffer) {\n        if (this.isArrayBuffer(buffer) || this.isTypedArray(buffer)) {\n            return buffer.byteLength;\n        }\n        else if (this.isWordArray(buffer)) {\n            return buffer.sigBytes;\n        }\n        return -1;\n    };\n    /* Returns ArrayBuffer on browser and Buffer on Node.js */\n    BufferUtils.prototype.typedArrayToBuffer = function (typedArray) {\n        return typedArray.buffer;\n    };\n    return BufferUtils;\n}());\nexports.default = new BufferUtils();\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __nested_webpack_require_556556__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_556556__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.enc.Hex;\n\n}));\n\n/***/ }),\n/* 57 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_556838__) {\n\n\"use strict\";\n__nested_webpack_require_556838__.r(__webpack_exports__);\n/* harmony import */ var crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_556838__(5);\n/* harmony import */ var crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_556838__.n(crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var crypto_js_build_enc_base64__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_556838__(11);\n/* harmony import */ var crypto_js_build_enc_base64__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_556838__.n(crypto_js_build_enc_base64__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto_js_build__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_556838__(22);\n/* harmony import */ var crypto_js_build__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__nested_webpack_require_556838__.n(crypto_js_build__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_556838__(2);\n/* harmony import */ var _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nested_webpack_require_556838__.n(_common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var common_lib_types_errorinfo__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_556838__(4);\n/* harmony import */ var common_lib_types_errorinfo__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__nested_webpack_require_556838__.n(common_lib_types_errorinfo__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nvar CryptoFactory = function (config, bufferUtils) {\n  var DEFAULT_ALGORITHM = 'aes';\n  var DEFAULT_KEYLENGTH = 256; // bits\n  var DEFAULT_MODE = 'cbc';\n  var DEFAULT_BLOCKLENGTH = 16; // bytes\n  var DEFAULT_BLOCKLENGTH_WORDS = 4; // 32-bit words\n  var UINT32_SUP = 0x100000000;\n  var INT32_SUP = 0x80000000;\n\n  /**\n   * Internal: generate an array of secure random words corresponding to the given length of bytes\n   * @param bytes\n   * @param callback\n   */\n  var generateRandom;\n  if (config.getRandomWordArray) {\n    generateRandom = config.getRandomWordArray;\n  } else if (typeof Uint32Array !== 'undefined' && config.getRandomValues) {\n    var blockRandomArray = new Uint32Array(DEFAULT_BLOCKLENGTH_WORDS);\n    generateRandom = function (bytes, callback) {\n      var words = bytes / 4,\n        nativeArray = words == DEFAULT_BLOCKLENGTH_WORDS ? blockRandomArray : new Uint32Array(words);\n      config.getRandomValues(nativeArray, function (err) {\n        if (typeof callback !== 'undefined') {\n          callback(err, bufferUtils.toWordArray(nativeArray));\n        }\n      });\n    };\n  } else {\n    generateRandom = function (bytes, callback) {\n      _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.logAction(\n        _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.LOG_MAJOR,\n        'Ably.Crypto.generateRandom()',\n        'Warning: the browser you are using does not support secure cryptographically secure randomness generation; falling back to insecure Math.random()'\n      );\n      var words = bytes / 4,\n        array = new Array(words);\n      for (var i = 0; i < words; i++) {\n        /* cryptojs wordarrays use signed ints. When WordArray.create is fed a\n         * Uint32Array unsigned are converted to signed automatically, but when\n         * fed a normal array they aren't, so need to do so ourselves by\n         * subtracting INT32_SUP */\n        array[i] = Math.floor(Math.random() * UINT32_SUP) - INT32_SUP;\n      }\n\n      callback(null, crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create(array));\n    };\n  }\n\n  /**\n   * Internal: calculate the padded length of a given plaintext\n   * using PKCS5.\n   * @param plaintextLength\n   * @return\n   */\n  function getPaddedLength(plaintextLength) {\n    return (plaintextLength + DEFAULT_BLOCKLENGTH) & -DEFAULT_BLOCKLENGTH;\n  }\n\n  /**\n   * Internal: checks that the cipherParams are a valid combination. Currently\n   * just checks that the calculated keyLength is a valid one for aes-cbc\n   */\n  function validateCipherParams(params) {\n    if (params.algorithm === 'aes' && params.mode === 'cbc') {\n      if (params.keyLength === 128 || params.keyLength === 256) {\n        return;\n      }\n      throw new Error(\n        'Unsupported key length ' +\n          params.keyLength +\n          ' for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)'\n      );\n    }\n  }\n\n  function normaliseBase64(string) {\n    /* url-safe base64 strings use _ and - instread of / and + */\n    return string.replace('_', '/').replace('-', '+');\n  }\n\n  /**\n   * Internal: obtain the pkcs5 padding string for a given padded length;\n   */\n  var pkcs5Padding = [\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x10101010, 0x10101010, 0x10101010, 0x10101010], 16),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x01000000], 1),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x02020000], 2),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x03030300], 3),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x04040404], 4),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x05050505, 0x05000000], 5),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x06060606, 0x06060000], 6),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x07070707, 0x07070700], 7),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x08080808, 0x08080808], 8),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x09090909, 0x09090909, 0x09000000], 9),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0a0a0a0a, 0x0a0a0a0a, 0x0a0a0000], 10),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0b0b0b0b, 0x0b0b0b0b, 0x0b0b0b00], 11),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0c0c0c0c, 0x0c0c0c0c, 0x0c0c0c0c], 12),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0d0d0d0d, 0x0d0d0d0d, 0x0d0d0d0d, 0x0d000000], 13),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0e0e0e0e, 0x0e0e0e0e, 0x0e0e0e0e, 0x0e0e0000], 14),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f], 15),\n    crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create([0x10101010, 0x10101010, 0x10101010, 0x10101010], 16),\n  ];\n\n  /**\n   * Utility classes and interfaces for message payload encryption.\n   *\n   * This class supports AES/CBC/PKCS5 with a default keylength of 128 bits\n   * but supporting other keylengths. Other algorithms and chaining modes are\n   * not supported directly, but supportable by extending/implementing the base\n   * classes and interfaces here.\n   *-\n   * Secure random data for creation of Initialization Vectors (IVs) and keys\n   * is obtained from window.crypto.getRandomValues if available, or from\n   * Math.random() if not. Clients who do not want to depend on Math.random()\n   * should polyfill window.crypto.getRandomValues with a library that seeds\n   * a PRNG with real entropy.\n   *\n   * Each message payload is encrypted with an IV in CBC mode, and the IV is\n   * concatenated with the resulting raw ciphertext to construct the \"ciphertext\"\n   * data passed to the recipient.\n   */\n  function Crypto() {}\n\n  /**\n   * A class encapsulating the client-specifiable parameters for\n   * the cipher.\n   *\n   * algorithm is the name of the algorithm in the default system provider,\n   * or the lower-cased version of it; eg \"aes\" or \"AES\".\n   *\n   * Clients are recommended to not call this directly, but instead to use the\n   * Crypto.getDefaultParams helper, which will fill in any fields not supplied\n   * with default values and validation the result.\n   */\n  function CipherParams() {\n    this.algorithm = null;\n    this.keyLength = null;\n    this.mode = null;\n    this.key = null;\n  }\n  Crypto.CipherParams = CipherParams;\n\n  /**\n   * Obtain a complete CipherParams instance from the provided params, filling\n   * in any not provided with default values, calculating a keyLength from\n   * the supplied key, and validating the result.\n   * @param params an object containing at a minimum a `key` key with value the\n   * key, as either a binary (ArrayBuffer, Array, WordArray) or a\n   * base64-encoded string. May optionally also contain: algorithm (defaults to\n   * AES), mode (defaults to 'cbc')\n   */\n  Crypto.getDefaultParams = function (params) {\n    var key;\n    /* Backward compatibility */\n    if (typeof params === 'function' || typeof params === 'string') {\n      _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.deprecated('Crypto.getDefaultParams(key, callback)', 'Crypto.getDefaultParams({key: key})');\n      if (typeof params === 'function') {\n        Crypto.generateRandomKey(function (key) {\n          params(null, Crypto.getDefaultParams({ key: key }));\n        });\n      } else if (typeof arguments[1] === 'function') {\n        arguments[1](null, Crypto.getDefaultParams({ key: params }));\n      } else {\n        throw new Error('Invalid arguments for Crypto.getDefaultParams');\n      }\n      return;\n    }\n\n    if (!params.key) {\n      throw new Error('Crypto.getDefaultParams: a key is required');\n    }\n\n    if (typeof params.key === 'string') {\n      key = Object(crypto_js_build_enc_base64__WEBPACK_IMPORTED_MODULE_1__[\"parse\"])(normaliseBase64(params.key));\n    } else {\n      key = bufferUtils.toWordArray(params.key); // Expect key to be an Array, ArrayBuffer, or WordArray at this point\n    }\n\n    var cipherParams = new CipherParams();\n    cipherParams.key = key;\n    cipherParams.algorithm = params.algorithm || DEFAULT_ALGORITHM;\n    cipherParams.keyLength = key.words.length * (4 * 8);\n    cipherParams.mode = params.mode || DEFAULT_MODE;\n\n    if (params.keyLength && params.keyLength !== cipherParams.keyLength) {\n      throw new Error(\n        'Crypto.getDefaultParams: a keyLength of ' +\n          params.keyLength +\n          ' was specified, but the key actually has length ' +\n          cipherParams.keyLength\n      );\n    }\n\n    validateCipherParams(cipherParams);\n    return cipherParams;\n  };\n\n  /**\n   * Generate a random encryption key from the supplied keylength (or the\n   * default keyLength if none supplied) as a CryptoJS WordArray\n   * @param keyLength (optional) the required keyLength in bits\n   * @param callback (optional) (err, key)\n   */\n  Crypto.generateRandomKey = function (keyLength, callback) {\n    if (arguments.length == 1 && typeof keyLength == 'function') {\n      callback = keyLength;\n      keyLength = undefined;\n    }\n\n    generateRandom((keyLength || DEFAULT_KEYLENGTH) / 8, function (err, buf) {\n      if (callback !== undefined) {\n        callback(err ? common_lib_types_errorinfo__WEBPACK_IMPORTED_MODULE_4___default.a.fromValues(err) : null, buf);\n      }\n    });\n  };\n\n  /**\n   * Internal; get a ChannelCipher instance based on the given cipherParams\n   * @param params either a CipherParams instance or some subset of its\n   * fields that includes a key\n   */\n  Crypto.getCipher = function (params) {\n    var cipherParams = params instanceof CipherParams ? params : Crypto.getDefaultParams(params);\n\n    return { cipherParams: cipherParams, cipher: new CBCCipher(cipherParams, DEFAULT_BLOCKLENGTH_WORDS, params.iv) };\n  };\n\n  function CBCCipher(params, blockLengthWords, iv) {\n    this.algorithm = params.algorithm + '-' + String(params.keyLength) + '-' + params.mode;\n    this.cjsAlgorithm = params.algorithm.toUpperCase().replace(/-\\d+$/, '');\n    this.key = bufferUtils.toWordArray(params.key);\n    if (iv) {\n      this.iv = bufferUtils.toWordArray(iv).clone();\n    }\n    this.blockLengthWords = blockLengthWords;\n  }\n\n  CBCCipher.prototype.encrypt = function (plaintext, callback) {\n    _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.logAction(_common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.LOG_MICRO, 'CBCCipher.encrypt()', '');\n    plaintext = bufferUtils.toWordArray(plaintext);\n    var plaintextLength = plaintext.sigBytes,\n      paddedLength = getPaddedLength(plaintextLength),\n      self = this;\n\n    var then = function () {\n      self.getIv(function (err, iv) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        var cipherOut = self.encryptCipher.process(plaintext.concat(pkcs5Padding[paddedLength - plaintextLength]));\n        var ciphertext = iv.concat(cipherOut);\n        callback(null, ciphertext);\n      });\n    };\n\n    if (!this.encryptCipher) {\n      if (this.iv) {\n        this.encryptCipher = crypto_js_build__WEBPACK_IMPORTED_MODULE_2___default.a.algo[this.cjsAlgorithm].createEncryptor(this.key, { iv: this.iv });\n        then();\n      } else {\n        generateRandom(DEFAULT_BLOCKLENGTH, function (err, iv) {\n          if (err) {\n            callback(err);\n            return;\n          }\n          self.encryptCipher = crypto_js_build__WEBPACK_IMPORTED_MODULE_2___default.a.algo[self.cjsAlgorithm].createEncryptor(self.key, { iv: iv });\n          self.iv = iv;\n          then();\n        });\n      }\n    } else {\n      then();\n    }\n  };\n\n  CBCCipher.prototype.decrypt = function (ciphertext) {\n    _common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.logAction(_common_lib_util_logger__WEBPACK_IMPORTED_MODULE_3___default.a.LOG_MICRO, 'CBCCipher.decrypt()', '');\n    ciphertext = bufferUtils.toWordArray(ciphertext);\n    var blockLengthWords = this.blockLengthWords,\n      ciphertextWords = ciphertext.words,\n      iv = crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create(ciphertextWords.slice(0, blockLengthWords)),\n      ciphertextBody = crypto_js_build_lib_typedarrays__WEBPACK_IMPORTED_MODULE_0___default.a.create(ciphertextWords.slice(blockLengthWords));\n\n    var decryptCipher = crypto_js_build__WEBPACK_IMPORTED_MODULE_2___default.a.algo[this.cjsAlgorithm].createDecryptor(this.key, { iv: iv });\n    var plaintext = decryptCipher.process(ciphertextBody);\n    var epilogue = decryptCipher.finalize();\n    decryptCipher.reset();\n    if (epilogue && epilogue.sigBytes) plaintext.concat(epilogue);\n    return plaintext;\n  };\n\n  CBCCipher.prototype.getIv = function (callback) {\n    if (this.iv) {\n      var iv = this.iv;\n      this.iv = null;\n      callback(null, iv);\n      return;\n    }\n\n    /* Since the iv for a new block is the ciphertext of the last, this\n     * sets a new iv (= aes(randomBlock XOR lastCipherText)) as well as\n     * returning it */\n    var self = this;\n    generateRandom(DEFAULT_BLOCKLENGTH, function (err, randomBlock) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, self.encryptCipher.process(randomBlock));\n    });\n  };\n\n  return Crypto;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CryptoFactory);\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __nested_webpack_require_572055__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_572055__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __nested_webpack_require_576052__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_576052__(6), __nested_webpack_require_576052__(28));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __nested_webpack_require_577760__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_577760__(6), __nested_webpack_require_577760__(11), __nested_webpack_require_577760__(61), __nested_webpack_require_577760__(27), __nested_webpack_require_577760__(28));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __nested_webpack_require_586269__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__nested_webpack_require_586269__(6));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __nested_webpack_require_595598__) {\n\n\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_595598__(0);\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(3));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_595598__(1));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(8));\nvar errorinfo_1 = __nested_webpack_require_595598__(4);\nvar HttpMethods_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(18));\nvar xhrrequest_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(16));\nvar XHRStates_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(21));\nvar logger_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(2));\nvar jsonptransport_1 = __nested_webpack_require_595598__(29);\nvar fetchrequest_1 = tslib_1.__importDefault(__nested_webpack_require_595598__(63));\nvar HttpStatusCodes_1 = __nested_webpack_require_595598__(25);\nfunction shouldFallback(errorInfo) {\n    var statusCode = errorInfo.statusCode;\n    /* 400 + no code = a generic xhr onerror. Browser doesn't give us enough\n     * detail to know whether it's fallback-fixable, but it may be (eg if a\n     * network issue), so try just in case */\n    return ((statusCode === 408 && !errorInfo.code) ||\n        (statusCode === 400 && !errorInfo.code) ||\n        (statusCode >= 500 && statusCode <= 504));\n}\nfunction getHosts(client) {\n    /* If we're a connected realtime client, try the endpoint we're connected\n     * to first -- but still have fallbacks, being connected is not an absolute\n     * guarantee that a datacenter has free capacity to service REST requests. */\n    var connection = client.connection, connectionHost = connection && connection.connectionManager.host;\n    if (connectionHost) {\n        return [connectionHost].concat(defaults_1.default.getFallbackHosts(client.options));\n    }\n    return defaults_1.default.getHosts(client.options);\n}\nvar Http = (_a = /** @class */ (function () {\n        function class_1(options) {\n            this.checksInProgress = null;\n            this.checkConnectivity = undefined;\n            this.supportsAuthHeaders = false;\n            this.supportsLinkHeaders = false;\n            this._getHosts = getHosts;\n            this.options = options || {};\n            var connectivityCheckUrl = this.options.connectivityCheckUrl || defaults_1.default.connectivityCheckUrl;\n            var connectivityCheckParams = this.options.connectivityCheckParams;\n            var connectivityUrlIsDefault = !this.options.connectivityCheckUrl;\n            if (platform_1.default.Config.xhrSupported) {\n                this.supportsAuthHeaders = true;\n                this.Request = function (method, rest, uri, headers, params, body, callback) {\n                    var req = xhrrequest_1.default.createRequest(uri, headers, params, body, XHRStates_1.default.REQ_SEND, rest && rest.options.timeouts, method);\n                    req.once('complete', callback);\n                    req.exec();\n                    return req;\n                };\n                if (this.options.disableConnectivityCheck) {\n                    this.checkConnectivity = function (callback) {\n                        callback(null, true);\n                    };\n                }\n                else {\n                    this.checkConnectivity = function (callback) {\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, '(XHRRequest)Http.checkConnectivity()', 'Sending; ' + connectivityCheckUrl);\n                        this.doUri(HttpMethods_1.default.Get, null, connectivityCheckUrl, null, null, connectivityCheckParams, function (err, responseText, headers, unpacked, statusCode) {\n                            var result = false;\n                            if (!connectivityUrlIsDefault) {\n                                result = !err && (0, HttpStatusCodes_1.isSuccessCode)(statusCode);\n                            }\n                            else {\n                                result = !err && (responseText === null || responseText === void 0 ? void 0 : responseText.replace(/\\n/, '')) == 'yes';\n                            }\n                            logger_1.default.logAction(logger_1.default.LOG_MICRO, '(XHRRequest)Http.checkConnectivity()', 'Result: ' + result);\n                            callback(null, result);\n                        });\n                    };\n                }\n            }\n            else if (platform_1.default.Config.jsonpSupported) {\n                this.Request = function (method, rest, uri, headers, params, body, callback) {\n                    var req = (0, jsonptransport_1.createRequest)(uri, headers, params, body, XHRStates_1.default.REQ_SEND, rest && rest.options.timeouts, method);\n                    req.once('complete', callback);\n                    platform_1.default.Config.nextTick(function () {\n                        req.exec();\n                    });\n                    return req;\n                };\n                if (this.options.disableConnectivityCheck) {\n                    this.checkConnectivity = function (callback) {\n                        callback(null, true);\n                    };\n                }\n                else {\n                    this.checkConnectivity = function (callback) {\n                        var _this = this;\n                        var upUrl = defaults_1.default.jsonpInternetUpUrl;\n                        if (this.checksInProgress) {\n                            this.checksInProgress.push(callback);\n                            return;\n                        }\n                        this.checksInProgress = [callback];\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, '(JSONP)Http.checkConnectivity()', 'Sending; ' + upUrl);\n                        var req = new jsonptransport_1.Request('isTheInternetUp', upUrl, null, null, null, XHRStates_1.default.REQ_SEND, defaults_1.default.TIMEOUTS);\n                        req.once('complete', function (err, response) {\n                            var result = !err && response;\n                            logger_1.default.logAction(logger_1.default.LOG_MICRO, '(JSONP)Http.checkConnectivity()', 'Result: ' + result);\n                            for (var i = 0; i < _this.checksInProgress.length; i++)\n                                _this.checksInProgress[i](null, result);\n                            _this.checksInProgress = null;\n                        });\n                        platform_1.default.Config.nextTick(function () {\n                            req.exec();\n                        });\n                    };\n                }\n            }\n            else if (platform_1.default.Config.fetchSupported) {\n                this.supportsAuthHeaders = true;\n                this.Request = fetchrequest_1.default;\n                this.checkConnectivity = function (callback) {\n                    logger_1.default.logAction(logger_1.default.LOG_MICRO, '(Fetch)Http.checkConnectivity()', 'Sending; ' + connectivityCheckUrl);\n                    this.doUri(HttpMethods_1.default.Get, null, connectivityCheckUrl, null, null, null, function (err, responseText) {\n                        var result = !err && (responseText === null || responseText === void 0 ? void 0 : responseText.replace(/\\n/, '')) == 'yes';\n                        logger_1.default.logAction(logger_1.default.LOG_MICRO, '(Fetch)Http.checkConnectivity()', 'Result: ' + result);\n                        callback(null, result);\n                    });\n                };\n            }\n            else {\n                this.Request = function (method, rest, uri, headers, params, body, callback) {\n                    callback(new errorinfo_1.PartialErrorInfo('no supported HTTP transports available', null, 400), null);\n                };\n            }\n        }\n        /* Unlike for doUri, the 'rest' param here is mandatory, as it's used to generate the hosts */\n        class_1.prototype.do = function (method, rest, path, headers, body, params, callback) {\n            var _this = this;\n            var uriFromHost = typeof path == 'function'\n                ? path\n                : function (host) {\n                    return rest.baseUri(host) + path;\n                };\n            var currentFallback = rest._currentFallback;\n            if (currentFallback) {\n                if (currentFallback.validUntil > Utils.now()) {\n                    /* Use stored fallback */\n                    if (!this.Request) {\n                        callback === null || callback === void 0 ? void 0 : callback(new errorinfo_1.PartialErrorInfo('Request invoked before assigned to', null, 500));\n                        return;\n                    }\n                    this.Request(method, rest, uriFromHost(currentFallback.host), headers, params, body, function (err) {\n                        var args = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            args[_i - 1] = arguments[_i];\n                        }\n                        // This typecast is safe because ErrnoExceptions are only thrown in NodeJS\n                        if (err && shouldFallback(err)) {\n                            /* unstore the fallback and start from the top with the default sequence */\n                            rest._currentFallback = null;\n                            _this.do(method, rest, path, headers, body, params, callback);\n                            return;\n                        }\n                        callback === null || callback === void 0 ? void 0 : callback.apply(void 0, tslib_1.__spreadArray([err], args, false));\n                    });\n                    return;\n                }\n                else {\n                    /* Fallback expired; remove it and fallthrough to normal sequence */\n                    rest._currentFallback = null;\n                }\n            }\n            var hosts = getHosts(rest);\n            /* if there is only one host do it */\n            if (hosts.length === 1) {\n                this.doUri(method, rest, uriFromHost(hosts[0]), headers, body, params, callback);\n                return;\n            }\n            /* hosts is an array with preferred host plus at least one fallback */\n            var tryAHost = function (candidateHosts, persistOnSuccess) {\n                var host = candidateHosts.shift();\n                _this.doUri(method, rest, uriFromHost(host), headers, body, params, function (err) {\n                    var args = [];\n                    for (var _i = 1; _i < arguments.length; _i++) {\n                        args[_i - 1] = arguments[_i];\n                    }\n                    // This typecast is safe because ErrnoExceptions are only thrown in NodeJS\n                    if (err && shouldFallback(err) && candidateHosts.length) {\n                        tryAHost(candidateHosts, true);\n                        return;\n                    }\n                    if (persistOnSuccess) {\n                        /* RSC15f */\n                        rest._currentFallback = {\n                            host: host,\n                            validUntil: Utils.now() + rest.options.timeouts.fallbackRetryTimeout,\n                        };\n                    }\n                    callback === null || callback === void 0 ? void 0 : callback.apply(void 0, tslib_1.__spreadArray([err], args, false));\n                });\n            };\n            tryAHost(hosts);\n        };\n        class_1.prototype.doUri = function (method, rest, uri, headers, body, params, callback) {\n            if (!this.Request) {\n                callback(new errorinfo_1.PartialErrorInfo('Request invoked before assigned to', null, 500));\n                return;\n            }\n            this.Request(method, rest, uri, headers, params, body, callback);\n        };\n        return class_1;\n    }()),\n    _a.methods = [HttpMethods_1.default.Get, HttpMethods_1.default.Delete, HttpMethods_1.default.Post, HttpMethods_1.default.Put, HttpMethods_1.default.Patch],\n    _a.methodsWithoutBody = [HttpMethods_1.default.Get, HttpMethods_1.default.Delete],\n    _a.methodsWithBody = [HttpMethods_1.default.Post, HttpMethods_1.default.Put, HttpMethods_1.default.Patch],\n    _a);\nexports.default = Http;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __nested_webpack_require_607826__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_607826__(0);\nvar errorinfo_1 = tslib_1.__importStar(__nested_webpack_require_607826__(4));\nvar platform_1 = tslib_1.__importDefault(__nested_webpack_require_607826__(3));\nvar defaults_1 = tslib_1.__importDefault(__nested_webpack_require_607826__(8));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_607826__(1));\nvar utils_1 = __nested_webpack_require_607826__(1);\nfunction isAblyError(responseBody, headers) {\n    return !!headers.get('x-ably-errorcode');\n}\nfunction getAblyError(responseBody, headers) {\n    if (isAblyError(responseBody, headers)) {\n        return responseBody.error && errorinfo_1.default.fromValues(responseBody.error);\n    }\n}\nfunction fetchRequest(method, rest, uri, headers, params, body, callback) {\n    var fetchHeaders = new Headers(headers || {});\n    var _method = method ? method.toUpperCase() : Utils.isEmptyArg(body) ? 'GET' : 'POST';\n    var controller = new AbortController();\n    var timeout = setTimeout(function () {\n        controller.abort();\n        callback(new errorinfo_1.PartialErrorInfo('Request timed out', null, 408));\n    }, rest ? rest.options.timeouts.httpRequestTimeout : defaults_1.default.TIMEOUTS.httpRequestTimeout);\n    var requestInit = {\n        method: _method,\n        headers: fetchHeaders,\n        body: body,\n    };\n    if (!platform_1.default.Config.isWebworker) {\n        requestInit.credentials = fetchHeaders.has('authorization') ? 'include' : 'same-origin';\n    }\n    (0, utils_1.getGlobalObject)()\n        .fetch(uri + '?' + new URLSearchParams(params || {}), requestInit)\n        .then(function (res) {\n        clearTimeout(timeout);\n        var contentType = res.headers.get('Content-Type');\n        var prom;\n        if (contentType && contentType.indexOf('application/x-msgpack') > -1) {\n            prom = res.arrayBuffer();\n        }\n        else if (contentType && contentType.indexOf('application/json') > -1) {\n            prom = res.json();\n        }\n        else {\n            prom = res.text();\n        }\n        prom.then(function (body) {\n            var unpacked = !!contentType && contentType.indexOf('application/x-msgpack') === -1;\n            if (!res.ok) {\n                var err = getAblyError(body, res.headers) ||\n                    new errorinfo_1.PartialErrorInfo('Error response received from server: ' + res.status + ' body was: ' + platform_1.default.Config.inspect(body), null, res.status);\n                callback(err, body, res.headers, unpacked, res.status);\n            }\n            else {\n                callback(null, body, res.headers, unpacked, res.status);\n            }\n        });\n    })\n        .catch(function (err) {\n        clearTimeout(timeout);\n        callback(err);\n    });\n}\nexports.default = fetchRequest;\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __nested_webpack_require_610677__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_610677__(0);\nvar msgpack_1 = tslib_1.__importDefault(__nested_webpack_require_610677__(41));\nvar Utils = tslib_1.__importStar(__nested_webpack_require_610677__(1));\n// Workaround for salesforce lightning locker compat\nvar globalObject = Utils.getGlobalObject();\nif (typeof Window === 'undefined' && typeof WorkerGlobalScope === 'undefined') {\n    console.log(\"Warning: this distribution of Ably is intended for browsers. On nodejs, please use the 'ably' package on npm\");\n}\nfunction allowComet() {\n    /* xhr requests from local files are unreliable in some browsers, such as Chrome 65 and higher -- see eg\n     * https://stackoverflow.com/questions/49256429/chrome-65-unable-to-make-post-requests-from-local-files-to-flask\n     * So if websockets are supported, then just forget about comet transports and use that */\n    var loc = globalObject.location;\n    return !globalObject.WebSocket || !loc || !loc.origin || loc.origin.indexOf('http') > -1;\n}\nvar userAgent = globalObject.navigator && globalObject.navigator.userAgent.toString();\nvar currentUrl = globalObject.location && globalObject.location.href;\nvar Config = {\n    agent: 'browser',\n    logTimestamps: true,\n    userAgent: userAgent,\n    currentUrl: currentUrl,\n    noUpgrade: userAgent && !!userAgent.match(/MSIE\\s8\\.0/),\n    binaryType: 'arraybuffer',\n    WebSocket: globalObject.WebSocket,\n    fetchSupported: !!globalObject.fetch,\n    xhrSupported: globalObject.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest(),\n    jsonpSupported: typeof document !== 'undefined',\n    allowComet: allowComet(),\n    streamingSupported: true,\n    useProtocolHeartbeats: true,\n    createHmac: null,\n    msgpack: msgpack_1.default,\n    supportsBinary: !!globalObject.TextDecoder,\n    /* Per Paddy (https://ably-real-time.slack.com/archives/CURL4U2FP/p1705674537763479) web intentionally prefers JSON to MessagePack:\n     *\n     * > browsers' support for binary types in general was historically poor, and JSON transport performance is significantly better in a browser than msgpack. In modern browsers then binary is supported consistently, but I'd still expect that JSON encode/decode performance is dramatically better than msgpack in a browser.\n     */\n    preferBinary: false,\n    ArrayBuffer: globalObject.ArrayBuffer,\n    atob: globalObject.atob,\n    nextTick: typeof globalObject.setImmediate !== 'undefined'\n        ? globalObject.setImmediate.bind(globalObject)\n        : function (f) {\n            setTimeout(f, 0);\n        },\n    addEventListener: globalObject.addEventListener,\n    inspect: JSON.stringify,\n    stringByteSize: function (str) {\n        /* str.length will be an underestimate for non-ascii strings. But if we're\n         * in a browser too old to support TextDecoder, not much we can do. Better\n         * to underestimate, so if we do go over-size, the server will reject the\n         * message */\n        return (globalObject.TextDecoder && new globalObject.TextEncoder().encode(str).length) || str.length;\n    },\n    TextEncoder: globalObject.TextEncoder,\n    TextDecoder: globalObject.TextDecoder,\n    Promise: globalObject.Promise,\n    getRandomValues: (function (crypto) {\n        if (crypto === undefined) {\n            return undefined;\n        }\n        return function (arr, callback) {\n            crypto.getRandomValues(arr);\n            if (callback) {\n                callback(null);\n            }\n        };\n    })(globalObject.crypto || msCrypto),\n};\nexports.default = Config;\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __nested_webpack_require_614308__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_614308__(0);\nvar Utils = tslib_1.__importStar(__nested_webpack_require_614308__(1));\nvar test = 'ablyjs-storage-test';\nvar Webstorage = /** @class */ (function () {\n    function Webstorage() {\n        /* Even just accessing the session/localStorage object can throw a\n         * security exception in some circumstances with some browsers. In\n         * others, calling setItem will throw. So have to check in this\n         * somewhat roundabout way. (If unsupported or no global object,\n         * will throw on accessing a property of undefined) */\n        try {\n            global.sessionStorage.setItem(test, test);\n            global.sessionStorage.removeItem(test);\n            this.sessionSupported = true;\n        }\n        catch (e) {\n            this.sessionSupported = false;\n        }\n        try {\n            global.localStorage.setItem(test, test);\n            global.localStorage.removeItem(test);\n            this.localSupported = true;\n        }\n        catch (e) {\n            this.localSupported = false;\n        }\n    }\n    Webstorage.prototype.get = function (name) {\n        return this._get(name, false);\n    };\n    Webstorage.prototype.getSession = function (name) {\n        return this._get(name, true);\n    };\n    Webstorage.prototype.remove = function (name) {\n        return this._remove(name, false);\n    };\n    Webstorage.prototype.removeSession = function (name) {\n        return this._remove(name, true);\n    };\n    Webstorage.prototype.set = function (name, value, ttl) {\n        return this._set(name, value, ttl, false);\n    };\n    Webstorage.prototype.setSession = function (name, value, ttl) {\n        return this._set(name, value, ttl, true);\n    };\n    Webstorage.prototype._set = function (name, value, ttl, session) {\n        var wrappedValue = { value: value };\n        if (ttl) {\n            wrappedValue.expires = Utils.now() + ttl;\n        }\n        return this.storageInterface(session).setItem(name, JSON.stringify(wrappedValue));\n    };\n    Webstorage.prototype._get = function (name, session) {\n        if (session && !this.sessionSupported)\n            throw new Error('Session Storage not supported');\n        if (!session && !this.localSupported)\n            throw new Error('Local Storage not supported');\n        var rawItem = this.storageInterface(session).getItem(name);\n        if (!rawItem)\n            return null;\n        var wrappedValue = JSON.parse(rawItem);\n        if (wrappedValue.expires && wrappedValue.expires < Utils.now()) {\n            this.storageInterface(session).removeItem(name);\n            return null;\n        }\n        return wrappedValue.value;\n    };\n    Webstorage.prototype._remove = function (name, session) {\n        return this.storageInterface(session).removeItem(name);\n    };\n    Webstorage.prototype.storageInterface = function (session) {\n        return session ? global.sessionStorage : global.localStorage;\n    };\n    return Webstorage;\n}());\nexports.default = new Webstorage();\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_614308__(13)))\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __nested_webpack_require_617562__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __nested_webpack_require_617562__(0);\nvar TransportNames_1 = tslib_1.__importDefault(__nested_webpack_require_617562__(67));\nvar Defaults = {\n    connectivityCheckUrl: 'https://internet-up.ably-realtime.com/is-the-internet-up.txt',\n    jsonpInternetUpUrl: 'https://internet-up.ably-realtime.com/is-the-internet-up-0-9.js',\n    /* Order matters here: the base transport is the leftmost one in the\n     * intersection of baseTransportOrder and the transports clientOption that's\n     * supported.  This is not quite the same as the preference order -- e.g.\n     * xhr_polling is preferred to jsonp, but for browsers that support it we want\n     * the base transport to be xhr_polling, not jsonp */\n    defaultTransports: [\n        TransportNames_1.default.XhrPolling,\n        TransportNames_1.default.XhrStreaming,\n        TransportNames_1.default.JsonP,\n        TransportNames_1.default.WebSocket,\n    ],\n    baseTransportOrder: [\n        TransportNames_1.default.XhrPolling,\n        TransportNames_1.default.XhrStreaming,\n        TransportNames_1.default.JsonP,\n        TransportNames_1.default.WebSocket,\n    ],\n    transportPreferenceOrder: [\n        TransportNames_1.default.JsonP,\n        TransportNames_1.default.XhrPolling,\n        TransportNames_1.default.XhrStreaming,\n        TransportNames_1.default.WebSocket,\n    ],\n    upgradeTransports: [TransportNames_1.default.XhrStreaming, TransportNames_1.default.WebSocket],\n};\nexports.default = Defaults;\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TransportNames;\n(function (TransportNames) {\n    TransportNames[\"WebSocket\"] = \"web_socket\";\n    TransportNames[\"Comet\"] = \"comet\";\n    TransportNames[\"XhrStreaming\"] = \"xhr_streaming\";\n    TransportNames[\"XhrPolling\"] = \"xhr_polling\";\n    TransportNames[\"JsonP\"] = \"jsonp\";\n})(TransportNames || (TransportNames = {}));\nexports.default = TransportNames;\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_619689__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_619689__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/platform/web/lib/transport/jsonptransport.ts\nvar jsonptransport = __nested_webpack_require_619689__(29);\nvar jsonptransport_default = /*#__PURE__*/__nested_webpack_require_619689__.n(jsonptransport);\n\n// EXTERNAL MODULE: ./src/common/lib/util/utils.ts\nvar utils = __nested_webpack_require_619689__(1);\n\n// EXTERNAL MODULE: ./src/common/platform.ts\nvar platform = __nested_webpack_require_619689__(3);\nvar platform_default = /*#__PURE__*/__nested_webpack_require_619689__.n(platform);\n\n// EXTERNAL MODULE: ./src/common/lib/transport/comettransport.ts\nvar comettransport = __nested_webpack_require_619689__(12);\nvar comettransport_default = /*#__PURE__*/__nested_webpack_require_619689__.n(comettransport);\n\n// EXTERNAL MODULE: ./src/platform/web/lib/transport/xhrrequest.ts\nvar xhrrequest = __nested_webpack_require_619689__(16);\nvar xhrrequest_default = /*#__PURE__*/__nested_webpack_require_619689__.n(xhrrequest);\n\n// CONCATENATED MODULE: ./src/platform/web/lib/transport/xhrpollingtransport.js\n\n\n\n\n\nvar xhrpollingtransport_XHRPollingTransport = function (connectionManager) {\n  var shortName = 'xhr_polling';\n\n  function XHRPollingTransport(connectionManager, auth, params) {\n    params.stream = false;\n    comettransport_default.a.call(this, connectionManager, auth, params);\n    this.shortName = shortName;\n  }\n  utils[\"inherits\"](XHRPollingTransport, comettransport_default.a);\n\n  XHRPollingTransport.isAvailable = function () {\n    return platform_default.a.Config.xhrSupported && platform_default.a.Config.allowComet;\n  };\n\n  XHRPollingTransport.prototype.toString = function () {\n    return 'XHRPollingTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n  };\n\n  XHRPollingTransport.prototype.createRequest = function (uri, headers, params, body, requestMode) {\n    return xhrrequest_default.a.createRequest(uri, headers, params, body, requestMode, this.timeouts);\n  };\n\n  if (typeof connectionManager !== 'undefined' && XHRPollingTransport.isAvailable()) {\n    connectionManager.supportedTransports[shortName] = XHRPollingTransport;\n  }\n\n  return XHRPollingTransport;\n};\n\n/* harmony default export */ var xhrpollingtransport = (xhrpollingtransport_XHRPollingTransport);\n\n// CONCATENATED MODULE: ./src/platform/web/lib/transport/xhrstreamingtransport.js\n\n\n\n\n\nvar xhrstreamingtransport_XHRStreamingTransport = function (connectionManager) {\n  var shortName = 'xhr_streaming';\n\n  /* public constructor */\n  function XHRStreamingTransport(connectionManager, auth, params) {\n    comettransport_default.a.call(this, connectionManager, auth, params);\n    this.shortName = shortName;\n  }\n  utils[\"inherits\"](XHRStreamingTransport, comettransport_default.a);\n\n  XHRStreamingTransport.isAvailable = function () {\n    return platform_default.a.Config.xhrSupported && platform_default.a.Config.streamingSupported && platform_default.a.Config.allowComet;\n  };\n\n  XHRStreamingTransport.prototype.toString = function () {\n    return 'XHRStreamingTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n  };\n\n  XHRStreamingTransport.prototype.createRequest = function (uri, headers, params, body, requestMode) {\n    return xhrrequest_default.a.createRequest(uri, headers, params, body, requestMode, this.timeouts);\n  };\n\n  if (typeof connectionManager !== 'undefined' && XHRStreamingTransport.isAvailable()) {\n    connectionManager.supportedTransports[shortName] = XHRStreamingTransport;\n  }\n\n  return XHRStreamingTransport;\n};\n\n/* harmony default export */ var xhrstreamingtransport = (xhrstreamingtransport_XHRStreamingTransport);\n\n// CONCATENATED MODULE: ./src/platform/web/lib/transport/index.js\n\n\n\n\n/* harmony default export */ var transport = __webpack_exports__[\"default\"] = ([jsonptransport_default.a, xhrpollingtransport, xhrstreamingtransport]);\n\n\n/***/ })\n/******/ ])[\"default\"];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/ably/build/ably-commonjs.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frdzcn%2Fprojects%2Fpet%2Fonline-memory-game%2Fapp%2Fauthentication%2Fpage.tsx&server=false!":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frdzcn%2Fprojects%2Fpet%2Fonline-memory-game%2Fapp%2Fauthentication%2Fpage.tsx&server=false! ***!
  \********************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/authentication/page.tsx */ \"(app-client)/./app/authentication/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSUyRlVzZXJzJTJGcmR6Y24lMkZwcm9qZWN0cyUyRnBldCUyRm9ubGluZS1tZW1vcnktZ2FtZSUyRmFwcCUyRmF1dGhlbnRpY2F0aW9uJTJGcGFnZS50c3gmc2VydmVyPWZhbHNlIS5qcyIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzQ3MTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvcmR6Y24vcHJvamVjdHMvcGV0L29ubGluZS1tZW1vcnktZ2FtZS9hcHAvYXV0aGVudGljYXRpb24vcGFnZS50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frdzcn%2Fprojects%2Fpet%2Fonline-memory-game%2Fapp%2Fauthentication%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-client)/./app/authentication/page.tsx":
/*!*************************************!*\
  !*** ./app/authentication/page.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Authentication; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/Logger */ \"(app-client)/./components/Logger.tsx\");\n/* harmony import */ var _ably_labs_react_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ably-labs/react-hooks */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/index.js\");\n\nvar _s = $RefreshSig$();\n\n\n\nfunction Authentication() {\n    _s();\n    const [logs, setLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [connectionState, setConnectionState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"unknown\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleConnectionStateChange = (stateChange)=>{\n            setLogs((prev)=>[\n                    ...prev,\n                    new _components_Logger__WEBPACK_IMPORTED_MODULE_2__.LogEntry(\"Connection state change: \".concat(stateChange.previous, \" -> \").concat(stateChange.current))\n                ]);\n            setConnectionState(stateChange.current);\n        };\n        const ably = (0,_ably_labs_react_hooks__WEBPACK_IMPORTED_MODULE_3__.configureAbly)({\n            authUrl: \"/api/authentication/token-auth\"\n        });\n        ably.connection.on(handleConnectionStateChange);\n        return ()=>{\n            ably.connection.off();\n        };\n    }, []); // Only run the client\n    const connectionToggle = (_event)=>{\n        const ably = (0,_ably_labs_react_hooks__WEBPACK_IMPORTED_MODULE_3__.assertConfiguration)();\n        if (connectionState === \"connected\") {\n            ably.connection.close();\n        } else if (connectionState === \"closed\") {\n            ably.connection.connect();\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                children: \"Authenticate and establish a persistent bi-direction connection to the Ably platform.\"\n            }, void 0, false, {\n                fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                lineNumber: 52,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-3x mt-4 font-bold underline\",\n                        children: [\n                            \"Connection status: \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: connectionState\n                            }, void 0, false, {\n                                fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                                lineNumber: 59,\n                                columnNumber: 30\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                        lineNumber: 58,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: connectionToggle,\n                            className: \"mt-4 px-3 py-3 text-indigo-600 bg-indigo-50 rounded-lg duration-150 hover:bg-indigo-100 active:bg-indigo-200\",\n                            children: connectionState === \"connected\" ? \"Disconnect\" : \"Connect\"\n                        }, void 0, false, {\n                            fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                            lineNumber: 63,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                        lineNumber: 62,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Logger__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        logEntries: logs\n                    }, void 0, false, {\n                        fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                        lineNumber: 71,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/rdzcn/projects/pet/online-memory-game/app/authentication/page.tsx\",\n                lineNumber: 57,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s(Authentication, \"FbdoHj5N+f4FGUMEH1B9vigIPuc=\");\n_c = Authentication;\nvar _c;\n$RefreshReg$(_c, \"Authentication\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vYXBwL2F1dGhlbnRpY2F0aW9uL3BhZ2UudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRTJFO0FBRWhCO0FBR2lCO0FBRTdELFNBQVNNLGlCQUFpQjs7SUFDdkMsTUFBTSxDQUFDQyxNQUFNQyxRQUFRLEdBQUdSLCtDQUFRQSxDQUFrQixFQUFFO0lBQ3BELE1BQU0sQ0FBQ1MsaUJBQWlCQyxtQkFBbUIsR0FBR1YsK0NBQVFBLENBQUM7SUFFdkRDLGdEQUFTQSxDQUFDLElBQU07UUFDZCxNQUFNVSw4QkFBOEIsQ0FDbENDLGNBQ0c7WUFDSEosUUFBUSxDQUFDSyxPQUFTO3VCQUNiQTtvQkFDSCxJQUFJVix3REFBUUEsQ0FDViw0QkFBdURTLE9BQTNCQSxZQUFZRSxRQUFRLEVBQUMsUUFBMEIsT0FBcEJGLFlBQVlHLE9BQU87aUJBRTdFO1lBRURMLG1CQUFtQkUsWUFBWUcsT0FBTztRQUN4QztRQUVBLE1BQU1DLE9BQW1DWCxxRUFBYUEsQ0FBQztZQUNyRFksU0FBUztRQUNYO1FBQ0FELEtBQUtFLFVBQVUsQ0FBQ0MsRUFBRSxDQUFDUjtRQUVuQixPQUFPLElBQU07WUFDWEssS0FBS0UsVUFBVSxDQUFDRSxHQUFHO1FBQ3JCO0lBQ0YsR0FBRyxFQUFFLEdBQUcsc0JBQXNCO0lBRTlCLE1BQU1DLG1CQUFzQyxDQUMxQ0MsU0FDRztRQUNILE1BQU1OLE9BQU9aLDJFQUFtQkE7UUFFaEMsSUFBSUssb0JBQW9CLGFBQWE7WUFDbkNPLEtBQUtFLFVBQVUsQ0FBQ0ssS0FBSztRQUN2QixPQUFPLElBQUlkLG9CQUFvQixVQUFVO1lBQ3ZDTyxLQUFLRSxVQUFVLENBQUNNLE9BQU87UUFDekIsQ0FBQztJQUNIO0lBRUEscUJBQ0U7OzBCQUNFLDhEQUFDQzswQkFBRTs7Ozs7OzBCQUtILDhEQUFDQzs7a0NBQ0MsOERBQUNDO3dCQUFHQyxXQUFVOzs0QkFBbUM7MENBQzVCLDhEQUFDQzswQ0FBTXBCOzs7Ozs7Ozs7Ozs7a0NBRzVCLDhEQUFDcUI7a0NBQ0MsNEVBQUNDOzRCQUNDQyxTQUFTWDs0QkFDVE8sV0FBVTtzQ0FFVG5CLG9CQUFvQixjQUFjLGVBQWUsU0FBUzs7Ozs7Ozs7Ozs7a0NBSS9ELDhEQUFDUCwwREFBTUE7d0JBQUMrQixZQUFZMUI7Ozs7Ozs7Ozs7Ozs7O0FBSTVCLENBQUM7R0FqRXVCRDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvYXV0aGVudGljYXRpb24vcGFnZS50c3g/NDE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgTW91c2VFdmVudEhhbmRsZXIsIE1vdXNlRXZlbnQsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IExvZ2dlciwgeyBMb2dFbnRyeSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0xvZ2dlclwiO1xuXG5pbXBvcnQgKiBhcyBBYmx5IGZyb20gXCJhYmx5L3Byb21pc2VzXCI7XG5pbXBvcnQgeyBhc3NlcnRDb25maWd1cmF0aW9uLCBjb25maWd1cmVBYmx5IH0gZnJvbSBcIkBhYmx5LWxhYnMvcmVhY3QtaG9va3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXV0aGVudGljYXRpb24oKSB7XG4gIGNvbnN0IFtsb2dzLCBzZXRMb2dzXSA9IHVzZVN0YXRlPEFycmF5PExvZ0VudHJ5Pj4oW10pO1xuICBjb25zdCBbY29ubmVjdGlvblN0YXRlLCBzZXRDb25uZWN0aW9uU3RhdGVdID0gdXNlU3RhdGUoXCJ1bmtub3duXCIpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ29ubmVjdGlvblN0YXRlQ2hhbmdlID0gKFxuICAgICAgc3RhdGVDaGFuZ2U6IEFibHkuVHlwZXMuQ29ubmVjdGlvblN0YXRlQ2hhbmdlLFxuICAgICkgPT4ge1xuICAgICAgc2V0TG9ncygocHJldikgPT4gW1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBuZXcgTG9nRW50cnkoXG4gICAgICAgICAgYENvbm5lY3Rpb24gc3RhdGUgY2hhbmdlOiAke3N0YXRlQ2hhbmdlLnByZXZpb3VzfSAtPiAke3N0YXRlQ2hhbmdlLmN1cnJlbnR9YCxcbiAgICAgICAgKSxcbiAgICAgIF0pO1xuXG4gICAgICBzZXRDb25uZWN0aW9uU3RhdGUoc3RhdGVDaGFuZ2UuY3VycmVudCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFibHk6IEFibHkuVHlwZXMuUmVhbHRpbWVQcm9taXNlID0gY29uZmlndXJlQWJseSh7XG4gICAgICBhdXRoVXJsOiBcIi9hcGkvYXV0aGVudGljYXRpb24vdG9rZW4tYXV0aFwiLFxuICAgIH0pO1xuICAgIGFibHkuY29ubmVjdGlvbi5vbihoYW5kbGVDb25uZWN0aW9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGFibHkuY29ubmVjdGlvbi5vZmYoKTtcbiAgICB9O1xuICB9LCBbXSk7IC8vIE9ubHkgcnVuIHRoZSBjbGllbnRcblxuICBjb25zdCBjb25uZWN0aW9uVG9nZ2xlOiBNb3VzZUV2ZW50SGFuZGxlciA9IChcbiAgICBfZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+LFxuICApID0+IHtcbiAgICBjb25zdCBhYmx5ID0gYXNzZXJ0Q29uZmlndXJhdGlvbigpO1xuXG4gICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgYWJseS5jb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgfSBlbHNlIGlmIChjb25uZWN0aW9uU3RhdGUgPT09IFwiY2xvc2VkXCIpIHtcbiAgICAgIGFibHkuY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxwPlxuICAgICAgICBBdXRoZW50aWNhdGUgYW5kIGVzdGFibGlzaCBhIHBlcnNpc3RlbnQgYmktZGlyZWN0aW9uIGNvbm5lY3Rpb24gdG8gdGhlXG4gICAgICAgIEFibHkgcGxhdGZvcm0uXG4gICAgICA8L3A+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC0zeCBtdC00IGZvbnQtYm9sZCB1bmRlcmxpbmVcIj5cbiAgICAgICAgICBDb25uZWN0aW9uIHN0YXR1czogPHNwYW4+e2Nvbm5lY3Rpb25TdGF0ZX08L3NwYW4+XG4gICAgICAgIDwvaDM+XG5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtjb25uZWN0aW9uVG9nZ2xlfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtNCBweC0zIHB5LTMgdGV4dC1pbmRpZ28tNjAwIGJnLWluZGlnby01MCByb3VuZGVkLWxnIGR1cmF0aW9uLTE1MCBob3ZlcjpiZy1pbmRpZ28tMTAwIGFjdGl2ZTpiZy1pbmRpZ28tMjAwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y29ubmVjdGlvblN0YXRlID09PSBcImNvbm5lY3RlZFwiID8gXCJEaXNjb25uZWN0XCIgOiBcIkNvbm5lY3RcIn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPExvZ2dlciBsb2dFbnRyaWVzPXtsb2dzfSAvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufVxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiTG9nZ2VyIiwiTG9nRW50cnkiLCJhc3NlcnRDb25maWd1cmF0aW9uIiwiY29uZmlndXJlQWJseSIsIkF1dGhlbnRpY2F0aW9uIiwibG9ncyIsInNldExvZ3MiLCJjb25uZWN0aW9uU3RhdGUiLCJzZXRDb25uZWN0aW9uU3RhdGUiLCJoYW5kbGVDb25uZWN0aW9uU3RhdGVDaGFuZ2UiLCJzdGF0ZUNoYW5nZSIsInByZXYiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJhYmx5IiwiYXV0aFVybCIsImNvbm5lY3Rpb24iLCJvbiIsIm9mZiIsImNvbm5lY3Rpb25Ub2dnbGUiLCJfZXZlbnQiLCJjbG9zZSIsImNvbm5lY3QiLCJwIiwic2VjdGlvbiIsImgzIiwiY2xhc3NOYW1lIiwic3BhbiIsImRpdiIsImJ1dHRvbiIsIm9uQ2xpY2siLCJsb2dFbnRyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./app/authentication/page.tsx\n"));

/***/ }),

/***/ "(app-client)/./components/Logger.tsx":
/*!*******************************!*\
  !*** ./components/Logger.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LogEntry\": function() { return /* binding */ LogEntry; },\n/* harmony export */   \"default\": function() { return /* binding */ Logger; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nclass LogEntry {\n    constructor(message){\n        this.timestamp = new Date();\n        this.message = message;\n    }\n}\nfunction Logger(param) {\n    let { logEntries  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n        className: \"mt-4 divide-y\",\n        children: // Show the newest log entry at the top\n        logEntries.sort((a, b)=>{\n            return b.timestamp.getTime() - a.timestamp.getTime();\n        }).map((logEntry, index)=>{\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                className: \"py-5 flex items-start justify-between\",\n                children: [\n                    logEntry.timestamp.toISOString(),\n                    \": \",\n                    logEntry.message\n                ]\n            }, index, true, {\n                fileName: \"/Users/rdzcn/projects/pet/online-memory-game/components/Logger.tsx\",\n                lineNumber: 26,\n                columnNumber: 15\n            }, this);\n        })\n    }, void 0, false, {\n        fileName: \"/Users/rdzcn/projects/pet/online-memory-game/components/Logger.tsx\",\n        lineNumber: 17,\n        columnNumber: 5\n    }, this);\n}\n_c = Logger;\nvar _c;\n$RefreshReg$(_c, \"Logger\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vY29tcG9uZW50cy9Mb2dnZXIudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQTtJQUlYQyxZQUFZQyxPQUFlLENBQUU7UUFDM0IsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUM7UUFDckIsSUFBSSxDQUFDRixPQUFPLEdBQUdBO0lBQ2pCO0FBQ0YsQ0FBQztBQU1jLFNBQVNHLE9BQU8sS0FBNEIsRUFBRTtRQUE5QixFQUFFQyxXQUFVLEVBQWdCLEdBQTVCO0lBQzdCLHFCQUNFLDhEQUFDQztRQUFHQyxXQUFVO2tCQUdWRix1Q0FEdUM7UUFDdkNBLFdBQ0dHLElBQUksQ0FBQyxDQUFDQyxHQUFhQyxJQUFnQjtZQUNsQyxPQUFPQSxFQUFFUixTQUFTLENBQUNTLE9BQU8sS0FBS0YsRUFBRVAsU0FBUyxDQUFDUyxPQUFPO1FBQ3BELEdBQ0NDLEdBQUcsQ0FBQyxDQUFDQyxVQUFvQkMsUUFBa0I7WUFDMUMscUJBQ0UsOERBQUNDO2dCQUFlUixXQUFVOztvQkFDdkJNLFNBQVNYLFNBQVMsQ0FBQ2MsV0FBVztvQkFBRztvQkFBR0gsU0FBU1osT0FBTzs7ZUFEOUNhOzs7OztRQUliOzs7Ozs7QUFJVixDQUFDO0tBbkJ1QlYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9Mb2dnZXIudHN4PzFhYTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIExvZ0VudHJ5IHtcbiAgcHVibGljIHRpbWVzdGFtcDogRGF0ZTtcbiAgcHVibGljIG1lc3NhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBMb2dnaW5nUHJvcHMgPSB7XG4gIGxvZ0VudHJpZXM6IEFycmF5PExvZ0VudHJ5Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2dlcih7IGxvZ0VudHJpZXMgfTogTG9nZ2luZ1Byb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPHVsIGNsYXNzTmFtZT1cIm10LTQgZGl2aWRlLXlcIj5cbiAgICAgIHtcbiAgICAgICAgLy8gU2hvdyB0aGUgbmV3ZXN0IGxvZyBlbnRyeSBhdCB0aGUgdG9wXG4gICAgICAgIGxvZ0VudHJpZXNcbiAgICAgICAgICAuc29ydCgoYTogTG9nRW50cnksIGI6IExvZ0VudHJ5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYi50aW1lc3RhbXAuZ2V0VGltZSgpIC0gYS50aW1lc3RhbXAuZ2V0VGltZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm1hcCgobG9nRW50cnk6IExvZ0VudHJ5LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPVwicHktNSBmbGV4IGl0ZW1zLXN0YXJ0IGp1c3RpZnktYmV0d2VlblwiPlxuICAgICAgICAgICAgICAgIHtsb2dFbnRyeS50aW1lc3RhbXAudG9JU09TdHJpbmcoKX06IHtsb2dFbnRyeS5tZXNzYWdlfVxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvdWw+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiTG9nRW50cnkiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiTG9nZ2VyIiwibG9nRW50cmllcyIsInVsIiwiY2xhc3NOYW1lIiwic29ydCIsImEiLCJiIiwiZ2V0VGltZSIsIm1hcCIsImxvZ0VudHJ5IiwiaW5kZXgiLCJsaSIsInRvSVNPU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./components/Logger.tsx\n"));

/***/ }),

/***/ "(app-client)/./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={675:function(e,r){\"use strict\";r.byteLength=byteLength;r.toByteArray=toByteArray;r.fromByteArray=fromByteArray;var t=[];var f=[];var n=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var o=0,u=i.length;o<u;++o){t[o]=i[o];f[i.charCodeAt(o)]=o}f[\"-\".charCodeAt(0)]=62;f[\"_\".charCodeAt(0)]=63;function getLens(e){var r=e.length;if(r%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var t=e.indexOf(\"=\");if(t===-1)t=r;var f=t===r?0:4-t%4;return[t,f]}function byteLength(e){var r=getLens(e);var t=r[0];var f=r[1];return(t+f)*3/4-f}function _byteLength(e,r,t){return(r+t)*3/4-t}function toByteArray(e){var r;var t=getLens(e);var i=t[0];var o=t[1];var u=new n(_byteLength(e,i,o));var a=0;var s=o>0?i-4:i;var h;for(h=0;h<s;h+=4){r=f[e.charCodeAt(h)]<<18|f[e.charCodeAt(h+1)]<<12|f[e.charCodeAt(h+2)]<<6|f[e.charCodeAt(h+3)];u[a++]=r>>16&255;u[a++]=r>>8&255;u[a++]=r&255}if(o===2){r=f[e.charCodeAt(h)]<<2|f[e.charCodeAt(h+1)]>>4;u[a++]=r&255}if(o===1){r=f[e.charCodeAt(h)]<<10|f[e.charCodeAt(h+1)]<<4|f[e.charCodeAt(h+2)]>>2;u[a++]=r>>8&255;u[a++]=r&255}return u}function tripletToBase64(e){return t[e>>18&63]+t[e>>12&63]+t[e>>6&63]+t[e&63]}function encodeChunk(e,r,t){var f;var n=[];for(var i=r;i<t;i+=3){f=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255);n.push(tripletToBase64(f))}return n.join(\"\")}function fromByteArray(e){var r;var f=e.length;var n=f%3;var i=[];var o=16383;for(var u=0,a=f-n;u<a;u+=o){i.push(encodeChunk(e,u,u+o>a?a:u+o))}if(n===1){r=e[f-1];i.push(t[r>>2]+t[r<<4&63]+\"==\")}else if(n===2){r=(e[f-2]<<8)+e[f-1];i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")}return i.join(\"\")}},72:function(e,r,t){\"use strict\";\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */var f=t(675);var n=t(783);var i=typeof Symbol===\"function\"&&typeof Symbol.for===\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;r.Buffer=Buffer;r.SlowBuffer=SlowBuffer;r.INSPECT_MAX_BYTES=50;var o=2147483647;r.kMaxLength=o;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(\"This browser lacks typed array (Uint8Array) support which is required by \"+\"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\")}function typedArraySupport(){try{var e=new Uint8Array(1);var r={foo:function(){return 42}};Object.setPrototypeOf(r,Uint8Array.prototype);Object.setPrototypeOf(e,r);return e.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,\"parent\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,\"offset\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(e){if(e>o){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}var r=new Uint8Array(e);Object.setPrototypeOf(r,Buffer.prototype);return r}function Buffer(e,r,t){if(typeof e===\"number\"){if(typeof r===\"string\"){throw new TypeError('The \"string\" argument must be of type string. Received type number')}return allocUnsafe(e)}return from(e,r,t)}Buffer.poolSize=8192;function from(e,r,t){if(typeof e===\"string\"){return fromString(e,r)}if(ArrayBuffer.isView(e)){return fromArrayLike(e)}if(e==null){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer)){return fromArrayBuffer(e,r,t)}if(typeof SharedArrayBuffer!==\"undefined\"&&(isInstance(e,SharedArrayBuffer)||e&&isInstance(e.buffer,SharedArrayBuffer))){return fromArrayBuffer(e,r,t)}if(typeof e===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type number')}var f=e.valueOf&&e.valueOf();if(f!=null&&f!==e){return Buffer.from(f,r,t)}var n=fromObject(e);if(n)return n;if(typeof Symbol!==\"undefined\"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]===\"function\"){return Buffer.from(e[Symbol.toPrimitive](\"string\"),r,t)}throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}Buffer.from=function(e,r,t){return from(e,r,t)};Object.setPrototypeOf(Buffer.prototype,Uint8Array.prototype);Object.setPrototypeOf(Buffer,Uint8Array);function assertSize(e){if(typeof e!==\"number\"){throw new TypeError('\"size\" argument must be of type number')}else if(e<0){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}}function alloc(e,r,t){assertSize(e);if(e<=0){return createBuffer(e)}if(r!==undefined){return typeof t===\"string\"?createBuffer(e).fill(r,t):createBuffer(e).fill(r)}return createBuffer(e)}Buffer.alloc=function(e,r,t){return alloc(e,r,t)};function allocUnsafe(e){assertSize(e);return createBuffer(e<0?0:checked(e)|0)}Buffer.allocUnsafe=function(e){return allocUnsafe(e)};Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)};function fromString(e,r){if(typeof r!==\"string\"||r===\"\"){r=\"utf8\"}if(!Buffer.isEncoding(r)){throw new TypeError(\"Unknown encoding: \"+r)}var t=byteLength(e,r)|0;var f=createBuffer(t);var n=f.write(e,r);if(n!==t){f=f.slice(0,n)}return f}function fromArrayLike(e){var r=e.length<0?0:checked(e.length)|0;var t=createBuffer(r);for(var f=0;f<r;f+=1){t[f]=e[f]&255}return t}function fromArrayBuffer(e,r,t){if(r<0||e.byteLength<r){throw new RangeError('\"offset\" is outside of buffer bounds')}if(e.byteLength<r+(t||0)){throw new RangeError('\"length\" is outside of buffer bounds')}var f;if(r===undefined&&t===undefined){f=new Uint8Array(e)}else if(t===undefined){f=new Uint8Array(e,r)}else{f=new Uint8Array(e,r,t)}Object.setPrototypeOf(f,Buffer.prototype);return f}function fromObject(e){if(Buffer.isBuffer(e)){var r=checked(e.length)|0;var t=createBuffer(r);if(t.length===0){return t}e.copy(t,0,0,r);return t}if(e.length!==undefined){if(typeof e.length!==\"number\"||numberIsNaN(e.length)){return createBuffer(0)}return fromArrayLike(e)}if(e.type===\"Buffer\"&&Array.isArray(e.data)){return fromArrayLike(e.data)}}function checked(e){if(e>=o){throw new RangeError(\"Attempt to allocate Buffer larger than maximum \"+\"size: 0x\"+o.toString(16)+\" bytes\")}return e|0}function SlowBuffer(e){if(+e!=e){e=0}return Buffer.alloc(+e)}Buffer.isBuffer=function isBuffer(e){return e!=null&&e._isBuffer===true&&e!==Buffer.prototype};Buffer.compare=function compare(e,r){if(isInstance(e,Uint8Array))e=Buffer.from(e,e.offset,e.byteLength);if(isInstance(r,Uint8Array))r=Buffer.from(r,r.offset,r.byteLength);if(!Buffer.isBuffer(e)||!Buffer.isBuffer(r)){throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array')}if(e===r)return 0;var t=e.length;var f=r.length;for(var n=0,i=Math.min(t,f);n<i;++n){if(e[n]!==r[n]){t=e[n];f=r[n];break}}if(t<f)return-1;if(f<t)return 1;return 0};Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return true;default:return false}};Buffer.concat=function concat(e,r){if(!Array.isArray(e)){throw new TypeError('\"list\" argument must be an Array of Buffers')}if(e.length===0){return Buffer.alloc(0)}var t;if(r===undefined){r=0;for(t=0;t<e.length;++t){r+=e[t].length}}var f=Buffer.allocUnsafe(r);var n=0;for(t=0;t<e.length;++t){var i=e[t];if(isInstance(i,Uint8Array)){i=Buffer.from(i)}if(!Buffer.isBuffer(i)){throw new TypeError('\"list\" argument must be an Array of Buffers')}i.copy(f,n);n+=i.length}return f};function byteLength(e,r){if(Buffer.isBuffer(e)){return e.length}if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer)){return e.byteLength}if(typeof e!==\"string\"){throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. '+\"Received type \"+typeof e)}var t=e.length;var f=arguments.length>2&&arguments[2]===true;if(!f&&t===0)return 0;var n=false;for(;;){switch(r){case\"ascii\":case\"latin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return utf8ToBytes(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"base64\":return base64ToBytes(e).length;default:if(n){return f?-1:utf8ToBytes(e).length}r=(\"\"+r).toLowerCase();n=true}}}Buffer.byteLength=byteLength;function slowToString(e,r,t){var f=false;if(r===undefined||r<0){r=0}if(r>this.length){return\"\"}if(t===undefined||t>this.length){t=this.length}if(t<=0){return\"\"}t>>>=0;r>>>=0;if(t<=r){return\"\"}if(!e)e=\"utf8\";while(true){switch(e){case\"hex\":return hexSlice(this,r,t);case\"utf8\":case\"utf-8\":return utf8Slice(this,r,t);case\"ascii\":return asciiSlice(this,r,t);case\"latin1\":case\"binary\":return latin1Slice(this,r,t);case\"base64\":return base64Slice(this,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return utf16leSlice(this,r,t);default:if(f)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase();f=true}}}Buffer.prototype._isBuffer=true;function swap(e,r,t){var f=e[r];e[r]=e[t];e[t]=f}Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!==0){throw new RangeError(\"Buffer size must be a multiple of 16-bits\")}for(var r=0;r<e;r+=2){swap(this,r,r+1)}return this};Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!==0){throw new RangeError(\"Buffer size must be a multiple of 32-bits\")}for(var r=0;r<e;r+=4){swap(this,r,r+3);swap(this,r+1,r+2)}return this};Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!==0){throw new RangeError(\"Buffer size must be a multiple of 64-bits\")}for(var r=0;r<e;r+=8){swap(this,r,r+7);swap(this,r+1,r+6);swap(this,r+2,r+5);swap(this,r+3,r+4)}return this};Buffer.prototype.toString=function toString(){var e=this.length;if(e===0)return\"\";if(arguments.length===0)return utf8Slice(this,0,e);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(this===e)return true;return Buffer.compare(this,e)===0};Buffer.prototype.inspect=function inspect(){var e=\"\";var t=r.INSPECT_MAX_BYTES;e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim();if(this.length>t)e+=\" ... \";return\"<Buffer \"+e+\">\"};if(i){Buffer.prototype[i]=Buffer.prototype.inspect}Buffer.prototype.compare=function compare(e,r,t,f,n){if(isInstance(e,Uint8Array)){e=Buffer.from(e,e.offset,e.byteLength)}if(!Buffer.isBuffer(e)){throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. '+\"Received type \"+typeof e)}if(r===undefined){r=0}if(t===undefined){t=e?e.length:0}if(f===undefined){f=0}if(n===undefined){n=this.length}if(r<0||t>e.length||f<0||n>this.length){throw new RangeError(\"out of range index\")}if(f>=n&&r>=t){return 0}if(f>=n){return-1}if(r>=t){return 1}r>>>=0;t>>>=0;f>>>=0;n>>>=0;if(this===e)return 0;var i=n-f;var o=t-r;var u=Math.min(i,o);var a=this.slice(f,n);var s=e.slice(r,t);for(var h=0;h<u;++h){if(a[h]!==s[h]){i=a[h];o=s[h];break}}if(i<o)return-1;if(o<i)return 1;return 0};function bidirectionalIndexOf(e,r,t,f,n){if(e.length===0)return-1;if(typeof t===\"string\"){f=t;t=0}else if(t>2147483647){t=2147483647}else if(t<-2147483648){t=-2147483648}t=+t;if(numberIsNaN(t)){t=n?0:e.length-1}if(t<0)t=e.length+t;if(t>=e.length){if(n)return-1;else t=e.length-1}else if(t<0){if(n)t=0;else return-1}if(typeof r===\"string\"){r=Buffer.from(r,f)}if(Buffer.isBuffer(r)){if(r.length===0){return-1}return arrayIndexOf(e,r,t,f,n)}else if(typeof r===\"number\"){r=r&255;if(typeof Uint8Array.prototype.indexOf===\"function\"){if(n){return Uint8Array.prototype.indexOf.call(e,r,t)}else{return Uint8Array.prototype.lastIndexOf.call(e,r,t)}}return arrayIndexOf(e,[r],t,f,n)}throw new TypeError(\"val must be string, number or Buffer\")}function arrayIndexOf(e,r,t,f,n){var i=1;var o=e.length;var u=r.length;if(f!==undefined){f=String(f).toLowerCase();if(f===\"ucs2\"||f===\"ucs-2\"||f===\"utf16le\"||f===\"utf-16le\"){if(e.length<2||r.length<2){return-1}i=2;o/=2;u/=2;t/=2}}function read(e,r){if(i===1){return e[r]}else{return e.readUInt16BE(r*i)}}var a;if(n){var s=-1;for(a=t;a<o;a++){if(read(e,a)===read(r,s===-1?0:a-s)){if(s===-1)s=a;if(a-s+1===u)return s*i}else{if(s!==-1)a-=a-s;s=-1}}}else{if(t+u>o)t=o-u;for(a=t;a>=0;a--){var h=true;for(var c=0;c<u;c++){if(read(e,a+c)!==read(r,c)){h=false;break}}if(h)return a}}return-1}Buffer.prototype.includes=function includes(e,r,t){return this.indexOf(e,r,t)!==-1};Buffer.prototype.indexOf=function indexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,false)};function hexWrite(e,r,t,f){t=Number(t)||0;var n=e.length-t;if(!f){f=n}else{f=Number(f);if(f>n){f=n}}var i=r.length;if(f>i/2){f=i/2}for(var o=0;o<f;++o){var u=parseInt(r.substr(o*2,2),16);if(numberIsNaN(u))return o;e[t+o]=u}return o}function utf8Write(e,r,t,f){return blitBuffer(utf8ToBytes(r,e.length-t),e,t,f)}function asciiWrite(e,r,t,f){return blitBuffer(asciiToBytes(r),e,t,f)}function latin1Write(e,r,t,f){return asciiWrite(e,r,t,f)}function base64Write(e,r,t,f){return blitBuffer(base64ToBytes(r),e,t,f)}function ucs2Write(e,r,t,f){return blitBuffer(utf16leToBytes(r,e.length-t),e,t,f)}Buffer.prototype.write=function write(e,r,t,f){if(r===undefined){f=\"utf8\";t=this.length;r=0}else if(t===undefined&&typeof r===\"string\"){f=r;t=this.length;r=0}else if(isFinite(r)){r=r>>>0;if(isFinite(t)){t=t>>>0;if(f===undefined)f=\"utf8\"}else{f=t;t=undefined}}else{throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\")}var n=this.length-r;if(t===undefined||t>n)t=n;if(e.length>0&&(t<0||r<0)||r>this.length){throw new RangeError(\"Attempt to write outside buffer bounds\")}if(!f)f=\"utf8\";var i=false;for(;;){switch(f){case\"hex\":return hexWrite(this,e,r,t);case\"utf8\":case\"utf-8\":return utf8Write(this,e,r,t);case\"ascii\":return asciiWrite(this,e,r,t);case\"latin1\":case\"binary\":return latin1Write(this,e,r,t);case\"base64\":return base64Write(this,e,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return ucs2Write(this,e,r,t);default:if(i)throw new TypeError(\"Unknown encoding: \"+f);f=(\"\"+f).toLowerCase();i=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(e,r,t){if(r===0&&t===e.length){return f.fromByteArray(e)}else{return f.fromByteArray(e.slice(r,t))}}function utf8Slice(e,r,t){t=Math.min(e.length,t);var f=[];var n=r;while(n<t){var i=e[n];var o=null;var u=i>239?4:i>223?3:i>191?2:1;if(n+u<=t){var a,s,h,c;switch(u){case 1:if(i<128){o=i}break;case 2:a=e[n+1];if((a&192)===128){c=(i&31)<<6|a&63;if(c>127){o=c}}break;case 3:a=e[n+1];s=e[n+2];if((a&192)===128&&(s&192)===128){c=(i&15)<<12|(a&63)<<6|s&63;if(c>2047&&(c<55296||c>57343)){o=c}}break;case 4:a=e[n+1];s=e[n+2];h=e[n+3];if((a&192)===128&&(s&192)===128&&(h&192)===128){c=(i&15)<<18|(a&63)<<12|(s&63)<<6|h&63;if(c>65535&&c<1114112){o=c}}}}if(o===null){o=65533;u=1}else if(o>65535){o-=65536;f.push(o>>>10&1023|55296);o=56320|o&1023}f.push(o);n+=u}return decodeCodePointsArray(f)}var u=4096;function decodeCodePointsArray(e){var r=e.length;if(r<=u){return String.fromCharCode.apply(String,e)}var t=\"\";var f=0;while(f<r){t+=String.fromCharCode.apply(String,e.slice(f,f+=u))}return t}function asciiSlice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n]&127)}return f}function latin1Slice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n])}return f}function hexSlice(e,r,t){var f=e.length;if(!r||r<0)r=0;if(!t||t<0||t>f)t=f;var n=\"\";for(var i=r;i<t;++i){n+=s[e[i]]}return n}function utf16leSlice(e,r,t){var f=e.slice(r,t);var n=\"\";for(var i=0;i<f.length;i+=2){n+=String.fromCharCode(f[i]+f[i+1]*256)}return n}Buffer.prototype.slice=function slice(e,r){var t=this.length;e=~~e;r=r===undefined?t:~~r;if(e<0){e+=t;if(e<0)e=0}else if(e>t){e=t}if(r<0){r+=t;if(r<0)r=0}else if(r>t){r=t}if(r<e)r=e;var f=this.subarray(e,r);Object.setPrototypeOf(f,Buffer.prototype);return f};function checkOffset(e,r,t){if(e%1!==0||e<0)throw new RangeError(\"offset is not uint\");if(e+r>t)throw new RangeError(\"Trying to access beyond buffer length\")}Buffer.prototype.readUIntLE=function readUIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}return f};Buffer.prototype.readUIntBE=function readUIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t){checkOffset(e,r,this.length)}var f=this[e+--r];var n=1;while(r>0&&(n*=256)){f+=this[e+--r]*n}return f};Buffer.prototype.readUInt8=function readUInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);return this[e]};Buffer.prototype.readUInt16LE=function readUInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]|this[e+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]<<8|this[e+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};Buffer.prototype.readIntLE=function readIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}n*=128;if(f>=n)f-=Math.pow(2,8*r);return f};Buffer.prototype.readIntBE=function readIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=r;var n=1;var i=this[e+--f];while(f>0&&(n*=256)){i+=this[e+--f]*n}n*=128;if(i>=n)i-=Math.pow(2,8*r);return i};Buffer.prototype.readInt8=function readInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);if(!(this[e]&128))return this[e];return(255-this[e]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e]|this[e+1]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt16BE=function readInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e+1]|this[e]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt32LE=function readInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};Buffer.prototype.readFloatLE=function readFloatLE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,false,52,8)};function checkInt(e,r,t,f,n,i){if(!Buffer.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>n||r<i)throw new RangeError('\"value\" argument is out of bounds');if(t+f>e.length)throw new RangeError(\"Index out of range\")}Buffer.prototype.writeUIntLE=function writeUIntLE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=1;var o=0;this[r]=e&255;while(++o<t&&(i*=256)){this[r+o]=e/i&255}return r+t};Buffer.prototype.writeUIntBE=function writeUIntBE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=t-1;var o=1;this[r+i]=e&255;while(--i>=0&&(o*=256)){this[r+i]=e/o&255}return r+t};Buffer.prototype.writeUInt8=function writeUInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,255,0);this[r]=e&255;return r+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r+3]=e>>>24;this[r+2]=e>>>16;this[r+1]=e>>>8;this[r]=e&255;return r+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};Buffer.prototype.writeIntLE=function writeIntLE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=0;var o=1;var u=0;this[r]=e&255;while(++i<t&&(o*=256)){if(e<0&&u===0&&this[r+i-1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeIntBE=function writeIntBE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=t-1;var o=1;var u=0;this[r+i]=e&255;while(--i>=0&&(o*=256)){if(e<0&&u===0&&this[r+i+1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeInt8=function writeInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,127,-128);if(e<0)e=255+e+1;this[r]=e&255;return r+1};Buffer.prototype.writeInt16LE=function writeInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeInt16BE=function writeInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeInt32LE=function writeInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);this[r]=e&255;this[r+1]=e>>>8;this[r+2]=e>>>16;this[r+3]=e>>>24;return r+4};Buffer.prototype.writeInt32BE=function writeInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);if(e<0)e=4294967295+e+1;this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};function checkIEEE754(e,r,t,f,n,i){if(t+f>e.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\"Index out of range\")}function writeFloat(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,4,34028234663852886e22,-34028234663852886e22)}n.write(e,r,t,f,23,4);return t+4}Buffer.prototype.writeFloatLE=function writeFloatLE(e,r,t){return writeFloat(this,e,r,true,t)};Buffer.prototype.writeFloatBE=function writeFloatBE(e,r,t){return writeFloat(this,e,r,false,t)};function writeDouble(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,8,17976931348623157e292,-17976931348623157e292)}n.write(e,r,t,f,52,8);return t+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,r,t){return writeDouble(this,e,r,true,t)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,r,t){return writeDouble(this,e,r,false,t)};Buffer.prototype.copy=function copy(e,r,t,f){if(!Buffer.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(!t)t=0;if(!f&&f!==0)f=this.length;if(r>=e.length)r=e.length;if(!r)r=0;if(f>0&&f<t)f=t;if(f===t)return 0;if(e.length===0||this.length===0)return 0;if(r<0){throw new RangeError(\"targetStart out of bounds\")}if(t<0||t>=this.length)throw new RangeError(\"Index out of range\");if(f<0)throw new RangeError(\"sourceEnd out of bounds\");if(f>this.length)f=this.length;if(e.length-r<f-t){f=e.length-r+t}var n=f-t;if(this===e&&typeof Uint8Array.prototype.copyWithin===\"function\"){this.copyWithin(r,t,f)}else if(this===e&&t<r&&r<f){for(var i=n-1;i>=0;--i){e[i+r]=this[i+t]}}else{Uint8Array.prototype.set.call(e,this.subarray(t,f),r)}return n};Buffer.prototype.fill=function fill(e,r,t,f){if(typeof e===\"string\"){if(typeof r===\"string\"){f=r;r=0;t=this.length}else if(typeof t===\"string\"){f=t;t=this.length}if(f!==undefined&&typeof f!==\"string\"){throw new TypeError(\"encoding must be a string\")}if(typeof f===\"string\"&&!Buffer.isEncoding(f)){throw new TypeError(\"Unknown encoding: \"+f)}if(e.length===1){var n=e.charCodeAt(0);if(f===\"utf8\"&&n<128||f===\"latin1\"){e=n}}}else if(typeof e===\"number\"){e=e&255}else if(typeof e===\"boolean\"){e=Number(e)}if(r<0||this.length<r||this.length<t){throw new RangeError(\"Out of range index\")}if(t<=r){return this}r=r>>>0;t=t===undefined?this.length:t>>>0;if(!e)e=0;var i;if(typeof e===\"number\"){for(i=r;i<t;++i){this[i]=e}}else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,f);var u=o.length;if(u===0){throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"')}for(i=0;i<t-r;++i){this[i+r]=o[i%u]}}return this};var a=/[^+/0-9A-Za-z-_]/g;function base64clean(e){e=e.split(\"=\")[0];e=e.trim().replace(a,\"\");if(e.length<2)return\"\";while(e.length%4!==0){e=e+\"=\"}return e}function utf8ToBytes(e,r){r=r||Infinity;var t;var f=e.length;var n=null;var i=[];for(var o=0;o<f;++o){t=e.charCodeAt(o);if(t>55295&&t<57344){if(!n){if(t>56319){if((r-=3)>-1)i.push(239,191,189);continue}else if(o+1===f){if((r-=3)>-1)i.push(239,191,189);continue}n=t;continue}if(t<56320){if((r-=3)>-1)i.push(239,191,189);n=t;continue}t=(n-55296<<10|t-56320)+65536}else if(n){if((r-=3)>-1)i.push(239,191,189)}n=null;if(t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else{throw new Error(\"Invalid code point\")}}return i}function asciiToBytes(e){var r=[];for(var t=0;t<e.length;++t){r.push(e.charCodeAt(t)&255)}return r}function utf16leToBytes(e,r){var t,f,n;var i=[];for(var o=0;o<e.length;++o){if((r-=2)<0)break;t=e.charCodeAt(o);f=t>>8;n=t%256;i.push(n);i.push(f)}return i}function base64ToBytes(e){return f.toByteArray(base64clean(e))}function blitBuffer(e,r,t,f){for(var n=0;n<f;++n){if(n+t>=r.length||n>=e.length)break;r[n+t]=e[n]}return n}function isInstance(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function numberIsNaN(e){return e!==e}var s=function(){var e=\"0123456789abcdef\";var r=new Array(256);for(var t=0;t<16;++t){var f=t*16;for(var n=0;n<16;++n){r[f+n]=e[t]+e[n]}}return r}()},783:function(e,r){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nr.read=function(e,r,t,f,n){var i,o;var u=n*8-f-1;var a=(1<<u)-1;var s=a>>1;var h=-7;var c=t?n-1:0;var l=t?-1:1;var p=e[r+c];c+=l;i=p&(1<<-h)-1;p>>=-h;h+=u;for(;h>0;i=i*256+e[r+c],c+=l,h-=8){}o=i&(1<<-h)-1;i>>=-h;h+=f;for(;h>0;o=o*256+e[r+c],c+=l,h-=8){}if(i===0){i=1-s}else if(i===a){return o?NaN:(p?-1:1)*Infinity}else{o=o+Math.pow(2,f);i=i-s}return(p?-1:1)*o*Math.pow(2,i-f)};r.write=function(e,r,t,f,n,i){var o,u,a;var s=i*8-n-1;var h=(1<<s)-1;var c=h>>1;var l=n===23?Math.pow(2,-24)-Math.pow(2,-77):0;var p=f?0:i-1;var y=f?1:-1;var g=r<0||r===0&&1/r<0?1:0;r=Math.abs(r);if(isNaN(r)||r===Infinity){u=isNaN(r)?1:0;o=h}else{o=Math.floor(Math.log(r)/Math.LN2);if(r*(a=Math.pow(2,-o))<1){o--;a*=2}if(o+c>=1){r+=l/a}else{r+=l*Math.pow(2,1-c)}if(r*a>=2){o++;a/=2}if(o+c>=h){u=0;o=h}else if(o+c>=1){u=(r*a-1)*Math.pow(2,n);o=o+c}else{u=r*Math.pow(2,c-1)*Math.pow(2,n);o=0}}for(;n>=8;e[t+p]=u&255,p+=y,u/=256,n-=8){}o=o<<n|u;s+=n;for(;s>0;e[t+p]=o&255,p+=y,o/=256,s-=8){}e[t+p-y]|=g*128}}};var r={};function __nccwpck_require__(t){var f=r[t];if(f!==undefined){return f.exports}var n=r[t]={exports:{}};var i=true;try{e[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(72);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9idWZmZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxrQkFBa0IsYUFBYSx3QkFBd0IsMEJBQTBCLDhCQUE4QixTQUFTLFNBQVMsdURBQXVELHlFQUF5RSx1QkFBdUIsSUFBSSxLQUFLLFVBQVUscUJBQXFCLHdCQUF3Qix3QkFBd0Isb0JBQW9CLGVBQWUsVUFBVSxrRUFBa0UscUJBQXFCLGNBQWMsb0JBQW9CLFlBQVksdUJBQXVCLGlCQUFpQixXQUFXLFdBQVcsa0JBQWtCLDRCQUE0QixrQkFBa0Isd0JBQXdCLE1BQU0saUJBQWlCLFdBQVcsV0FBVyxnQ0FBZ0MsUUFBUSxnQkFBZ0IsTUFBTSxRQUFRLElBQUksTUFBTSwrRkFBK0YsaUJBQWlCLGdCQUFnQixhQUFhLFVBQVUsZ0RBQWdELGFBQWEsVUFBVSx5RUFBeUUsZ0JBQWdCLGFBQWEsU0FBUyw0QkFBNEIsa0RBQWtELDRCQUE0QixNQUFNLFNBQVMsWUFBWSxJQUFJLE1BQU0scURBQXFELDJCQUEyQixrQkFBa0IsMEJBQTBCLE1BQU0sZUFBZSxVQUFVLFNBQVMsWUFBWSxrQkFBa0IsSUFBSSxNQUFNLHFDQUFxQyxVQUFVLFNBQVMsZ0NBQWdDLGVBQWUscUJBQXFCLDJDQUEyQyxtQkFBbUIsb0JBQW9CO0FBQzlyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWEsK0dBQStHLGdCQUFnQix3QkFBd0IsdUJBQXVCLGlCQUFpQixlQUFlLCtDQUErQyxpR0FBaUcsa0tBQWtLLDZCQUE2QixJQUFJLHdCQUF3QixPQUFPLGVBQWUsWUFBWSw4Q0FBOEMsMkJBQTJCLG9CQUFvQixTQUFTLGNBQWMsaURBQWlELCtCQUErQiwyQ0FBMkMsb0JBQW9CLEVBQUUsaURBQWlELCtCQUErQiwyQ0FBMkMsd0JBQXdCLEVBQUUseUJBQXlCLFFBQVEsdUVBQXVFLHdCQUF3QiwwQ0FBMEMsU0FBUyx1QkFBdUIsd0JBQXdCLHdCQUF3QiwwRkFBMEYsc0JBQXNCLG1CQUFtQixxQkFBcUIscUJBQXFCLHdCQUF3Qix1QkFBdUIsMEJBQTBCLHdCQUF3QixZQUFZLG1KQUFtSixtRUFBbUUsOEJBQThCLHlIQUF5SCw4QkFBOEIsd0JBQXdCLDZGQUE2Riw2QkFBNkIsbUJBQW1CLDBCQUEwQixvQkFBb0IsY0FBYyxxR0FBcUcsd0RBQXdELG1KQUFtSiw0QkFBNEIsb0JBQW9CLDZEQUE2RCx5Q0FBeUMsdUJBQXVCLHdCQUF3Qiw4REFBOEQsYUFBYSx3RUFBd0Usc0JBQXNCLGNBQWMsU0FBUyx1QkFBdUIsa0JBQWtCLDZFQUE2RSx1QkFBdUIsNkJBQTZCLHFCQUFxQix3QkFBd0IsY0FBYyx3Q0FBd0MsK0JBQStCLHVCQUF1QixtQ0FBbUMsdUJBQXVCLHlCQUF5QixnQ0FBZ0MsU0FBUywwQkFBMEIsNENBQTRDLHdCQUF3QixzQkFBc0IsbUJBQW1CLFVBQVUsZUFBZSxTQUFTLDBCQUEwQix1Q0FBdUMsc0JBQXNCLFlBQVksSUFBSSxNQUFNLGNBQWMsU0FBUyxnQ0FBZ0Msd0JBQXdCLDZEQUE2RCwwQkFBMEIsNkRBQTZELE1BQU0saUNBQWlDLG9CQUFvQix1QkFBdUIsc0JBQXNCLEtBQUssd0JBQXdCLDBDQUEwQyxTQUFTLHVCQUF1Qix1QkFBdUIsMEJBQTBCLHNCQUFzQixpQkFBaUIsU0FBUyxnQkFBZ0IsU0FBUyx5QkFBeUIsc0RBQXNELHVCQUF1Qix3QkFBd0IsNkNBQTZDLDhCQUE4QixvQkFBb0IsU0FBUywyR0FBMkcsV0FBVyx1QkFBdUIsVUFBVSxJQUFJLHdCQUF3QixxQ0FBcUMsMERBQTBELHFDQUFxQyxtRUFBbUUsbUVBQW1FLDZDQUE2Qyw2RkFBNkYsa0JBQWtCLGVBQWUsZUFBZSw0QkFBNEIsSUFBSSxLQUFLLGdCQUFnQixPQUFPLE9BQU8sT0FBTyxnQkFBZ0IsZ0JBQWdCLFVBQVUseUNBQXlDLGdDQUFnQyxvSkFBb0osdUJBQXVCLG1DQUFtQyxzQkFBc0IsbUVBQW1FLGlCQUFpQix1QkFBdUIsTUFBTSxrQkFBa0IsSUFBSSxRQUFRLFdBQVcsS0FBSyxnQkFBZ0IsNEJBQTRCLFFBQVEsUUFBUSxXQUFXLEtBQUssV0FBVyw2QkFBNkIsaUJBQWlCLHdCQUF3QixtRUFBbUUsWUFBWSxZQUFZLFVBQVUseUJBQXlCLHVCQUF1QixnQkFBZ0IscURBQXFELG9CQUFvQix3QkFBd0IsNEhBQTRILGVBQWUsOENBQThDLHNCQUFzQixZQUFZLE1BQU0sRUFBRSxVQUFVLCtDQUErQyxvREFBb0QsK0RBQStELHVCQUF1Qiw0Q0FBNEMsY0FBYyxrQ0FBa0MsdUJBQXVCLFNBQVMsNkJBQTZCLDZCQUE2QixZQUFZLHVCQUF1QixJQUFJLGtCQUFrQixTQUFTLGlDQUFpQyxjQUFjLFNBQVMsU0FBUyxPQUFPLE9BQU8sU0FBUyxTQUFTLGVBQWUsWUFBWSxVQUFVLG9DQUFvQyxrREFBa0Qsd0NBQXdDLHVEQUF1RCwwQ0FBMEMsa0ZBQWtGLHlEQUF5RCx1QkFBdUIsU0FBUyxnQ0FBZ0MscUJBQXFCLFdBQVcsVUFBVSxPQUFPLDBDQUEwQyxrQkFBa0IsWUFBWSxrRUFBa0UsWUFBWSxJQUFJLE1BQU0saUJBQWlCLGFBQWEsMENBQTBDLGtCQUFrQixZQUFZLGtFQUFrRSxZQUFZLElBQUksTUFBTSxpQkFBaUIsbUJBQW1CLGFBQWEsMENBQTBDLGtCQUFrQixZQUFZLGtFQUFrRSxZQUFZLElBQUksTUFBTSxpQkFBaUIsbUJBQW1CLG1CQUFtQixtQkFBbUIsYUFBYSw4Q0FBOEMsa0JBQWtCLGtCQUFrQixtREFBbUQsMkNBQTJDLDBEQUEwRCwyQ0FBMkMsd0VBQXdFLHdCQUF3QixtQ0FBbUMsNENBQTRDLFNBQVMsMEJBQTBCLHVDQUF1QyxFQUFFLGtCQUFrQiw0QkFBNEIsd0JBQXdCLE1BQU0sNkNBQTZDLHFEQUFxRCw2QkFBNkIsdUNBQXVDLHdCQUF3QixrSEFBa0gsa0JBQWtCLElBQUksa0JBQWtCLGVBQWUsa0JBQWtCLElBQUksa0JBQWtCLGNBQWMsd0NBQXdDLDJDQUEyQyxlQUFlLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxPQUFPLE9BQU8sT0FBTyxPQUFPLHFCQUFxQixVQUFVLFVBQVUsb0JBQW9CLHNCQUFzQixtQkFBbUIsWUFBWSxJQUFJLEtBQUssZ0JBQWdCLE9BQU8sT0FBTyxPQUFPLGdCQUFnQixnQkFBZ0IsVUFBVSx5Q0FBeUMseUJBQXlCLHdCQUF3QixJQUFJLElBQUksc0JBQXNCLGFBQWEsdUJBQXVCLGNBQWMsS0FBSyxtQkFBbUIsaUJBQWlCLG9CQUFvQixnQkFBZ0IsY0FBYyxrQkFBa0IsYUFBYSxTQUFTLGNBQWMsd0JBQXdCLG1CQUFtQix1QkFBdUIsaUJBQWlCLFNBQVMsK0JBQStCLDZCQUE2QixRQUFRLHFEQUFxRCxNQUFNLGdEQUFnRCxLQUFLLHFEQUFxRCxpQ0FBaUMsNERBQTRELGlDQUFpQyxRQUFRLGVBQWUsZUFBZSxrQkFBa0IsMEJBQTBCLDJEQUEyRCwyQkFBMkIsU0FBUyxJQUFJLEtBQUssS0FBSyxNQUFNLG1CQUFtQixVQUFVLFlBQVksS0FBSyw0QkFBNEIsTUFBTSxNQUFNLFNBQVMsUUFBUSxJQUFJLEtBQUsscUNBQXFDLGNBQWMsd0JBQXdCLEtBQUssaUJBQWlCLE9BQU8sS0FBSyxlQUFlLFFBQVEsS0FBSyxLQUFLLFdBQVcsWUFBWSxJQUFJLEtBQUssNEJBQTRCLFFBQVEsT0FBTyxlQUFlLFNBQVMsbURBQW1ELGlDQUFpQyxpREFBaUQsOENBQThDLHlEQUF5RCwrQ0FBK0MsMkJBQTJCLGVBQWUsaUJBQWlCLE9BQU8sSUFBSSxLQUFLLFlBQVksUUFBUSxLQUFLLGVBQWUsVUFBVSxNQUFNLFlBQVksSUFBSSxLQUFLLG1DQUFtQywyQkFBMkIsU0FBUyxTQUFTLDRCQUE0QixtREFBbUQsNkJBQTZCLHlDQUF5Qyw4QkFBOEIsMkJBQTJCLDhCQUE4QiwwQ0FBMEMsNEJBQTRCLHNEQUFzRCwrQ0FBK0Msa0JBQWtCLFNBQVMsY0FBYyxJQUFJLDRDQUE0QyxJQUFJLGNBQWMsSUFBSSxxQkFBcUIsUUFBUSxnQkFBZ0IsUUFBUSwwQkFBMEIsS0FBSyxJQUFJLGFBQWEsS0FBSywyRkFBMkYsb0JBQW9CLDBCQUEwQiwwQ0FBMEMsK0RBQStELGVBQWUsWUFBWSxNQUFNLEVBQUUsVUFBVSxzQ0FBc0Msb0RBQW9ELDBDQUEwQyx5REFBeUQsNENBQTRDLGlGQUFpRix5REFBeUQsdUJBQXVCLFVBQVUsMENBQTBDLE9BQU8sbUVBQW1FLDRCQUE0Qix3QkFBd0IsMEJBQTBCLEtBQUssc0NBQXNDLDBCQUEwQix1QkFBdUIsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLGdDQUFnQyxXQUFXLFlBQVksVUFBVSxpQkFBaUIsSUFBSSxNQUFNLGdCQUFnQixrQkFBa0IsaUJBQWlCLFVBQVUsS0FBSyxNQUFNLGdCQUFnQixTQUFTLGlDQUFpQyw0QkFBNEIsK0JBQStCLEtBQUssTUFBTSxnQkFBZ0IsU0FBUyxTQUFTLGdEQUFnRCx1Q0FBdUMsdUJBQXVCLE9BQU8sYUFBYSxRQUFRLElBQUksaUJBQWlCLFNBQVMsMEJBQTBCLGVBQWUsVUFBVSxLQUFLLGdDQUFnQyxXQUFXLGtDQUFrQyxlQUFlLFNBQVMsMkNBQTJDLFNBQVMsUUFBUSxXQUFXLHFEQUFxRCxTQUFTLDJCQUEyQixTQUFTLHVCQUF1QixZQUFZLElBQUksS0FBSyxpQ0FBaUMsU0FBUyw0QkFBNEIsU0FBUyx1QkFBdUIsWUFBWSxJQUFJLEtBQUssNkJBQTZCLFNBQVMseUJBQXlCLGVBQWUsZUFBZSxvQkFBb0IsU0FBUyxZQUFZLElBQUksS0FBSyxXQUFXLFNBQVMsNkJBQTZCLG1CQUFtQixTQUFTLFlBQVksV0FBVyxNQUFNLHdDQUF3QyxTQUFTLDJDQUEyQyxrQkFBa0IsTUFBTSxzQkFBc0IsUUFBUSxLQUFLLFdBQVcsYUFBYSxJQUFJLFFBQVEsS0FBSyxXQUFXLGFBQWEsSUFBSSxXQUFXLHlCQUF5QiwwQ0FBMEMsVUFBVSw0QkFBNEIsMkRBQTJELHVFQUF1RSx1REFBdUQsUUFBUSxRQUFRLG1DQUFtQyxjQUFjLFFBQVEsUUFBUSx1QkFBdUIsZUFBZSxVQUFVLHVEQUF1RCxRQUFRLFFBQVEsT0FBTyw2QkFBNkIsa0JBQWtCLFFBQVEscUJBQXFCLGlCQUFpQixVQUFVLG1EQUFtRCxRQUFRLG1DQUFtQyxnQkFBZ0IseURBQXlELFFBQVEsbUNBQW1DLDZCQUE2Qix5REFBeUQsUUFBUSxtQ0FBbUMsNkJBQTZCLHlEQUF5RCxRQUFRLG1DQUFtQywrREFBK0QseURBQXlELFFBQVEsbUNBQW1DLGdFQUFnRSxxREFBcUQsUUFBUSxRQUFRLG1DQUFtQyxjQUFjLFFBQVEsUUFBUSx1QkFBdUIsZUFBZSxPQUFPLDJCQUEyQixVQUFVLHFEQUFxRCxRQUFRLFFBQVEsbUNBQW1DLFFBQVEsUUFBUSxrQkFBa0IscUJBQXFCLGlCQUFpQixPQUFPLDJCQUEyQixVQUFVLGlEQUFpRCxRQUFRLG1DQUFtQyxpQ0FBaUMsMEJBQTBCLHVEQUF1RCxRQUFRLG1DQUFtQywyQkFBMkIsK0JBQStCLHVEQUF1RCxRQUFRLG1DQUFtQywyQkFBMkIsK0JBQStCLHVEQUF1RCxRQUFRLG1DQUFtQyx5REFBeUQsdURBQXVELFFBQVEsbUNBQW1DLHlEQUF5RCx1REFBdUQsUUFBUSxtQ0FBbUMsaUNBQWlDLHVEQUF1RCxRQUFRLG1DQUFtQyxrQ0FBa0MseURBQXlELFFBQVEsbUNBQW1DLGlDQUFpQyx5REFBeUQsUUFBUSxtQ0FBbUMsa0NBQWtDLCtCQUErQiwwRkFBMEYsc0VBQXNFLDJEQUEyRCwyREFBMkQsS0FBSyxRQUFRLFFBQVEsT0FBTyx3QkFBd0IseUJBQXlCLFFBQVEsUUFBUSxjQUFjLHVCQUF1QixrQkFBa0IsWUFBWSwyREFBMkQsS0FBSyxRQUFRLFFBQVEsT0FBTyx3QkFBd0IseUJBQXlCLFVBQVUsUUFBUSxnQkFBZ0Isd0JBQXdCLGtCQUFrQixZQUFZLHVEQUF1RCxLQUFLLFFBQVEsaUNBQWlDLGNBQWMsWUFBWSw2REFBNkQsS0FBSyxRQUFRLG1DQUFtQyxjQUFjLGdCQUFnQixZQUFZLDZEQUE2RCxLQUFLLFFBQVEsbUNBQW1DLGNBQWMsZ0JBQWdCLFlBQVksNkRBQTZELEtBQUssUUFBUSx3Q0FBd0MsaUJBQWlCLGlCQUFpQixnQkFBZ0IsY0FBYyxZQUFZLDZEQUE2RCxLQUFLLFFBQVEsd0NBQXdDLGVBQWUsaUJBQWlCLGdCQUFnQixnQkFBZ0IsWUFBWSx5REFBeUQsS0FBSyxRQUFRLE9BQU8sd0JBQXdCLDRCQUE0QixRQUFRLFFBQVEsUUFBUSxjQUFjLHVCQUF1QixnQ0FBZ0MsSUFBSSx5QkFBeUIsWUFBWSx5REFBeUQsS0FBSyxRQUFRLE9BQU8sd0JBQXdCLDRCQUE0QixVQUFVLFFBQVEsUUFBUSxnQkFBZ0Isd0JBQXdCLGdDQUFnQyxJQUFJLHlCQUF5QixZQUFZLHFEQUFxRCxLQUFLLFFBQVEsb0NBQW9DLGlCQUFpQixjQUFjLFlBQVksMkRBQTJELEtBQUssUUFBUSx3Q0FBd0MsY0FBYyxnQkFBZ0IsWUFBWSwyREFBMkQsS0FBSyxRQUFRLHdDQUF3QyxjQUFjLGdCQUFnQixZQUFZLDJEQUEyRCxLQUFLLFFBQVEsa0RBQWtELGNBQWMsZ0JBQWdCLGlCQUFpQixpQkFBaUIsWUFBWSwyREFBMkQsS0FBSyxRQUFRLGtEQUFrRCx3QkFBd0IsZUFBZSxpQkFBaUIsZ0JBQWdCLGdCQUFnQixZQUFZLG1DQUFtQywyREFBMkQsa0RBQWtELCtCQUErQixLQUFLLFFBQVEsT0FBTyxpRUFBaUUsc0JBQXNCLFdBQVcsMkRBQTJELG9DQUFvQywyREFBMkQscUNBQXFDLGdDQUFnQyxLQUFLLFFBQVEsT0FBTyxtRUFBbUUsc0JBQXNCLFdBQVcsNkRBQTZELHFDQUFxQyw2REFBNkQsc0NBQXNDLDZDQUE2QywwRUFBMEUsVUFBVSwyQkFBMkIsMEJBQTBCLFVBQVUsZ0JBQWdCLGtCQUFrQiwwQ0FBMEMsUUFBUSxrREFBa0Qsa0VBQWtFLHVEQUF1RCwrQkFBK0IsbUJBQW1CLGVBQWUsVUFBVSxrRUFBa0UsdUJBQXVCLDRCQUE0QixjQUFjLEtBQUssS0FBSyxrQkFBa0IsS0FBSyxzREFBc0QsVUFBVSw2Q0FBNkMsd0JBQXdCLHdCQUF3QixJQUFJLElBQUksY0FBYyw2QkFBNkIsSUFBSSxjQUFjLHVDQUF1QyxpREFBaUQsK0NBQStDLDRDQUE0QyxpQkFBaUIsc0JBQXNCLG9DQUFvQyxNQUFNLDZCQUE2QixRQUFRLDhCQUE4QixZQUFZLHNDQUFzQywyQ0FBMkMsU0FBUyxZQUFZLFFBQVEsa0NBQWtDLFVBQVUsTUFBTSx3QkFBd0IsUUFBUSxJQUFJLEtBQUssV0FBVyxLQUFLLDRDQUE0QyxlQUFlLFVBQVUseUVBQXlFLFFBQVEsTUFBTSxLQUFLLGtCQUFrQixhQUFhLDBCQUEwQix3QkFBd0Isa0JBQWtCLHlCQUF5Qix1QkFBdUIsc0JBQXNCLFFBQVEsU0FBUywwQkFBMEIsY0FBYyxNQUFNLGVBQWUsV0FBVyxTQUFTLFlBQVksSUFBSSxLQUFLLGtCQUFrQixxQkFBcUIsT0FBTyxZQUFZLGlDQUFpQyxTQUFTLGlCQUFpQixpQ0FBaUMsU0FBUyxJQUFJLFNBQVMsWUFBWSxpQ0FBaUMsSUFBSSxTQUFTLDhCQUE4QixXQUFXLGlDQUFpQyxPQUFPLFVBQVUsa0JBQWtCLFVBQVUsZ0JBQWdCLGtCQUFrQiwwQkFBMEIsaUJBQWlCLGtCQUFrQix1Q0FBdUMsbUJBQW1CLGtCQUFrQixvREFBb0QsS0FBSyx1Q0FBdUMsU0FBUyx5QkFBeUIsU0FBUyxZQUFZLFdBQVcsS0FBSyw0QkFBNEIsU0FBUyw2QkFBNkIsVUFBVSxTQUFTLFlBQVksV0FBVyxLQUFLLGtCQUFrQixrQkFBa0IsT0FBTyxRQUFRLFVBQVUsVUFBVSxTQUFTLDBCQUEwQixxQ0FBcUMsNkJBQTZCLFlBQVksSUFBSSxLQUFLLG9DQUFvQyxZQUFZLFNBQVMseUJBQXlCLDJHQUEyRyx3QkFBd0IsYUFBYSxpQkFBaUIseUJBQXlCLHFCQUFxQixZQUFZLEtBQUssS0FBSyxXQUFXLFlBQVksS0FBSyxLQUFLLGtCQUFrQixTQUFTLEdBQUc7QUFDenh2QjtBQUNBLDJCQUEyQixRQUFRLGNBQWMsZUFBZSxXQUFXLFNBQVMsY0FBYyxhQUFhLGFBQWEsS0FBSyxjQUFjLE9BQU8sS0FBSyxLQUFLLElBQUksMkJBQTJCLGNBQWMsT0FBTyxLQUFLLEtBQUssSUFBSSwyQkFBMkIsVUFBVSxNQUFNLGVBQWUsK0JBQStCLEtBQUssa0JBQWtCLE1BQU0sa0NBQWtDLDhCQUE4QixVQUFVLGNBQWMsZUFBZSxXQUFXLCtDQUErQyxjQUFjLGFBQWEsNEJBQTRCLGNBQWMsMkJBQTJCLGVBQWUsSUFBSSxLQUFLLG1DQUFtQywyQkFBMkIsSUFBSSxLQUFLLFdBQVcsT0FBTyxLQUFLLHFCQUFxQixXQUFXLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxnQkFBZ0Isd0JBQXdCLE1BQU0sS0FBSyxrQ0FBa0MsS0FBSyxLQUFLLEtBQUssZ0NBQWdDLFNBQVMsS0FBSyxLQUFLLElBQUksZ0NBQWdDLG1CQUFtQixTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSyw4QkFBOEIsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvYnVmZmVyL2luZGV4LmpzPzQ5ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezY3NTpmdW5jdGlvbihlLHIpe1widXNlIHN0cmljdFwiO3IuYnl0ZUxlbmd0aD1ieXRlTGVuZ3RoO3IudG9CeXRlQXJyYXk9dG9CeXRlQXJyYXk7ci5mcm9tQnl0ZUFycmF5PWZyb21CeXRlQXJyYXk7dmFyIHQ9W107dmFyIGY9W107dmFyIG49dHlwZW9mIFVpbnQ4QXJyYXkhPT1cInVuZGVmaW5lZFwiP1VpbnQ4QXJyYXk6QXJyYXk7dmFyIGk9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7Zm9yKHZhciBvPTAsdT1pLmxlbmd0aDtvPHU7KytvKXt0W29dPWlbb107ZltpLmNoYXJDb2RlQXQobyldPW99ZltcIi1cIi5jaGFyQ29kZUF0KDApXT02MjtmW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzO2Z1bmN0aW9uIGdldExlbnMoZSl7dmFyIHI9ZS5sZW5ndGg7aWYociU0PjApe3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIil9dmFyIHQ9ZS5pbmRleE9mKFwiPVwiKTtpZih0PT09LTEpdD1yO3ZhciBmPXQ9PT1yPzA6NC10JTQ7cmV0dXJuW3QsZl19ZnVuY3Rpb24gYnl0ZUxlbmd0aChlKXt2YXIgcj1nZXRMZW5zKGUpO3ZhciB0PXJbMF07dmFyIGY9clsxXTtyZXR1cm4odCtmKSozLzQtZn1mdW5jdGlvbiBfYnl0ZUxlbmd0aChlLHIsdCl7cmV0dXJuKHIrdCkqMy80LXR9ZnVuY3Rpb24gdG9CeXRlQXJyYXkoZSl7dmFyIHI7dmFyIHQ9Z2V0TGVucyhlKTt2YXIgaT10WzBdO3ZhciBvPXRbMV07dmFyIHU9bmV3IG4oX2J5dGVMZW5ndGgoZSxpLG8pKTt2YXIgYT0wO3ZhciBzPW8+MD9pLTQ6aTt2YXIgaDtmb3IoaD0wO2g8cztoKz00KXtyPWZbZS5jaGFyQ29kZUF0KGgpXTw8MTh8ZltlLmNoYXJDb2RlQXQoaCsxKV08PDEyfGZbZS5jaGFyQ29kZUF0KGgrMildPDw2fGZbZS5jaGFyQ29kZUF0KGgrMyldO3VbYSsrXT1yPj4xNiYyNTU7dVthKytdPXI+PjgmMjU1O3VbYSsrXT1yJjI1NX1pZihvPT09Mil7cj1mW2UuY2hhckNvZGVBdChoKV08PDJ8ZltlLmNoYXJDb2RlQXQoaCsxKV0+PjQ7dVthKytdPXImMjU1fWlmKG89PT0xKXtyPWZbZS5jaGFyQ29kZUF0KGgpXTw8MTB8ZltlLmNoYXJDb2RlQXQoaCsxKV08PDR8ZltlLmNoYXJDb2RlQXQoaCsyKV0+PjI7dVthKytdPXI+PjgmMjU1O3VbYSsrXT1yJjI1NX1yZXR1cm4gdX1mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQoZSl7cmV0dXJuIHRbZT4+MTgmNjNdK3RbZT4+MTImNjNdK3RbZT4+NiY2M10rdFtlJjYzXX1mdW5jdGlvbiBlbmNvZGVDaHVuayhlLHIsdCl7dmFyIGY7dmFyIG49W107Zm9yKHZhciBpPXI7aTx0O2krPTMpe2Y9KGVbaV08PDE2JjE2NzExNjgwKSsoZVtpKzFdPDw4JjY1MjgwKSsoZVtpKzJdJjI1NSk7bi5wdXNoKHRyaXBsZXRUb0Jhc2U2NChmKSl9cmV0dXJuIG4uam9pbihcIlwiKX1mdW5jdGlvbiBmcm9tQnl0ZUFycmF5KGUpe3ZhciByO3ZhciBmPWUubGVuZ3RoO3ZhciBuPWYlMzt2YXIgaT1bXTt2YXIgbz0xNjM4Mztmb3IodmFyIHU9MCxhPWYtbjt1PGE7dSs9byl7aS5wdXNoKGVuY29kZUNodW5rKGUsdSx1K28+YT9hOnUrbykpfWlmKG49PT0xKXtyPWVbZi0xXTtpLnB1c2godFtyPj4yXSt0W3I8PDQmNjNdK1wiPT1cIil9ZWxzZSBpZihuPT09Mil7cj0oZVtmLTJdPDw4KStlW2YtMV07aS5wdXNoKHRbcj4+MTBdK3Rbcj4+NCY2M10rdFtyPDwyJjYzXStcIj1cIil9cmV0dXJuIGkuam9pbihcIlwiKX19LDcyOmZ1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL3ZhciBmPXQoNjc1KTt2YXIgbj10KDc4Myk7dmFyIGk9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5mb3I9PT1cImZ1bmN0aW9uXCI/U3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpOm51bGw7ci5CdWZmZXI9QnVmZmVyO3IuU2xvd0J1ZmZlcj1TbG93QnVmZmVyO3IuSU5TUEVDVF9NQVhfQllURVM9NTA7dmFyIG89MjE0NzQ4MzY0NztyLmtNYXhMZW5ndGg9bztCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVD10eXBlZEFycmF5U3VwcG9ydCgpO2lmKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCYmdHlwZW9mIGNvbnNvbGUhPT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgY29uc29sZS5lcnJvcj09PVwiZnVuY3Rpb25cIil7Y29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSBcIitcImBidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuXCIpfWZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0KCl7dHJ5e3ZhciBlPW5ldyBVaW50OEFycmF5KDEpO3ZhciByPXtmb286ZnVuY3Rpb24oKXtyZXR1cm4gNDJ9fTtPYmplY3Quc2V0UHJvdG90eXBlT2YocixVaW50OEFycmF5LnByb3RvdHlwZSk7T2JqZWN0LnNldFByb3RvdHlwZU9mKGUscik7cmV0dXJuIGUuZm9vKCk9PT00Mn1jYXRjaChlKXtyZXR1cm4gZmFsc2V9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLFwicGFyZW50XCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtpZighQnVmZmVyLmlzQnVmZmVyKHRoaXMpKXJldHVybiB1bmRlZmluZWQ7cmV0dXJuIHRoaXMuYnVmZmVyfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLFwib2Zmc2V0XCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtpZighQnVmZmVyLmlzQnVmZmVyKHRoaXMpKXJldHVybiB1bmRlZmluZWQ7cmV0dXJuIHRoaXMuYnl0ZU9mZnNldH19KTtmdW5jdGlvbiBjcmVhdGVCdWZmZXIoZSl7aWYoZT5vKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKX12YXIgcj1uZXcgVWludDhBcnJheShlKTtPYmplY3Quc2V0UHJvdG90eXBlT2YocixCdWZmZXIucHJvdG90eXBlKTtyZXR1cm4gcn1mdW5jdGlvbiBCdWZmZXIoZSxyLHQpe2lmKHR5cGVvZiBlPT09XCJudW1iZXJcIil7aWYodHlwZW9mIHI9PT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcicpfXJldHVybiBhbGxvY1Vuc2FmZShlKX1yZXR1cm4gZnJvbShlLHIsdCl9QnVmZmVyLnBvb2xTaXplPTgxOTI7ZnVuY3Rpb24gZnJvbShlLHIsdCl7aWYodHlwZW9mIGU9PT1cInN0cmluZ1wiKXtyZXR1cm4gZnJvbVN0cmluZyhlLHIpfWlmKEFycmF5QnVmZmVyLmlzVmlldyhlKSl7cmV0dXJuIGZyb21BcnJheUxpa2UoZSl9aWYoZT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIFwiK1wib3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIGUpfWlmKGlzSW5zdGFuY2UoZSxBcnJheUJ1ZmZlcil8fGUmJmlzSW5zdGFuY2UoZS5idWZmZXIsQXJyYXlCdWZmZXIpKXtyZXR1cm4gZnJvbUFycmF5QnVmZmVyKGUscix0KX1pZih0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIhPT1cInVuZGVmaW5lZFwiJiYoaXNJbnN0YW5jZShlLFNoYXJlZEFycmF5QnVmZmVyKXx8ZSYmaXNJbnN0YW5jZShlLmJ1ZmZlcixTaGFyZWRBcnJheUJ1ZmZlcikpKXtyZXR1cm4gZnJvbUFycmF5QnVmZmVyKGUscix0KX1pZih0eXBlb2YgZT09PVwibnVtYmVyXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyl9dmFyIGY9ZS52YWx1ZU9mJiZlLnZhbHVlT2YoKTtpZihmIT1udWxsJiZmIT09ZSl7cmV0dXJuIEJ1ZmZlci5mcm9tKGYscix0KX12YXIgbj1mcm9tT2JqZWN0KGUpO2lmKG4pcmV0dXJuIG47aWYodHlwZW9mIFN5bWJvbCE9PVwidW5kZWZpbmVkXCImJlN5bWJvbC50b1ByaW1pdGl2ZSE9bnVsbCYmdHlwZW9mIGVbU3ltYm9sLnRvUHJpbWl0aXZlXT09PVwiZnVuY3Rpb25cIil7cmV0dXJuIEJ1ZmZlci5mcm9tKGVbU3ltYm9sLnRvUHJpbWl0aXZlXShcInN0cmluZ1wiKSxyLHQpfXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBcIitcIm9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBlKX1CdWZmZXIuZnJvbT1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIGZyb20oZSxyLHQpfTtPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSxVaW50OEFycmF5LnByb3RvdHlwZSk7T2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlcixVaW50OEFycmF5KTtmdW5jdGlvbiBhc3NlcnRTaXplKGUpe2lmKHR5cGVvZiBlIT09XCJudW1iZXJcIil7dGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpfWVsc2UgaWYoZTwwKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKX19ZnVuY3Rpb24gYWxsb2MoZSxyLHQpe2Fzc2VydFNpemUoZSk7aWYoZTw9MCl7cmV0dXJuIGNyZWF0ZUJ1ZmZlcihlKX1pZihyIT09dW5kZWZpbmVkKXtyZXR1cm4gdHlwZW9mIHQ9PT1cInN0cmluZ1wiP2NyZWF0ZUJ1ZmZlcihlKS5maWxsKHIsdCk6Y3JlYXRlQnVmZmVyKGUpLmZpbGwocil9cmV0dXJuIGNyZWF0ZUJ1ZmZlcihlKX1CdWZmZXIuYWxsb2M9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiBhbGxvYyhlLHIsdCl9O2Z1bmN0aW9uIGFsbG9jVW5zYWZlKGUpe2Fzc2VydFNpemUoZSk7cmV0dXJuIGNyZWF0ZUJ1ZmZlcihlPDA/MDpjaGVja2VkKGUpfDApfUJ1ZmZlci5hbGxvY1Vuc2FmZT1mdW5jdGlvbihlKXtyZXR1cm4gYWxsb2NVbnNhZmUoZSl9O0J1ZmZlci5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24oZSl7cmV0dXJuIGFsbG9jVW5zYWZlKGUpfTtmdW5jdGlvbiBmcm9tU3RyaW5nKGUscil7aWYodHlwZW9mIHIhPT1cInN0cmluZ1wifHxyPT09XCJcIil7cj1cInV0ZjhcIn1pZighQnVmZmVyLmlzRW5jb2Rpbmcocikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIityKX12YXIgdD1ieXRlTGVuZ3RoKGUscil8MDt2YXIgZj1jcmVhdGVCdWZmZXIodCk7dmFyIG49Zi53cml0ZShlLHIpO2lmKG4hPT10KXtmPWYuc2xpY2UoMCxuKX1yZXR1cm4gZn1mdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGUpe3ZhciByPWUubGVuZ3RoPDA/MDpjaGVja2VkKGUubGVuZ3RoKXwwO3ZhciB0PWNyZWF0ZUJ1ZmZlcihyKTtmb3IodmFyIGY9MDtmPHI7Zis9MSl7dFtmXT1lW2ZdJjI1NX1yZXR1cm4gdH1mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIoZSxyLHQpe2lmKHI8MHx8ZS5ieXRlTGVuZ3RoPHIpe3Rocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpfWlmKGUuYnl0ZUxlbmd0aDxyKyh0fHwwKSl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyl9dmFyIGY7aWYocj09PXVuZGVmaW5lZCYmdD09PXVuZGVmaW5lZCl7Zj1uZXcgVWludDhBcnJheShlKX1lbHNlIGlmKHQ9PT11bmRlZmluZWQpe2Y9bmV3IFVpbnQ4QXJyYXkoZSxyKX1lbHNle2Y9bmV3IFVpbnQ4QXJyYXkoZSxyLHQpfU9iamVjdC5zZXRQcm90b3R5cGVPZihmLEJ1ZmZlci5wcm90b3R5cGUpO3JldHVybiBmfWZ1bmN0aW9uIGZyb21PYmplY3QoZSl7aWYoQnVmZmVyLmlzQnVmZmVyKGUpKXt2YXIgcj1jaGVja2VkKGUubGVuZ3RoKXwwO3ZhciB0PWNyZWF0ZUJ1ZmZlcihyKTtpZih0Lmxlbmd0aD09PTApe3JldHVybiB0fWUuY29weSh0LDAsMCxyKTtyZXR1cm4gdH1pZihlLmxlbmd0aCE9PXVuZGVmaW5lZCl7aWYodHlwZW9mIGUubGVuZ3RoIT09XCJudW1iZXJcInx8bnVtYmVySXNOYU4oZS5sZW5ndGgpKXtyZXR1cm4gY3JlYXRlQnVmZmVyKDApfXJldHVybiBmcm9tQXJyYXlMaWtlKGUpfWlmKGUudHlwZT09PVwiQnVmZmVyXCImJkFycmF5LmlzQXJyYXkoZS5kYXRhKSl7cmV0dXJuIGZyb21BcnJheUxpa2UoZS5kYXRhKX19ZnVuY3Rpb24gY2hlY2tlZChlKXtpZihlPj1vKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gXCIrXCJzaXplOiAweFwiK28udG9TdHJpbmcoMTYpK1wiIGJ5dGVzXCIpfXJldHVybiBlfDB9ZnVuY3Rpb24gU2xvd0J1ZmZlcihlKXtpZigrZSE9ZSl7ZT0wfXJldHVybiBCdWZmZXIuYWxsb2MoK2UpfUJ1ZmZlci5pc0J1ZmZlcj1mdW5jdGlvbiBpc0J1ZmZlcihlKXtyZXR1cm4gZSE9bnVsbCYmZS5faXNCdWZmZXI9PT10cnVlJiZlIT09QnVmZmVyLnByb3RvdHlwZX07QnVmZmVyLmNvbXBhcmU9ZnVuY3Rpb24gY29tcGFyZShlLHIpe2lmKGlzSW5zdGFuY2UoZSxVaW50OEFycmF5KSllPUJ1ZmZlci5mcm9tKGUsZS5vZmZzZXQsZS5ieXRlTGVuZ3RoKTtpZihpc0luc3RhbmNlKHIsVWludDhBcnJheSkpcj1CdWZmZXIuZnJvbShyLHIub2Zmc2V0LHIuYnl0ZUxlbmd0aCk7aWYoIUJ1ZmZlci5pc0J1ZmZlcihlKXx8IUJ1ZmZlci5pc0J1ZmZlcihyKSl7dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheScpfWlmKGU9PT1yKXJldHVybiAwO3ZhciB0PWUubGVuZ3RoO3ZhciBmPXIubGVuZ3RoO2Zvcih2YXIgbj0wLGk9TWF0aC5taW4odCxmKTtuPGk7KytuKXtpZihlW25dIT09cltuXSl7dD1lW25dO2Y9cltuXTticmVha319aWYodDxmKXJldHVybi0xO2lmKGY8dClyZXR1cm4gMTtyZXR1cm4gMH07QnVmZmVyLmlzRW5jb2Rpbmc9ZnVuY3Rpb24gaXNFbmNvZGluZyhlKXtzd2l0Y2goU3RyaW5nKGUpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIHRydWU7ZGVmYXVsdDpyZXR1cm4gZmFsc2V9fTtCdWZmZXIuY29uY2F0PWZ1bmN0aW9uIGNvbmNhdChlLHIpe2lmKCFBcnJheS5pc0FycmF5KGUpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKX1pZihlLmxlbmd0aD09PTApe3JldHVybiBCdWZmZXIuYWxsb2MoMCl9dmFyIHQ7aWYocj09PXVuZGVmaW5lZCl7cj0wO2Zvcih0PTA7dDxlLmxlbmd0aDsrK3Qpe3IrPWVbdF0ubGVuZ3RofX12YXIgZj1CdWZmZXIuYWxsb2NVbnNhZmUocik7dmFyIG49MDtmb3IodD0wO3Q8ZS5sZW5ndGg7Kyt0KXt2YXIgaT1lW3RdO2lmKGlzSW5zdGFuY2UoaSxVaW50OEFycmF5KSl7aT1CdWZmZXIuZnJvbShpKX1pZighQnVmZmVyLmlzQnVmZmVyKGkpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKX1pLmNvcHkoZixuKTtuKz1pLmxlbmd0aH1yZXR1cm4gZn07ZnVuY3Rpb24gYnl0ZUxlbmd0aChlLHIpe2lmKEJ1ZmZlci5pc0J1ZmZlcihlKSl7cmV0dXJuIGUubGVuZ3RofWlmKEFycmF5QnVmZmVyLmlzVmlldyhlKXx8aXNJbnN0YW5jZShlLEFycmF5QnVmZmVyKSl7cmV0dXJuIGUuYnl0ZUxlbmd0aH1pZih0eXBlb2YgZSE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnK1wiUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgZSl9dmFyIHQ9ZS5sZW5ndGg7dmFyIGY9YXJndW1lbnRzLmxlbmd0aD4yJiZhcmd1bWVudHNbMl09PT10cnVlO2lmKCFmJiZ0PT09MClyZXR1cm4gMDt2YXIgbj1mYWxzZTtmb3IoOzspe3N3aXRjaChyKXtjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiB0O2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiB1dGY4VG9CeXRlcyhlKS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIHQqMjtjYXNlXCJoZXhcIjpyZXR1cm4gdD4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIGJhc2U2NFRvQnl0ZXMoZSkubGVuZ3RoO2RlZmF1bHQ6aWYobil7cmV0dXJuIGY/LTE6dXRmOFRvQnl0ZXMoZSkubGVuZ3RofXI9KFwiXCIrcikudG9Mb3dlckNhc2UoKTtuPXRydWV9fX1CdWZmZXIuYnl0ZUxlbmd0aD1ieXRlTGVuZ3RoO2Z1bmN0aW9uIHNsb3dUb1N0cmluZyhlLHIsdCl7dmFyIGY9ZmFsc2U7aWYocj09PXVuZGVmaW5lZHx8cjwwKXtyPTB9aWYocj50aGlzLmxlbmd0aCl7cmV0dXJuXCJcIn1pZih0PT09dW5kZWZpbmVkfHx0PnRoaXMubGVuZ3RoKXt0PXRoaXMubGVuZ3RofWlmKHQ8PTApe3JldHVyblwiXCJ9dD4+Pj0wO3I+Pj49MDtpZih0PD1yKXtyZXR1cm5cIlwifWlmKCFlKWU9XCJ1dGY4XCI7d2hpbGUodHJ1ZSl7c3dpdGNoKGUpe2Nhc2VcImhleFwiOnJldHVybiBoZXhTbGljZSh0aGlzLHIsdCk7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIHV0ZjhTbGljZSh0aGlzLHIsdCk7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gYXNjaWlTbGljZSh0aGlzLHIsdCk7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIGxhdGluMVNsaWNlKHRoaXMscix0KTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gYmFzZTY0U2xpY2UodGhpcyxyLHQpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiB1dGYxNmxlU2xpY2UodGhpcyxyLHQpO2RlZmF1bHQ6aWYoZil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrZSk7ZT0oZStcIlwiKS50b0xvd2VyQ2FzZSgpO2Y9dHJ1ZX19fUJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyPXRydWU7ZnVuY3Rpb24gc3dhcChlLHIsdCl7dmFyIGY9ZVtyXTtlW3JdPWVbdF07ZVt0XT1mfUJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uIHN3YXAxNigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9PTApe3Rocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIil9Zm9yKHZhciByPTA7cjxlO3IrPTIpe3N3YXAodGhpcyxyLHIrMSl9cmV0dXJuIHRoaXN9O0J1ZmZlci5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uIHN3YXAzMigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlNCE9PTApe3Rocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIil9Zm9yKHZhciByPTA7cjxlO3IrPTQpe3N3YXAodGhpcyxyLHIrMyk7c3dhcCh0aGlzLHIrMSxyKzIpfXJldHVybiB0aGlzfTtCdWZmZXIucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbiBzd2FwNjQoKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlJTghPT0wKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzXCIpfWZvcih2YXIgcj0wO3I8ZTtyKz04KXtzd2FwKHRoaXMscixyKzcpO3N3YXAodGhpcyxyKzEscis2KTtzd2FwKHRoaXMscisyLHIrNSk7c3dhcCh0aGlzLHIrMyxyKzQpfXJldHVybiB0aGlzfTtCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uIHRvU3RyaW5nKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZT09PTApcmV0dXJuXCJcIjtpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm4gdXRmOFNsaWNlKHRoaXMsMCxlKTtyZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07QnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZz1CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nO0J1ZmZlci5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uIGVxdWFscyhlKXtpZighQnVmZmVyLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO2lmKHRoaXM9PT1lKXJldHVybiB0cnVlO3JldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLGUpPT09MH07QnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uIGluc3BlY3QoKXt2YXIgZT1cIlwiO3ZhciB0PXIuSU5TUEVDVF9NQVhfQllURVM7ZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCx0KS5yZXBsYWNlKC8oLnsyfSkvZyxcIiQxIFwiKS50cmltKCk7aWYodGhpcy5sZW5ndGg+dCllKz1cIiAuLi4gXCI7cmV0dXJuXCI8QnVmZmVyIFwiK2UrXCI+XCJ9O2lmKGkpe0J1ZmZlci5wcm90b3R5cGVbaV09QnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0fUJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbiBjb21wYXJlKGUscix0LGYsbil7aWYoaXNJbnN0YW5jZShlLFVpbnQ4QXJyYXkpKXtlPUJ1ZmZlci5mcm9tKGUsZS5vZmZzZXQsZS5ieXRlTGVuZ3RoKX1pZighQnVmZmVyLmlzQnVmZmVyKGUpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnK1wiUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgZSl9aWYocj09PXVuZGVmaW5lZCl7cj0wfWlmKHQ9PT11bmRlZmluZWQpe3Q9ZT9lLmxlbmd0aDowfWlmKGY9PT11bmRlZmluZWQpe2Y9MH1pZihuPT09dW5kZWZpbmVkKXtuPXRoaXMubGVuZ3RofWlmKHI8MHx8dD5lLmxlbmd0aHx8ZjwwfHxuPnRoaXMubGVuZ3RoKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKX1pZihmPj1uJiZyPj10KXtyZXR1cm4gMH1pZihmPj1uKXtyZXR1cm4tMX1pZihyPj10KXtyZXR1cm4gMX1yPj4+PTA7dD4+Pj0wO2Y+Pj49MDtuPj4+PTA7aWYodGhpcz09PWUpcmV0dXJuIDA7dmFyIGk9bi1mO3ZhciBvPXQtcjt2YXIgdT1NYXRoLm1pbihpLG8pO3ZhciBhPXRoaXMuc2xpY2UoZixuKTt2YXIgcz1lLnNsaWNlKHIsdCk7Zm9yKHZhciBoPTA7aDx1OysraCl7aWYoYVtoXSE9PXNbaF0pe2k9YVtoXTtvPXNbaF07YnJlYWt9fWlmKGk8bylyZXR1cm4tMTtpZihvPGkpcmV0dXJuIDE7cmV0dXJuIDB9O2Z1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mKGUscix0LGYsbil7aWYoZS5sZW5ndGg9PT0wKXJldHVybi0xO2lmKHR5cGVvZiB0PT09XCJzdHJpbmdcIil7Zj10O3Q9MH1lbHNlIGlmKHQ+MjE0NzQ4MzY0Nyl7dD0yMTQ3NDgzNjQ3fWVsc2UgaWYodDwtMjE0NzQ4MzY0OCl7dD0tMjE0NzQ4MzY0OH10PSt0O2lmKG51bWJlcklzTmFOKHQpKXt0PW4/MDplLmxlbmd0aC0xfWlmKHQ8MCl0PWUubGVuZ3RoK3Q7aWYodD49ZS5sZW5ndGgpe2lmKG4pcmV0dXJuLTE7ZWxzZSB0PWUubGVuZ3RoLTF9ZWxzZSBpZih0PDApe2lmKG4pdD0wO2Vsc2UgcmV0dXJuLTF9aWYodHlwZW9mIHI9PT1cInN0cmluZ1wiKXtyPUJ1ZmZlci5mcm9tKHIsZil9aWYoQnVmZmVyLmlzQnVmZmVyKHIpKXtpZihyLmxlbmd0aD09PTApe3JldHVybi0xfXJldHVybiBhcnJheUluZGV4T2YoZSxyLHQsZixuKX1lbHNlIGlmKHR5cGVvZiByPT09XCJudW1iZXJcIil7cj1yJjI1NTtpZih0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZj09PVwiZnVuY3Rpb25cIil7aWYobil7cmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLHIsdCl9ZWxzZXtyZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChlLHIsdCl9fXJldHVybiBhcnJheUluZGV4T2YoZSxbcl0sdCxmLG4pfXRocm93IG5ldyBUeXBlRXJyb3IoXCJ2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXJcIil9ZnVuY3Rpb24gYXJyYXlJbmRleE9mKGUscix0LGYsbil7dmFyIGk9MTt2YXIgbz1lLmxlbmd0aDt2YXIgdT1yLmxlbmd0aDtpZihmIT09dW5kZWZpbmVkKXtmPVN0cmluZyhmKS50b0xvd2VyQ2FzZSgpO2lmKGY9PT1cInVjczJcInx8Zj09PVwidWNzLTJcInx8Zj09PVwidXRmMTZsZVwifHxmPT09XCJ1dGYtMTZsZVwiKXtpZihlLmxlbmd0aDwyfHxyLmxlbmd0aDwyKXtyZXR1cm4tMX1pPTI7by89Mjt1Lz0yO3QvPTJ9fWZ1bmN0aW9uIHJlYWQoZSxyKXtpZihpPT09MSl7cmV0dXJuIGVbcl19ZWxzZXtyZXR1cm4gZS5yZWFkVUludDE2QkUocippKX19dmFyIGE7aWYobil7dmFyIHM9LTE7Zm9yKGE9dDthPG87YSsrKXtpZihyZWFkKGUsYSk9PT1yZWFkKHIscz09PS0xPzA6YS1zKSl7aWYocz09PS0xKXM9YTtpZihhLXMrMT09PXUpcmV0dXJuIHMqaX1lbHNle2lmKHMhPT0tMSlhLT1hLXM7cz0tMX19fWVsc2V7aWYodCt1Pm8pdD1vLXU7Zm9yKGE9dDthPj0wO2EtLSl7dmFyIGg9dHJ1ZTtmb3IodmFyIGM9MDtjPHU7YysrKXtpZihyZWFkKGUsYStjKSE9PXJlYWQocixjKSl7aD1mYWxzZTticmVha319aWYoaClyZXR1cm4gYX19cmV0dXJuLTF9QnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbiBpbmNsdWRlcyhlLHIsdCl7cmV0dXJuIHRoaXMuaW5kZXhPZihlLHIsdCkhPT0tMX07QnVmZmVyLnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uIGluZGV4T2YoZSxyLHQpe3JldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLGUscix0LHRydWUpfTtCdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mPWZ1bmN0aW9uIGxhc3RJbmRleE9mKGUscix0KXtyZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcyxlLHIsdCxmYWxzZSl9O2Z1bmN0aW9uIGhleFdyaXRlKGUscix0LGYpe3Q9TnVtYmVyKHQpfHwwO3ZhciBuPWUubGVuZ3RoLXQ7aWYoIWYpe2Y9bn1lbHNle2Y9TnVtYmVyKGYpO2lmKGY+bil7Zj1ufX12YXIgaT1yLmxlbmd0aDtpZihmPmkvMil7Zj1pLzJ9Zm9yKHZhciBvPTA7bzxmOysrbyl7dmFyIHU9cGFyc2VJbnQoci5zdWJzdHIobyoyLDIpLDE2KTtpZihudW1iZXJJc05hTih1KSlyZXR1cm4gbztlW3Qrb109dX1yZXR1cm4gb31mdW5jdGlvbiB1dGY4V3JpdGUoZSxyLHQsZil7cmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMocixlLmxlbmd0aC10KSxlLHQsZil9ZnVuY3Rpb24gYXNjaWlXcml0ZShlLHIsdCxmKXtyZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMociksZSx0LGYpfWZ1bmN0aW9uIGxhdGluMVdyaXRlKGUscix0LGYpe3JldHVybiBhc2NpaVdyaXRlKGUscix0LGYpfWZ1bmN0aW9uIGJhc2U2NFdyaXRlKGUscix0LGYpe3JldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMociksZSx0LGYpfWZ1bmN0aW9uIHVjczJXcml0ZShlLHIsdCxmKXtyZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhyLGUubGVuZ3RoLXQpLGUsdCxmKX1CdWZmZXIucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uIHdyaXRlKGUscix0LGYpe2lmKHI9PT11bmRlZmluZWQpe2Y9XCJ1dGY4XCI7dD10aGlzLmxlbmd0aDtyPTB9ZWxzZSBpZih0PT09dW5kZWZpbmVkJiZ0eXBlb2Ygcj09PVwic3RyaW5nXCIpe2Y9cjt0PXRoaXMubGVuZ3RoO3I9MH1lbHNlIGlmKGlzRmluaXRlKHIpKXtyPXI+Pj4wO2lmKGlzRmluaXRlKHQpKXt0PXQ+Pj4wO2lmKGY9PT11bmRlZmluZWQpZj1cInV0ZjhcIn1lbHNle2Y9dDt0PXVuZGVmaW5lZH19ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKX12YXIgbj10aGlzLmxlbmd0aC1yO2lmKHQ9PT11bmRlZmluZWR8fHQ+bil0PW47aWYoZS5sZW5ndGg+MCYmKHQ8MHx8cjwwKXx8cj50aGlzLmxlbmd0aCl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKX1pZighZilmPVwidXRmOFwiO3ZhciBpPWZhbHNlO2Zvcig7Oyl7c3dpdGNoKGYpe2Nhc2VcImhleFwiOnJldHVybiBoZXhXcml0ZSh0aGlzLGUscix0KTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gdXRmOFdyaXRlKHRoaXMsZSxyLHQpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIGFzY2lpV3JpdGUodGhpcyxlLHIsdCk7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsZSxyLHQpO2Nhc2VcImJhc2U2NFwiOnJldHVybiBiYXNlNjRXcml0ZSh0aGlzLGUscix0KTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gdWNzMldyaXRlKHRoaXMsZSxyLHQpO2RlZmF1bHQ6aWYoaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrZik7Zj0oXCJcIitmKS50b0xvd2VyQ2FzZSgpO2k9dHJ1ZX19fTtCdWZmZXIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbiB0b0pTT04oKXtyZXR1cm57dHlwZTpcIkJ1ZmZlclwiLGRhdGE6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyfHx0aGlzLDApfX07ZnVuY3Rpb24gYmFzZTY0U2xpY2UoZSxyLHQpe2lmKHI9PT0wJiZ0PT09ZS5sZW5ndGgpe3JldHVybiBmLmZyb21CeXRlQXJyYXkoZSl9ZWxzZXtyZXR1cm4gZi5mcm9tQnl0ZUFycmF5KGUuc2xpY2Uocix0KSl9fWZ1bmN0aW9uIHV0ZjhTbGljZShlLHIsdCl7dD1NYXRoLm1pbihlLmxlbmd0aCx0KTt2YXIgZj1bXTt2YXIgbj1yO3doaWxlKG48dCl7dmFyIGk9ZVtuXTt2YXIgbz1udWxsO3ZhciB1PWk+MjM5PzQ6aT4yMjM/MzppPjE5MT8yOjE7aWYobit1PD10KXt2YXIgYSxzLGgsYztzd2l0Y2godSl7Y2FzZSAxOmlmKGk8MTI4KXtvPWl9YnJlYWs7Y2FzZSAyOmE9ZVtuKzFdO2lmKChhJjE5Mik9PT0xMjgpe2M9KGkmMzEpPDw2fGEmNjM7aWYoYz4xMjcpe289Y319YnJlYWs7Y2FzZSAzOmE9ZVtuKzFdO3M9ZVtuKzJdO2lmKChhJjE5Mik9PT0xMjgmJihzJjE5Mik9PT0xMjgpe2M9KGkmMTUpPDwxMnwoYSY2Myk8PDZ8cyY2MztpZihjPjIwNDcmJihjPDU1Mjk2fHxjPjU3MzQzKSl7bz1jfX1icmVhaztjYXNlIDQ6YT1lW24rMV07cz1lW24rMl07aD1lW24rM107aWYoKGEmMTkyKT09PTEyOCYmKHMmMTkyKT09PTEyOCYmKGgmMTkyKT09PTEyOCl7Yz0oaSYxNSk8PDE4fChhJjYzKTw8MTJ8KHMmNjMpPDw2fGgmNjM7aWYoYz42NTUzNSYmYzwxMTE0MTEyKXtvPWN9fX19aWYobz09PW51bGwpe289NjU1MzM7dT0xfWVsc2UgaWYobz42NTUzNSl7by09NjU1MzY7Zi5wdXNoKG8+Pj4xMCYxMDIzfDU1Mjk2KTtvPTU2MzIwfG8mMTAyM31mLnB1c2gobyk7bis9dX1yZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KGYpfXZhciB1PTQwOTY7ZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5KGUpe3ZhciByPWUubGVuZ3RoO2lmKHI8PXUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlKX12YXIgdD1cIlwiO3ZhciBmPTA7d2hpbGUoZjxyKXt0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlLnNsaWNlKGYsZis9dSkpfXJldHVybiB0fWZ1bmN0aW9uIGFzY2lpU2xpY2UoZSxyLHQpe3ZhciBmPVwiXCI7dD1NYXRoLm1pbihlLmxlbmd0aCx0KTtmb3IodmFyIG49cjtuPHQ7KytuKXtmKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbbl0mMTI3KX1yZXR1cm4gZn1mdW5jdGlvbiBsYXRpbjFTbGljZShlLHIsdCl7dmFyIGY9XCJcIjt0PU1hdGgubWluKGUubGVuZ3RoLHQpO2Zvcih2YXIgbj1yO248dDsrK24pe2YrPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtuXSl9cmV0dXJuIGZ9ZnVuY3Rpb24gaGV4U2xpY2UoZSxyLHQpe3ZhciBmPWUubGVuZ3RoO2lmKCFyfHxyPDApcj0wO2lmKCF0fHx0PDB8fHQ+Zil0PWY7dmFyIG49XCJcIjtmb3IodmFyIGk9cjtpPHQ7KytpKXtuKz1zW2VbaV1dfXJldHVybiBufWZ1bmN0aW9uIHV0ZjE2bGVTbGljZShlLHIsdCl7dmFyIGY9ZS5zbGljZShyLHQpO3ZhciBuPVwiXCI7Zm9yKHZhciBpPTA7aTxmLmxlbmd0aDtpKz0yKXtuKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGZbaV0rZltpKzFdKjI1Nil9cmV0dXJuIG59QnVmZmVyLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbiBzbGljZShlLHIpe3ZhciB0PXRoaXMubGVuZ3RoO2U9fn5lO3I9cj09PXVuZGVmaW5lZD90On5+cjtpZihlPDApe2UrPXQ7aWYoZTwwKWU9MH1lbHNlIGlmKGU+dCl7ZT10fWlmKHI8MCl7cis9dDtpZihyPDApcj0wfWVsc2UgaWYocj50KXtyPXR9aWYocjxlKXI9ZTt2YXIgZj10aGlzLnN1YmFycmF5KGUscik7T2JqZWN0LnNldFByb3RvdHlwZU9mKGYsQnVmZmVyLnByb3RvdHlwZSk7cmV0dXJuIGZ9O2Z1bmN0aW9uIGNoZWNrT2Zmc2V0KGUscix0KXtpZihlJTEhPT0wfHxlPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvZmZzZXQgaXMgbm90IHVpbnRcIik7aWYoZStyPnQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoXCIpfUJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbiByZWFkVUludExFKGUscix0KXtlPWU+Pj4wO3I9cj4+PjA7aWYoIXQpY2hlY2tPZmZzZXQoZSxyLHRoaXMubGVuZ3RoKTt2YXIgZj10aGlzW2VdO3ZhciBuPTE7dmFyIGk9MDt3aGlsZSgrK2k8ciYmKG4qPTI1Nikpe2YrPXRoaXNbZStpXSpufXJldHVybiBmfTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24gcmVhZFVJbnRCRShlLHIsdCl7ZT1lPj4+MDtyPXI+Pj4wO2lmKCF0KXtjaGVja09mZnNldChlLHIsdGhpcy5sZW5ndGgpfXZhciBmPXRoaXNbZSstLXJdO3ZhciBuPTE7d2hpbGUocj4wJiYobio9MjU2KSl7Zis9dGhpc1tlKy0tcl0qbn1yZXR1cm4gZn07QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24gcmVhZFVJbnQ4KGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDEsdGhpcy5sZW5ndGgpO3JldHVybiB0aGlzW2VdfTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbiByZWFkVUludDE2TEUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsMix0aGlzLmxlbmd0aCk7cmV0dXJuIHRoaXNbZV18dGhpc1tlKzFdPDw4fTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbiByZWFkVUludDE2QkUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsMix0aGlzLmxlbmd0aCk7cmV0dXJuIHRoaXNbZV08PDh8dGhpc1tlKzFdfTtCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRT1mdW5jdGlvbiByZWFkVUludDMyTEUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsNCx0aGlzLmxlbmd0aCk7cmV0dXJuKHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTYpK3RoaXNbZSszXSoxNjc3NzIxNn07QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkU9ZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDQsdGhpcy5sZW5ndGgpO3JldHVybiB0aGlzW2VdKjE2Nzc3MjE2Kyh0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM10pfTtCdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRT1mdW5jdGlvbiByZWFkSW50TEUoZSxyLHQpe2U9ZT4+PjA7cj1yPj4+MDtpZighdCljaGVja09mZnNldChlLHIsdGhpcy5sZW5ndGgpO3ZhciBmPXRoaXNbZV07dmFyIG49MTt2YXIgaT0wO3doaWxlKCsraTxyJiYobio9MjU2KSl7Zis9dGhpc1tlK2ldKm59bio9MTI4O2lmKGY+PW4pZi09TWF0aC5wb3coMiw4KnIpO3JldHVybiBmfTtCdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbiByZWFkSW50QkUoZSxyLHQpe2U9ZT4+PjA7cj1yPj4+MDtpZighdCljaGVja09mZnNldChlLHIsdGhpcy5sZW5ndGgpO3ZhciBmPXI7dmFyIG49MTt2YXIgaT10aGlzW2UrLS1mXTt3aGlsZShmPjAmJihuKj0yNTYpKXtpKz10aGlzW2UrLS1mXSpufW4qPTEyODtpZihpPj1uKWktPU1hdGgucG93KDIsOCpyKTtyZXR1cm4gaX07QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbiByZWFkSW50OChlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSwxLHRoaXMubGVuZ3RoKTtpZighKHRoaXNbZV0mMTI4KSlyZXR1cm4gdGhpc1tlXTtyZXR1cm4oMjU1LXRoaXNbZV0rMSkqLTF9O0J1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24gcmVhZEludDE2TEUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsMix0aGlzLmxlbmd0aCk7dmFyIHQ9dGhpc1tlXXx0aGlzW2UrMV08PDg7cmV0dXJuIHQmMzI3Njg/dHw0Mjk0OTAxNzYwOnR9O0J1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24gcmVhZEludDE2QkUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsMix0aGlzLmxlbmd0aCk7dmFyIHQ9dGhpc1tlKzFdfHRoaXNbZV08PDg7cmV0dXJuIHQmMzI3Njg/dHw0Mjk0OTAxNzYwOnR9O0J1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24gcmVhZEludDMyTEUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsNCx0aGlzLmxlbmd0aCk7cmV0dXJuIHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTZ8dGhpc1tlKzNdPDwyNH07QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbiByZWFkSW50MzJCRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw0LHRoaXMubGVuZ3RoKTtyZXR1cm4gdGhpc1tlXTw8MjR8dGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdfTtCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uIHJlYWRGbG9hdExFKGUscil7ZT1lPj4+MDtpZighciljaGVja09mZnNldChlLDQsdGhpcy5sZW5ndGgpO3JldHVybiBuLnJlYWQodGhpcyxlLHRydWUsMjMsNCl9O0J1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkU9ZnVuY3Rpb24gcmVhZEZsb2F0QkUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsNCx0aGlzLmxlbmd0aCk7cmV0dXJuIG4ucmVhZCh0aGlzLGUsZmFsc2UsMjMsNCl9O0J1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFPWZ1bmN0aW9uIHJlYWREb3VibGVMRShlLHIpe2U9ZT4+PjA7aWYoIXIpY2hlY2tPZmZzZXQoZSw4LHRoaXMubGVuZ3RoKTtyZXR1cm4gbi5yZWFkKHRoaXMsZSx0cnVlLDUyLDgpfTtCdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbiByZWFkRG91YmxlQkUoZSxyKXtlPWU+Pj4wO2lmKCFyKWNoZWNrT2Zmc2V0KGUsOCx0aGlzLmxlbmd0aCk7cmV0dXJuIG4ucmVhZCh0aGlzLGUsZmFsc2UsNTIsOCl9O2Z1bmN0aW9uIGNoZWNrSW50KGUscix0LGYsbixpKXtpZighQnVmZmVyLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpO2lmKHI+bnx8cjxpKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHQrZj5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFPWZ1bmN0aW9uIHdyaXRlVUludExFKGUscix0LGYpe2U9K2U7cj1yPj4+MDt0PXQ+Pj4wO2lmKCFmKXt2YXIgbj1NYXRoLnBvdygyLDgqdCktMTtjaGVja0ludCh0aGlzLGUscix0LG4sMCl9dmFyIGk9MTt2YXIgbz0wO3RoaXNbcl09ZSYyNTU7d2hpbGUoKytvPHQmJihpKj0yNTYpKXt0aGlzW3Irb109ZS9pJjI1NX1yZXR1cm4gcit0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uIHdyaXRlVUludEJFKGUscix0LGYpe2U9K2U7cj1yPj4+MDt0PXQ+Pj4wO2lmKCFmKXt2YXIgbj1NYXRoLnBvdygyLDgqdCktMTtjaGVja0ludCh0aGlzLGUscix0LG4sMCl9dmFyIGk9dC0xO3ZhciBvPTE7dGhpc1tyK2ldPWUmMjU1O3doaWxlKC0taT49MCYmKG8qPTI1Nikpe3RoaXNbcitpXT1lL28mMjU1fXJldHVybiByK3R9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbiB3cml0ZVVJbnQ4KGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsMSwyNTUsMCk7dGhpc1tyXT1lJjI1NTtyZXR1cm4gcisxfTtCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24gd3JpdGVVSW50MTZMRShlLHIsdCl7ZT0rZTtyPXI+Pj4wO2lmKCF0KWNoZWNrSW50KHRoaXMsZSxyLDIsNjU1MzUsMCk7dGhpc1tyXT1lJjI1NTt0aGlzW3IrMV09ZT4+Pjg7cmV0dXJuIHIrMn07QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFPWZ1bmN0aW9uIHdyaXRlVUludDE2QkUoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciwyLDY1NTM1LDApO3RoaXNbcl09ZT4+Pjg7dGhpc1tyKzFdPWUmMjU1O3JldHVybiByKzJ9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbiB3cml0ZVVJbnQzMkxFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsNCw0Mjk0OTY3Mjk1LDApO3RoaXNbciszXT1lPj4+MjQ7dGhpc1tyKzJdPWU+Pj4xNjt0aGlzW3IrMV09ZT4+Pjg7dGhpc1tyXT1lJjI1NTtyZXR1cm4gcis0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24gd3JpdGVVSW50MzJCRShlLHIsdCl7ZT0rZTtyPXI+Pj4wO2lmKCF0KWNoZWNrSW50KHRoaXMsZSxyLDQsNDI5NDk2NzI5NSwwKTt0aGlzW3JdPWU+Pj4yNDt0aGlzW3IrMV09ZT4+PjE2O3RoaXNbcisyXT1lPj4+ODt0aGlzW3IrM109ZSYyNTU7cmV0dXJuIHIrNH07QnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFPWZ1bmN0aW9uIHdyaXRlSW50TEUoZSxyLHQsZil7ZT0rZTtyPXI+Pj4wO2lmKCFmKXt2YXIgbj1NYXRoLnBvdygyLDgqdC0xKTtjaGVja0ludCh0aGlzLGUscix0LG4tMSwtbil9dmFyIGk9MDt2YXIgbz0xO3ZhciB1PTA7dGhpc1tyXT1lJjI1NTt3aGlsZSgrK2k8dCYmKG8qPTI1Nikpe2lmKGU8MCYmdT09PTAmJnRoaXNbcitpLTFdIT09MCl7dT0xfXRoaXNbcitpXT0oZS9vPj4wKS11JjI1NX1yZXR1cm4gcit0fTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24gd3JpdGVJbnRCRShlLHIsdCxmKXtlPStlO3I9cj4+PjA7aWYoIWYpe3ZhciBuPU1hdGgucG93KDIsOCp0LTEpO2NoZWNrSW50KHRoaXMsZSxyLHQsbi0xLC1uKX12YXIgaT10LTE7dmFyIG89MTt2YXIgdT0wO3RoaXNbcitpXT1lJjI1NTt3aGlsZSgtLWk+PTAmJihvKj0yNTYpKXtpZihlPDAmJnU9PT0wJiZ0aGlzW3IraSsxXSE9PTApe3U9MX10aGlzW3IraV09KGUvbz4+MCktdSYyNTV9cmV0dXJuIHIrdH07QnVmZmVyLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24gd3JpdGVJbnQ4KGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsMSwxMjcsLTEyOCk7aWYoZTwwKWU9MjU1K2UrMTt0aGlzW3JdPWUmMjU1O3JldHVybiByKzF9O0J1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFPWZ1bmN0aW9uIHdyaXRlSW50MTZMRShlLHIsdCl7ZT0rZTtyPXI+Pj4wO2lmKCF0KWNoZWNrSW50KHRoaXMsZSxyLDIsMzI3NjcsLTMyNzY4KTt0aGlzW3JdPWUmMjU1O3RoaXNbcisxXT1lPj4+ODtyZXR1cm4gcisyfTtCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbiB3cml0ZUludDE2QkUoZSxyLHQpe2U9K2U7cj1yPj4+MDtpZighdCljaGVja0ludCh0aGlzLGUsciwyLDMyNzY3LC0zMjc2OCk7dGhpc1tyXT1lPj4+ODt0aGlzW3IrMV09ZSYyNTU7cmV0dXJuIHIrMn07QnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEU9ZnVuY3Rpb24gd3JpdGVJbnQzMkxFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KTt0aGlzW3JdPWUmMjU1O3RoaXNbcisxXT1lPj4+ODt0aGlzW3IrMl09ZT4+PjE2O3RoaXNbciszXT1lPj4+MjQ7cmV0dXJuIHIrNH07QnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkU9ZnVuY3Rpb24gd3JpdGVJbnQzMkJFKGUscix0KXtlPStlO3I9cj4+PjA7aWYoIXQpY2hlY2tJbnQodGhpcyxlLHIsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KTtpZihlPDApZT00Mjk0OTY3Mjk1K2UrMTt0aGlzW3JdPWU+Pj4yNDt0aGlzW3IrMV09ZT4+PjE2O3RoaXNbcisyXT1lPj4+ODt0aGlzW3IrM109ZSYyNTU7cmV0dXJuIHIrNH07ZnVuY3Rpb24gY2hlY2tJRUVFNzU0KGUscix0LGYsbixpKXtpZih0K2Y+ZS5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7aWYodDwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIHdyaXRlRmxvYXQoZSxyLHQsZixpKXtyPStyO3Q9dD4+PjA7aWYoIWkpe2NoZWNrSUVFRTc1NChlLHIsdCw0LDM0MDI4MjM0NjYzODUyODg2ZTIyLC0zNDAyODIzNDY2Mzg1Mjg4NmUyMil9bi53cml0ZShlLHIsdCxmLDIzLDQpO3JldHVybiB0KzR9QnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24gd3JpdGVGbG9hdExFKGUscix0KXtyZXR1cm4gd3JpdGVGbG9hdCh0aGlzLGUscix0cnVlLHQpfTtCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbiB3cml0ZUZsb2F0QkUoZSxyLHQpe3JldHVybiB3cml0ZUZsb2F0KHRoaXMsZSxyLGZhbHNlLHQpfTtmdW5jdGlvbiB3cml0ZURvdWJsZShlLHIsdCxmLGkpe3I9K3I7dD10Pj4+MDtpZighaSl7Y2hlY2tJRUVFNzU0KGUscix0LDgsMTc5NzY5MzEzNDg2MjMxNTdlMjkyLC0xNzk3NjkzMTM0ODYyMzE1N2UyOTIpfW4ud3JpdGUoZSxyLHQsZiw1Miw4KTtyZXR1cm4gdCs4fUJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRT1mdW5jdGlvbiB3cml0ZURvdWJsZUxFKGUscix0KXtyZXR1cm4gd3JpdGVEb3VibGUodGhpcyxlLHIsdHJ1ZSx0KX07QnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFPWZ1bmN0aW9uIHdyaXRlRG91YmxlQkUoZSxyLHQpe3JldHVybiB3cml0ZURvdWJsZSh0aGlzLGUscixmYWxzZSx0KX07QnVmZmVyLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uIGNvcHkoZSxyLHQsZil7aWYoIUJ1ZmZlci5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyXCIpO2lmKCF0KXQ9MDtpZighZiYmZiE9PTApZj10aGlzLmxlbmd0aDtpZihyPj1lLmxlbmd0aClyPWUubGVuZ3RoO2lmKCFyKXI9MDtpZihmPjAmJmY8dClmPXQ7aWYoZj09PXQpcmV0dXJuIDA7aWYoZS5sZW5ndGg9PT0wfHx0aGlzLmxlbmd0aD09PTApcmV0dXJuIDA7aWYocjwwKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIil9aWYodDwwfHx0Pj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihmPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtpZihmPnRoaXMubGVuZ3RoKWY9dGhpcy5sZW5ndGg7aWYoZS5sZW5ndGgtcjxmLXQpe2Y9ZS5sZW5ndGgtcit0fXZhciBuPWYtdDtpZih0aGlzPT09ZSYmdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW49PT1cImZ1bmN0aW9uXCIpe3RoaXMuY29weVdpdGhpbihyLHQsZil9ZWxzZSBpZih0aGlzPT09ZSYmdDxyJiZyPGYpe2Zvcih2YXIgaT1uLTE7aT49MDstLWkpe2VbaStyXT10aGlzW2krdF19fWVsc2V7VWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoZSx0aGlzLnN1YmFycmF5KHQsZikscil9cmV0dXJuIG59O0J1ZmZlci5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbiBmaWxsKGUscix0LGYpe2lmKHR5cGVvZiBlPT09XCJzdHJpbmdcIil7aWYodHlwZW9mIHI9PT1cInN0cmluZ1wiKXtmPXI7cj0wO3Q9dGhpcy5sZW5ndGh9ZWxzZSBpZih0eXBlb2YgdD09PVwic3RyaW5nXCIpe2Y9dDt0PXRoaXMubGVuZ3RofWlmKGYhPT11bmRlZmluZWQmJnR5cGVvZiBmIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcImVuY29kaW5nIG11c3QgYmUgYSBzdHJpbmdcIil9aWYodHlwZW9mIGY9PT1cInN0cmluZ1wiJiYhQnVmZmVyLmlzRW5jb2RpbmcoZikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitmKX1pZihlLmxlbmd0aD09PTEpe3ZhciBuPWUuY2hhckNvZGVBdCgwKTtpZihmPT09XCJ1dGY4XCImJm48MTI4fHxmPT09XCJsYXRpbjFcIil7ZT1ufX19ZWxzZSBpZih0eXBlb2YgZT09PVwibnVtYmVyXCIpe2U9ZSYyNTV9ZWxzZSBpZih0eXBlb2YgZT09PVwiYm9vbGVhblwiKXtlPU51bWJlcihlKX1pZihyPDB8fHRoaXMubGVuZ3RoPHJ8fHRoaXMubGVuZ3RoPHQpe3Rocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0IG9mIHJhbmdlIGluZGV4XCIpfWlmKHQ8PXIpe3JldHVybiB0aGlzfXI9cj4+PjA7dD10PT09dW5kZWZpbmVkP3RoaXMubGVuZ3RoOnQ+Pj4wO2lmKCFlKWU9MDt2YXIgaTtpZih0eXBlb2YgZT09PVwibnVtYmVyXCIpe2ZvcihpPXI7aTx0OysraSl7dGhpc1tpXT1lfX1lbHNle3ZhciBvPUJ1ZmZlci5pc0J1ZmZlcihlKT9lOkJ1ZmZlci5mcm9tKGUsZik7dmFyIHU9by5sZW5ndGg7aWYodT09PTApe3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrZSsnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJyl9Zm9yKGk9MDtpPHQtcjsrK2kpe3RoaXNbaStyXT1vW2kldV19fXJldHVybiB0aGlzfTt2YXIgYT0vW14rLzAtOUEtWmEtei1fXS9nO2Z1bmN0aW9uIGJhc2U2NGNsZWFuKGUpe2U9ZS5zcGxpdChcIj1cIilbMF07ZT1lLnRyaW0oKS5yZXBsYWNlKGEsXCJcIik7aWYoZS5sZW5ndGg8MilyZXR1cm5cIlwiO3doaWxlKGUubGVuZ3RoJTQhPT0wKXtlPWUrXCI9XCJ9cmV0dXJuIGV9ZnVuY3Rpb24gdXRmOFRvQnl0ZXMoZSxyKXtyPXJ8fEluZmluaXR5O3ZhciB0O3ZhciBmPWUubGVuZ3RoO3ZhciBuPW51bGw7dmFyIGk9W107Zm9yKHZhciBvPTA7bzxmOysrbyl7dD1lLmNoYXJDb2RlQXQobyk7aWYodD41NTI5NSYmdDw1NzM0NCl7aWYoIW4pe2lmKHQ+NTYzMTkpe2lmKChyLT0zKT4tMSlpLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWVsc2UgaWYobysxPT09Zil7aWYoKHItPTMpPi0xKWkucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9bj10O2NvbnRpbnVlfWlmKHQ8NTYzMjApe2lmKChyLT0zKT4tMSlpLnB1c2goMjM5LDE5MSwxODkpO249dDtjb250aW51ZX10PShuLTU1Mjk2PDwxMHx0LTU2MzIwKSs2NTUzNn1lbHNlIGlmKG4pe2lmKChyLT0zKT4tMSlpLnB1c2goMjM5LDE5MSwxODkpfW49bnVsbDtpZih0PDEyOCl7aWYoKHItPTEpPDApYnJlYWs7aS5wdXNoKHQpfWVsc2UgaWYodDwyMDQ4KXtpZigoci09Mik8MClicmVhaztpLnB1c2godD4+NnwxOTIsdCY2M3wxMjgpfWVsc2UgaWYodDw2NTUzNil7aWYoKHItPTMpPDApYnJlYWs7aS5wdXNoKHQ+PjEyfDIyNCx0Pj42JjYzfDEyOCx0JjYzfDEyOCl9ZWxzZSBpZih0PDExMTQxMTIpe2lmKChyLT00KTwwKWJyZWFrO2kucHVzaCh0Pj4xOHwyNDAsdD4+MTImNjN8MTI4LHQ+PjYmNjN8MTI4LHQmNjN8MTI4KX1lbHNle3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29kZSBwb2ludFwiKX19cmV0dXJuIGl9ZnVuY3Rpb24gYXNjaWlUb0J5dGVzKGUpe3ZhciByPVtdO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7Kyt0KXtyLnB1c2goZS5jaGFyQ29kZUF0KHQpJjI1NSl9cmV0dXJuIHJ9ZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMoZSxyKXt2YXIgdCxmLG47dmFyIGk9W107Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDsrK28pe2lmKChyLT0yKTwwKWJyZWFrO3Q9ZS5jaGFyQ29kZUF0KG8pO2Y9dD4+ODtuPXQlMjU2O2kucHVzaChuKTtpLnB1c2goZil9cmV0dXJuIGl9ZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyhlKXtyZXR1cm4gZi50b0J5dGVBcnJheShiYXNlNjRjbGVhbihlKSl9ZnVuY3Rpb24gYmxpdEJ1ZmZlcihlLHIsdCxmKXtmb3IodmFyIG49MDtuPGY7KytuKXtpZihuK3Q+PXIubGVuZ3RofHxuPj1lLmxlbmd0aClicmVhaztyW24rdF09ZVtuXX1yZXR1cm4gbn1mdW5jdGlvbiBpc0luc3RhbmNlKGUscil7cmV0dXJuIGUgaW5zdGFuY2VvZiByfHxlIT1udWxsJiZlLmNvbnN0cnVjdG9yIT1udWxsJiZlLmNvbnN0cnVjdG9yLm5hbWUhPW51bGwmJmUuY29uc3RydWN0b3IubmFtZT09PXIubmFtZX1mdW5jdGlvbiBudW1iZXJJc05hTihlKXtyZXR1cm4gZSE9PWV9dmFyIHM9ZnVuY3Rpb24oKXt2YXIgZT1cIjAxMjM0NTY3ODlhYmNkZWZcIjt2YXIgcj1uZXcgQXJyYXkoMjU2KTtmb3IodmFyIHQ9MDt0PDE2OysrdCl7dmFyIGY9dCoxNjtmb3IodmFyIG49MDtuPDE2Oysrbil7cltmK25dPWVbdF0rZVtuXX19cmV0dXJuIHJ9KCl9LDc4MzpmdW5jdGlvbihlLHIpe1xuLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbnIucmVhZD1mdW5jdGlvbihlLHIsdCxmLG4pe3ZhciBpLG87dmFyIHU9bio4LWYtMTt2YXIgYT0oMTw8dSktMTt2YXIgcz1hPj4xO3ZhciBoPS03O3ZhciBjPXQ/bi0xOjA7dmFyIGw9dD8tMToxO3ZhciBwPWVbcitjXTtjKz1sO2k9cCYoMTw8LWgpLTE7cD4+PS1oO2grPXU7Zm9yKDtoPjA7aT1pKjI1NitlW3IrY10sYys9bCxoLT04KXt9bz1pJigxPDwtaCktMTtpPj49LWg7aCs9Zjtmb3IoO2g+MDtvPW8qMjU2K2VbcitjXSxjKz1sLGgtPTgpe31pZihpPT09MCl7aT0xLXN9ZWxzZSBpZihpPT09YSl7cmV0dXJuIG8/TmFOOihwPy0xOjEpKkluZmluaXR5fWVsc2V7bz1vK01hdGgucG93KDIsZik7aT1pLXN9cmV0dXJuKHA/LTE6MSkqbypNYXRoLnBvdygyLGktZil9O3Iud3JpdGU9ZnVuY3Rpb24oZSxyLHQsZixuLGkpe3ZhciBvLHUsYTt2YXIgcz1pKjgtbi0xO3ZhciBoPSgxPDxzKS0xO3ZhciBjPWg+PjE7dmFyIGw9bj09PTIzP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MDt2YXIgcD1mPzA6aS0xO3ZhciB5PWY/MTotMTt2YXIgZz1yPDB8fHI9PT0wJiYxL3I8MD8xOjA7cj1NYXRoLmFicyhyKTtpZihpc05hTihyKXx8cj09PUluZmluaXR5KXt1PWlzTmFOKHIpPzE6MDtvPWh9ZWxzZXtvPU1hdGguZmxvb3IoTWF0aC5sb2cocikvTWF0aC5MTjIpO2lmKHIqKGE9TWF0aC5wb3coMiwtbykpPDEpe28tLTthKj0yfWlmKG8rYz49MSl7cis9bC9hfWVsc2V7cis9bCpNYXRoLnBvdygyLDEtYyl9aWYociphPj0yKXtvKys7YS89Mn1pZihvK2M+PWgpe3U9MDtvPWh9ZWxzZSBpZihvK2M+PTEpe3U9KHIqYS0xKSpNYXRoLnBvdygyLG4pO289bytjfWVsc2V7dT1yKk1hdGgucG93KDIsYy0xKSpNYXRoLnBvdygyLG4pO289MH19Zm9yKDtuPj04O2VbdCtwXT11JjI1NSxwKz15LHUvPTI1NixuLT04KXt9bz1vPDxufHU7cys9bjtmb3IoO3M+MDtlW3QrcF09byYyNTUscCs9eSxvLz0yNTYscy09OCl7fWVbdCtwLXldfD1nKjEyOH19fTt2YXIgcj17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHQpe3ZhciBmPXJbdF07aWYoZiE9PXVuZGVmaW5lZCl7cmV0dXJuIGYuZXhwb3J0c312YXIgbj1yW3RdPXtleHBvcnRzOnt9fTt2YXIgaT10cnVlO3RyeXtlW3RdKG4sbi5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2k9ZmFsc2V9ZmluYWxseXtpZihpKWRlbGV0ZSByW3RdfXJldHVybiBuLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oNzIpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      case REACT_SERVER_CONTEXT_TYPE:\n        {\n          var context2 = type;\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe\n\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    {\n      if (hasOwnProperty.call(props, 'key')) {\n        var componentName = getComponentNameFromType(type);\n        var keys = Object.keys(props).filter(function (k) {\n          return k !== 'key';\n        });\n        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n          error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7O0FBRUEsWUFBWSxtQkFBTyxDQUFDLDRFQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpR0FBaUcsZUFBZTtBQUNoSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0EsS0FBSyxHQUFHOztBQUVSLGtEQUFrRDtBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQSxxQ0FBcUM7O0FBRXJDLGdDQUFnQztBQUNoQztBQUNBOztBQUVBLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7OztBQUdGO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxTQUFTO0FBQ1QsdUJBQXVCO0FBQ3ZCO0FBQ0EsU0FBUztBQUNULHVCQUF1QjtBQUN2QjtBQUNBLFNBQVM7QUFDVCx3QkFBd0I7QUFDeEI7QUFDQSxTQUFTO0FBQ1Qsd0JBQXdCO0FBQ3hCO0FBQ0EsU0FBUztBQUNULGlDQUFpQztBQUNqQztBQUNBLFNBQVM7QUFDVCwyQkFBMkI7QUFDM0I7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyREFBMkQ7O0FBRTNEO0FBQ0E7O0FBRUE7QUFDQSx5REFBeUQ7QUFDekQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7OztBQUdUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLGtCQUFrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCOzs7QUFHbEI7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJIQUEySDtBQUMzSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9FQUFvRTs7QUFFcEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHOztBQUVsRztBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2QsV0FBVyxlQUFlO0FBQzFCLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRzs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxHQUFHO0FBQ1I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiwyREFBMkQsVUFBVTtBQUNyRSx5QkFBeUIsVUFBVTtBQUNuQztBQUNBLGFBQWEsVUFBVTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFlBQVksU0FBUztBQUNyQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsR0FBRztBQUNkOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDZEQUE2RDtBQUM3RDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLEdBQUc7QUFDZDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw0Q0FBNEM7O0FBRTVDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsaUJBQWlCO0FBQ3JDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMERBQTBEO0FBQzFEOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0RBQWdELGdEQUFnRCxNQUFNLGFBQWE7O0FBRW5IO0FBQ0EsaURBQWlELGtDQUFrQyxPQUFPOztBQUUxRix5R0FBeUcsY0FBYyxVQUFVLGdHQUFnRyxrQkFBa0IsVUFBVSxVQUFVOztBQUV2UTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUEsZ0JBQWdCO0FBQ2hCLGNBQWM7QUFDZCxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzP2MzZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vLyBBVFRFTlRJT05cbi8vIFdoZW4gYWRkaW5nIG5ldyBzeW1ib2xzIHRvIHRoaXMgZmlsZSxcbi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scydcbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbnZhciBSRUFDVF9TRVJWRVJfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc2VydmVyX2NvbnRleHQnKTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xudmFyIFJFQUNUX0NBQ0hFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jYWNoZScpO1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcblxuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcblxuZnVuY3Rpb24gZXJyb3IoZm9ybWF0KSB7XG4gIHtcbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcoJ2Vycm9yJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGxldmVsLCBmb3JtYXQsIGFyZ3MpIHtcbiAgLy8gV2hlbiBjaGFuZ2luZyB0aGlzIGxvZ2ljLCB5b3UgbWlnaHQgd2FudCB0byBhbHNvXG4gIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLlxuICB7XG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuXG4gICAgaWYgKHN0YWNrICE9PSAnJykge1xuICAgICAgZm9ybWF0ICs9ICclcyc7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW3N0YWNrXSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cblxuXG4gICAgdmFyIGFyZ3NXaXRoRm9ybWF0ID0gYXJncy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaXRlbSk7XG4gICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4XG5cbiAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTsgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZ1xuXG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxudmFyIGVuYWJsZUNhY2hlRWxlbWVudCA9IGZhbHNlO1xudmFyIGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nID0gZmFsc2U7IC8vIE5vIGtub3duIGJ1Z3MsIGJ1dCBuZWVkcyBwZXJmb3JtYW5jZSB0ZXN0aW5nXG5cbnZhciBlbmFibGVMZWdhY3lIaWRkZW4gPSBmYWxzZTsgLy8gRW5hYmxlcyB1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayBmZWF0dXJlIGluIEZpYmVyXG4vLyBzdHVmZi4gSW50ZW5kZWQgdG8gZW5hYmxlIFJlYWN0IGNvcmUgbWVtYmVycyB0byBtb3JlIGVhc2lseSBkZWJ1ZyBzY2hlZHVsaW5nXG4vLyBpc3N1ZXMgaW4gREVWIGJ1aWxkcy5cblxudmFyIGVuYWJsZURlYnVnVHJhY2luZyA9IGZhbHNlOyAvLyBUcmFjayB3aGljaCBGaWJlcihzKSBzY2hlZHVsZSByZW5kZXIgd29yay5cblxudmFyIFJFQUNUX01PRFVMRV9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKCdyZWFjdC5tb2R1bGUucmVmZXJlbmNlJyk7XG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gTm90ZTogdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgKGUuZy4gaWYgaXQncyBhIHBvbHlmaWxsKS5cblxuXG4gIGlmICh0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgZW5hYmxlRGVidWdUcmFjaW5nICB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IGVuYWJsZUxlZ2FjeUhpZGRlbiAgfHwgdHlwZSA9PT0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgfHwgZW5hYmxlU2NvcGVBUEkgIHx8IGVuYWJsZUNhY2hlRWxlbWVudCAgfHwgZW5hYmxlVHJhbnNpdGlvblRyYWNpbmcgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IC8vIFRoaXMgbmVlZHMgdG8gaW5jbHVkZSBhbGwgcG9zc2libGUgbW9kdWxlIHJlZmVyZW5jZSBvYmplY3RcbiAgICAvLyB0eXBlcyBzdXBwb3J0ZWQgYnkgYW55IEZsaWdodCBjb25maWd1cmF0aW9uIGFueXdoZXJlIHNpbmNlXG4gICAgLy8gd2UgZG9uJ3Qga25vdyB3aGljaCBGbGlnaHQgYnVpbGQgdGhpcyB3aWxsIGVuZCB1cCBiZWluZyB1c2VkXG4gICAgLy8gd2l0aC5cbiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NT0RVTEVfUkVGRVJFTkNFIHx8IHR5cGUuZ2V0TW9kdWxlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lO1xuXG4gIGlmIChkaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiBkaXNwbGF5TmFtZTtcbiAgfVxuXG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWU7XG59IC8vIEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJlY29uY2lsZXIvZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlclxuXG5cbmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgJ0NvbnRleHQnO1xufSAvLyBOb3RlIHRoYXQgdGhlIHJlY29uY2lsZXIgcGFja2FnZSBzaG91bGQgZ2VuZXJhbGx5IHByZWZlciB0byB1c2UgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcigpIGluc3RlYWQuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAge1xuICAgIGlmICh0eXBlb2YgdHlwZS50YWcgPT09ICdudW1iZXInKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcblxuICAgIGNhc2UgUkVBQ1RfQ0FDSEVfVFlQRTpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICdDYWNoZSc7XG4gICAgICB9XG5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICB2YXIgY29udGV4dCA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShjb250ZXh0KSArICcuQ29uc3VtZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgIHZhciBwcm92aWRlciA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJztcblxuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICB2YXIgb3V0ZXJOYW1lID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsO1xuXG4gICAgICAgIGlmIChvdXRlck5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdNZW1vJztcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGluaXQocGF5bG9hZCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgY29udGV4dDIgPSB0eXBlO1xuICAgICAgICAgIHJldHVybiAoY29udGV4dDIuZGlzcGxheU5hbWUgfHwgY29udGV4dDIuX2dsb2JhbE5hbWUpICsgJy5Qcm92aWRlcic7XG4gICAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlXG4vLyByZXBsYXlpbmcgb24gcmVuZGVyIGZ1bmN0aW9uLiBUaGlzIGN1cnJlbnRseSBvbmx5IHBhdGNoZXMgdGhlIG9iamVjdFxuLy8gbGF6aWx5IHdoaWNoIHdvbid0IGNvdmVyIGlmIHRoZSBsb2cgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBlYWdlcmx5LlxuLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuXG52YXIgZGlzYWJsZWREZXB0aCA9IDA7XG52YXIgcHJldkxvZztcbnZhciBwcmV2SW5mbztcbnZhciBwcmV2V2FybjtcbnZhciBwcmV2RXJyb3I7XG52YXIgcHJldkdyb3VwO1xudmFyIHByZXZHcm91cENvbGxhcHNlZDtcbnZhciBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cblxuZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVMb2dzKCkge1xuICB7XG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgICBwcmV2V2FybiA9IGNvbnNvbGUud2FybjtcbiAgICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgICAgcHJldkdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcbiAgICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkwOTlcblxuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgaW5mbzogcHJvcHMsXG4gICAgICAgIGxvZzogcHJvcHMsXG4gICAgICAgIHdhcm46IHByb3BzLFxuICAgICAgICBlcnJvcjogcHJvcHMsXG4gICAgICAgIGdyb3VwOiBwcm9wcyxcbiAgICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHByb3BzLFxuICAgICAgICBncm91cEVuZDogcHJvcHNcbiAgICAgIH0pO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICB9XG5cbiAgICBkaXNhYmxlZERlcHRoKys7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZW5hYmxlTG9ncygpIHtcbiAge1xuICAgIGRpc2FibGVkRGVwdGgtLTtcblxuICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBsb2c6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2SW5mb1xuICAgICAgICB9KSxcbiAgICAgICAgd2FybjogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2V2FyblxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3I6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cENvbGxhcHNlZFxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXBFbmQ6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCAhZm4gfHwgcmVlbnRyeSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHtcbiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7XG5cbiAgICBpZiAoZnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250cm9sO1xuICByZWVudHJ5ID0gdHJ1ZTtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7XG5cbiAge1xuICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgLy8gZm9yIHdhcm5pbmdzLlxuXG4gICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDtcbiAgICBkaXNhYmxlTG9ncygpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIHNob3VsZCB0aHJvdy5cbiAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAvLyBTb21ldGhpbmcgc2hvdWxkIGJlIHNldHRpbmcgdGhlIHByb3BzIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgIHZhciBGYWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgJ3Byb3BzJywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdvbid0IHRocm93IGluIGEgbm9uLXN0cmljdCBtb2RlIGZ1bmN0aW9uLlxuICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgICAgIC8vIFdlIGNvbnN0cnVjdCBhIGRpZmZlcmVudCBjb250cm9sIGZvciB0aGlzIGNhc2UgdG8gaW5jbHVkZSBhbnkgZXh0cmFcbiAgICAgICAgLy8gZnJhbWVzIGFkZGVkIGJ5IHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIGZvdW5kIHdoZW4gdXBncmFkaW5nIEZsb3dcblxuXG4gICAgICAgIGZuLmNhbGwoRmFrZS5wcm90b3R5cGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICBjb250cm9sID0geDtcbiAgICAgIH0gLy8gVE9ETyhsdW5hKTogVGhpcyB3aWxsIGN1cnJlbnRseSBvbmx5IHRocm93IGlmIHRoZSBmdW5jdGlvbiBjb21wb25lbnRcbiAgICAgIC8vIHRyaWVzIHRvIGFjY2VzcyBSZWFjdC9SZWFjdERPTS9wcm9wcy4gV2Ugc2hvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyB0aHJvd1xuICAgICAgLy8gaW4gc2ltcGxlIGNvbXBvbmVudHMgdG9vXG5cblxuICAgICAgZm4oKTtcbiAgICB9XG4gIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgIC8vIFRoaXMgaXMgaW5saW5lZCBtYW51YWxseSBiZWNhdXNlIGNsb3N1cmUgZG9lc24ndCBkbyBpdCBmb3IgdXMuXG4gICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIHR5cGVvZiBzYW1wbGUuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLlxuICAgICAgLy8gU2tpcHBpbmcgb25lIGZyYW1lIHRoYXQgd2UgYXNzdW1lIGlzIHRoZSBmcmFtZSB0aGF0IGNhbGxzIHRoZSB0d28uXG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGUuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2wuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGMgPSBjb250cm9sTGluZXMubGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAvLyBXZSBleHBlY3QgYXQgbGVhc3Qgb25lIHN0YWNrIGZyYW1lIHRvIGJlIHNoYXJlZC5cbiAgICAgICAgLy8gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSB0aGUgcm9vdCBtb3N0IG9uZS4gSG93ZXZlciwgc3RhY2sgZnJhbWVzIG1heSBiZVxuICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZlxuICAgICAgICAvLyBlYXJsaWVyIHRoYW4gdGhlIG90aGVyLiBXZSBhc3N1bWUgdGhhdCB0aGUgc2FtcGxlIGlzIGxvbmdlciBvciB0aGUgc2FtZVxuICAgICAgICAvLyBhbmQgdGhlcmUgZm9yIGN1dCBvZmYgZWFybGllci4gU28gd2Ugc2hvdWxkIGZpbmQgdGhlIHJvb3QgbW9zdCBmcmFtZSBpblxuICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC5cbiAgICAgICAgYy0tO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgcyA+PSAxICYmIGMgPj0gMDsgcy0tLCBjLS0pIHtcbiAgICAgICAgLy8gTmV4dCB3ZSBmaW5kIHRoZSBmaXJzdCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSB3aGljaCBzaG91bGQgYmUgdGhlXG4gICAgICAgIC8vIGZyYW1lIHRoYXQgY2FsbGVkIG91ciBzYW1wbGUgZnVuY3Rpb24gYW5kIHRoZSBjb250cm9sLlxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgIC8vIEluIFY4LCB0aGUgZmlyc3QgbGluZSBpcyBkZXNjcmliaW5nIHRoZSBtZXNzYWdlIGJ1dCBvdGhlciBWTXMgZG9uJ3QuXG4gICAgICAgICAgLy8gSWYgd2UncmUgYWJvdXQgdG8gcmV0dXJuIHRoZSBmaXJzdCBsaW5lLCBhbmQgdGhlIGNvbnRyb2wgaXMgYWxzbyBvbiB0aGUgc2FtZVxuICAgICAgICAgIC8vIGxpbmUsIHRoYXQncyBhIHByZXR0eSBnb29kIGluZGljYXRvciB0aGF0IG91ciBzYW1wbGUgdGhyZXcgYXQgc2FtZSBsaW5lIGFzXG4gICAgICAgICAgLy8gdGhlIGNvbnRyb2wuIEkuZS4gYmVmb3JlIHdlIGVudGVyZWQgdGhlIHNhbXBsZSBmcmFtZS4gU28gd2UgaWdub3JlIHRoaXMgcmVzdWx0LlxuICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgcGFzc2VkIGEgY2xhc3MgdG8gZnVuY3Rpb24gY29tcG9uZW50LCBvciBub24tZnVuY3Rpb24uXG4gICAgICAgICAgaWYgKHMgIT09IDEgfHwgYyAhPT0gMSkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBzLS07XG4gICAgICAgICAgICAgIGMtLTsgLy8gV2UgbWF5IHN0aWxsIGhhdmUgc2ltaWxhciBpbnRlcm1lZGlhdGUgZnJhbWVzIGZyb20gdGhlIGNvbnN0cnVjdCBjYWxsLlxuICAgICAgICAgICAgICAvLyBUaGUgbmV4dCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSBzaG91bGQgYmUgb3VyIG1hdGNoIHRob3VnaC5cblxuICAgICAgICAgICAgICBpZiAoYyA8IDAgfHwgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgICAgICAgIC8vIFY4IGFkZHMgYSBcIm5ld1wiIHByZWZpeCBmb3IgbmF0aXZlIGNsYXNzZXMuIExldCdzIHJlbW92ZSBpdCB0byBtYWtlIGl0IHByZXR0aWVyLlxuICAgICAgICAgICAgICAgIHZhciBfZnJhbWUgPSAnXFxuJyArIHNhbXBsZUxpbmVzW3NdLnJlcGxhY2UoJyBhdCBuZXcgJywgJyBhdCAnKTsgLy8gSWYgb3VyIGNvbXBvbmVudCBmcmFtZSBpcyBsYWJlbGVkIFwiPGFub255bW91cz5cIlxuICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSBoYXZlIGEgdXNlci1wcm92aWRlZCBcImRpc3BsYXlOYW1lXCJcbiAgICAgICAgICAgICAgICAvLyBzcGxpY2UgaXQgaW4gdG8gbWFrZSB0aGUgc3RhY2sgbW9yZSByZWFkYWJsZS5cblxuXG4gICAgICAgICAgICAgICAgaWYgKGZuLmRpc3BsYXlOYW1lICYmIF9mcmFtZS5pbmNsdWRlcygnPGFub255bW91cz4nKSkge1xuICAgICAgICAgICAgICAgICAgX2ZyYW1lID0gX2ZyYW1lLnJlcGxhY2UoJzxhbm9ueW1vdXM+JywgZm4uZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuXG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHMgPj0gMSAmJiBjID49IDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJlZW50cnkgPSBmYWxzZTtcblxuICAgIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudCA9IHByZXZpb3VzRGlzcGF0Y2hlcjtcbiAgICAgIHJlZW5hYmxlTG9ncygpO1xuICAgIH1cblxuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZTtcbiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuXG5cblxuICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnO1xuICB2YXIgc3ludGhldGljRnJhbWUgPSBuYW1lID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkgOiAnJztcblxuICB7XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIHN5bnRoZXRpY0ZyYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ludGhldGljRnJhbWU7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoZm4sIHNvdXJjZSwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIHNvdXJjZSwgb3duZXJGbikge1xuXG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUodHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlJyk7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2VMaXN0Jyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgLy8gTWVtbyBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLnR5cGUsIHNvdXJjZSwgb3duZXJGbik7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGxhenlDb21wb25lbnQgPSB0eXBlO1xuICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDtcbiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTGF6eSBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoaW5pdChwYXlsb2FkKSwgc291cmNlLCBvd25lckZuKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG4vLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShzdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGVsZW1lbnQpIHtcbiAge1xuICAgIC8vICRGbG93Rml4TWUgVGhpcyBpcyBva2F5IGJ1dCBGbG93IGRvZXNuJ3Qga25vdyBpdC5cbiAgICB2YXIgaGFzID0gRnVuY3Rpb24uY2FsbC5iaW5kKGhhc093blByb3BlcnR5KTtcblxuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciQxID0gdm9pZCAwOyAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvcHJvZC1lcnJvci1jb2Rlc1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLicgKyAnVGhpcyBvZnRlbiBoYXBwZW5zIGJlY2F1c2Ugb2YgdHlwb3Mgc3VjaCBhcyBgUHJvcFR5cGVzLmZ1bmN0aW9uYCBpbnN0ZWFkIG9mIGBQcm9wVHlwZXMuZnVuY2AuJyk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlcnJvciQxID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciQxID0gZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IkMSAmJiAhKGVycm9yJDEgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIGVycm9yKCclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzJyArICcgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgbG9jYXRpb24sIHR5cGVTcGVjTmFtZSwgdHlwZW9mIGVycm9yJDEpO1xuXG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IkMSBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IkMS5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvciQxLm1lc3NhZ2VdID0gdHJ1ZTtcbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIGVycm9yKCdGYWlsZWQgJXMgdHlwZTogJXMnLCBsb2NhdGlvbiwgZXJyb3IkMS5tZXNzYWdlKTtcblxuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcblxuZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gIHJldHVybiBpc0FycmF5SW1wbChhKTtcbn1cblxuLypcbiAqIFRoZSBgJycgKyB2YWx1ZWAgcGF0dGVybiAodXNlZCBpbiBwZXJmLXNlbnNpdGl2ZSBjb2RlKSB0aHJvd3MgZm9yIFN5bWJvbFxuICogYW5kIFRlbXBvcmFsLiogdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMjA2NC5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHdpbGwgdGhyb3cgYW4gZWFzaWVyLXRvLXVuZGVyc3RhbmQsXG4gKiBlYXNpZXItdG8tZGVidWcgZXhjZXB0aW9uIHdpdGggYSBjbGVhciBlcnJvcnMgbWVzc2FnZSBtZXNzYWdlIGV4cGxhaW5pbmcgdGhlXG4gKiBwcm9ibGVtLiAoSW5zdGVhZCBvZiBhIGNvbmZ1c2luZyBleGNlcHRpb24gdGhyb3duIGluc2lkZSB0aGUgaW1wbGVtZW50YXRpb25cbiAqIG9mIHRoZSBgdmFsdWVgIG9iamVjdCkuXG4gKi9cbi8vICRGbG93Rml4TWUgb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5mdW5jdGlvbiB0eXBlTmFtZSh2YWx1ZSkge1xuICB7XG4gICAgLy8gdG9TdHJpbmdUYWcgaXMgbmVlZGVkIGZvciBuYW1lc3BhY2VkIHR5cGVzIGxpa2UgVGVtcG9yYWwuSW5zdGFudFxuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnO1xuICAgIHZhciB0eXBlID0gaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSBiZWZvcmUgdXNpbmcgaXQgaGVyZS4nLCB0eXBlTmFtZSh2YWx1ZSkpO1xuXG4gICAgICByZXR1cm4gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTsgLy8gdGhyb3cgKHRvIGhlbHAgY2FsbGVycyBmaW5kIHRyb3VibGVzaG9vdGluZyBjb21tZW50cylcbiAgICB9XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xudmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7XG5cbntcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9O1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gJyArICdTdXBwb3J0IGZvciBzdHJpbmcgcmVmcyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gJyArICdUaGlzIGNhc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uLiAnICsgJ1dlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtc3RyaW5nLXJlZicsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTsgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvcHVsbC8xMDdcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cblxuZnVuY3Rpb24ganN4REVWKHR5cGUsIGNvbmZpZywgbWF5YmVLZXksIHNvdXJjZSwgc2VsZikge1xuICB7XG4gICAgdmFyIHByb3BOYW1lOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgcmVmID0gbnVsbDsgLy8gQ3VycmVudGx5LCBrZXkgY2FuIGJlIHNwcmVhZCBpbiBhcyBhIHByb3AuIFRoaXMgY2F1c2VzIGEgcG90ZW50aWFsXG4gICAgLy8gaXNzdWUgaWYga2V5IGlzIGFsc28gZXhwbGljaXRseSBkZWNsYXJlZCAoaWUuIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+XG4gICAgLy8gb3IgPGRpdiBrZXk9XCJIaVwiIHsuLi5wcm9wc30gLz4gKS4gV2Ugd2FudCB0byBkZXByZWNhdGUga2V5IHNwcmVhZCxcbiAgICAvLyBidXQgYXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAsIHdlIHdpbGwgdXNlIGpzeERFViBmb3IgZXZlcnl0aGluZyBleGNlcHRcbiAgICAvLyA8ZGl2IHsuLi5wcm9wc30ga2V5PVwiSGlcIiAvPiwgYmVjYXVzZSB3ZSBhcmVuJ3QgY3VycmVudGx5IGFibGUgdG8gdGVsbCBpZlxuICAgIC8vIGtleSBpcyBleHBsaWNpdGx5IGRlY2xhcmVkIHRvIGJlIHVuZGVmaW5lZCBvciBub3QuXG5cbiAgICBpZiAobWF5YmVLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKG1heWJlS2V5KTtcbiAgICAgIH1cblxuICAgICAga2V5ID0gJycgKyBtYXliZUtleTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKGNvbmZpZy5rZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTtcbiAgICB9IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXG5cbiAgICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSB8fCByZWYpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudE93bmVyJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duO1xuXG57XG4gIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gZmFsc2U7XG59XG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2lzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIEBmaW5hbFxuICovXG5cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAge1xuICAgIGlmIChSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpIHtcbiAge1xuICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICAgIHZhciBsaW5lTnVtYmVyID0gc291cmNlLmxpbmVOdW1iZXI7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cblxuXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSkge1xuICB7XG4gICAgdmFyIGluZm8gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcblxuICAgIGlmICghaW5mbykge1xuICAgICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG5cbiAgICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICAgIGluZm8gPSBcIlxcblxcbkNoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiICsgcGFyZW50TmFtZSArIFwiPi5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gICAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAgIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICAgIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50KSB7XG4gICAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICAgIGNoaWxkT3duZXIgPSBcIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIiArIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShlbGVtZW50Ll9vd25lci50eXBlKSArIFwiLlwiO1xuICAgIH1cblxuICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCk7XG5cbiAgICBlcnJvcignRWFjaCBjaGlsZCBpbiBhIGxpc3Qgc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3dhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyKTtcblxuICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gIH1cbn1cbi8qKlxuICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlIFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcblxuICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAgIC8vIGJ1dCBub3cgd2UgcHJpbnQgYSBzZXBhcmF0ZSB3YXJuaW5nIGZvciB0aGVtIGxhdGVyLlxuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cbiAgICBpZiAodHlwZSA9PT0gbnVsbCB8fCB0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByb3BUeXBlcztcblxuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvcFR5cGVzID0gdHlwZS5wcm9wVHlwZXM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLlxuICAgIC8vIElubmVyIHByb3BzIGFyZSBjaGVja2VkIGluIHRoZSByZWNvbmNpbGVyLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSkpIHtcbiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb3BUeXBlcykge1xuICAgICAgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczpcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuICAgICAgY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCAncHJvcCcsIG5hbWUsIGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZS5Qcm9wVHlwZXMgIT09IHVuZGVmaW5lZCAmJiAhcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24pIHtcbiAgICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTsgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczpcblxuICAgICAgdmFyIF9uYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuXG4gICAgICBlcnJvcignQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgX25hbWUgfHwgJ1Vua25vd24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nICYmICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkge1xuICAgICAgZXJyb3IoJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZnJhZ21lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudC5wcm9wcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHtcbiAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShmcmFnbWVudCk7XG5cbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpO1xuXG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcmFnbWVudC5yZWYgIT09IG51bGwpIHtcbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZnJhZ21lbnQpO1xuXG4gICAgICBlcnJvcignSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4nKTtcblxuICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGRpZFdhcm5BYm91dEtleVNwcmVhZCA9IHt9O1xuZnVuY3Rpb24ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgaXNTdGF0aWNDaGlsZHJlbiwgc291cmNlLCBzZWxmKSB7XG4gIHtcbiAgICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpOyAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG5cbiAgICBpZiAoIXZhbGlkVHlwZSkge1xuICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZUluZm8gPSBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpO1xuXG4gICAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZVN0cmluZztcblxuICAgICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9ICdudWxsJztcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gXCI8XCIgKyAoZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgJ1Vua25vd24nKSArIFwiIC8+XCI7XG4gICAgICAgIGluZm8gPSAnIERpZCB5b3UgYWNjaWRlbnRhbGx5IGV4cG9ydCBhIEpTWCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjb21wb25lbnQ/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICAgIH1cblxuICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgJyArICdidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlICcgKyAnY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlU3RyaW5nLCBpbmZvKTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IGpzeERFVih0eXBlLCBwcm9wcywga2V5LCBzb3VyY2UsIHNlbGYpOyAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAgIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cblxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gICAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuXG5cbiAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW5baV0sIHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAna2V5JykpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSk7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHJldHVybiBrICE9PSAna2V5JztcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBiZWZvcmVFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3trZXk6IHNvbWVLZXksICcgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3trZXk6IHNvbWVLZXl9JztcblxuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dEtleVNwcmVhZFtjb21wb25lbnROYW1lICsgYmVmb3JlRXhhbXBsZV0pIHtcbiAgICAgICAgICB2YXIgYWZ0ZXJFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3snICsga2V5cy5qb2luKCc6IC4uLiwgJykgKyAnOiAuLi59JyA6ICd7fSc7XG5cbiAgICAgICAgICBlcnJvcignQSBwcm9wcyBvYmplY3QgY29udGFpbmluZyBhIFwia2V5XCIgcHJvcCBpcyBiZWluZyBzcHJlYWQgaW50byBKU1g6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMgey4uLnByb3BzfSAvPlxcbicgKyAnUmVhY3Qga2V5cyBtdXN0IGJlIHBhc3NlZCBkaXJlY3RseSB0byBKU1ggd2l0aG91dCB1c2luZyBzcHJlYWQ6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMga2V5PXtzb21lS2V5fSB7Li4ucHJvcHN9IC8+JywgYmVmb3JlRXhhbXBsZSwgY29tcG9uZW50TmFtZSwgYWZ0ZXJFeGFtcGxlLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICAgIGRpZFdhcm5BYm91dEtleVNwcmVhZFtjb21wb25lbnROYW1lICsgYmVmb3JlRXhhbXBsZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn0gLy8gVGhlc2UgdHdvIGZ1bmN0aW9ucyBleGlzdCB0byBzdGlsbCBnZXQgY2hpbGQgd2FybmluZ3MgaW4gZGV2XG5cbnZhciBqc3hERVYkMSA9ICBqc3hXaXRoVmFsaWRhdGlvbiA7XG5cbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5qc3hERVYgPSBqc3hERVYkMTtcbiAgfSkoKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-client)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLHVMQUFzRTtBQUN4RSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9mNDE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Realtime\": function() { return /* binding */ Realtime; },\n/* harmony export */   \"assertConfiguration\": function() { return /* binding */ assertConfiguration; },\n/* harmony export */   \"configureAbly\": function() { return /* binding */ configureAbly; },\n/* harmony export */   \"provideSdkInstance\": function() { return /* binding */ provideSdkInstance; }\n/* harmony export */ });\n/* harmony import */ var ably__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ably */ \"(app-client)/./node_modules/ably/build/ably-commonjs.js\");\n\nconst version = \"2.1.2\";\nlet sdkInstance = null;\nclass Realtime extends ably__WEBPACK_IMPORTED_MODULE_0__.Realtime.Promise {\n    constructor(options) {\n        if (typeof options === \"string\") {\n            options = {\n                key: options,\n            };\n        }\n        options.agents = { 'react-hooks': version };\n        super(options);\n    }\n}\nfunction provideSdkInstance(ablyInstance) {\n    sdkInstance = ablyInstance;\n}\nfunction configureAbly(ablyConfigurationObject) {\n    return sdkInstance || (sdkInstance = new Realtime(ablyConfigurationObject));\n}\nfunction assertConfiguration() {\n    if (!sdkInstance) {\n        throw new Error('Ably not configured - please call configureAbly({ key: \"your-api-key\", clientId: \"someid\" });');\n    }\n    return sdkInstance;\n}\n//# sourceMappingURL=AblyReactHooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvQWJseVJlYWN0SG9va3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0I7QUFDeEI7QUFDQTtBQUNPLHVCQUF1QixrREFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSwyRUFBMkUseUNBQXlDLEVBQUU7QUFDdEg7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvQWJseVJlYWN0SG9va3MuanM/YmVlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWJseSBmcm9tIFwiYWJseVwiO1xuY29uc3QgdmVyc2lvbiA9IFwiMi4xLjJcIjtcbmxldCBzZGtJbnN0YW5jZSA9IG51bGw7XG5leHBvcnQgY2xhc3MgUmVhbHRpbWUgZXh0ZW5kcyBBYmx5LlJlYWx0aW1lLlByb21pc2Uge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGtleTogb3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5hZ2VudHMgPSB7ICdyZWFjdC1ob29rcyc6IHZlcnNpb24gfTtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVTZGtJbnN0YW5jZShhYmx5SW5zdGFuY2UpIHtcbiAgICBzZGtJbnN0YW5jZSA9IGFibHlJbnN0YW5jZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVBYmx5KGFibHlDb25maWd1cmF0aW9uT2JqZWN0KSB7XG4gICAgcmV0dXJuIHNka0luc3RhbmNlIHx8IChzZGtJbnN0YW5jZSA9IG5ldyBSZWFsdGltZShhYmx5Q29uZmlndXJhdGlvbk9iamVjdCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydENvbmZpZ3VyYXRpb24oKSB7XG4gICAgaWYgKCFzZGtJbnN0YW5jZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FibHkgbm90IGNvbmZpZ3VyZWQgLSBwbGVhc2UgY2FsbCBjb25maWd1cmVBYmx5KHsga2V5OiBcInlvdXItYXBpLWtleVwiLCBjbGllbnRJZDogXCJzb21laWRcIiB9KTsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNka0luc3RhbmNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJseVJlYWN0SG9va3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/useChannel.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/useChannel.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useChannel\": function() { return /* binding */ useChannel; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AblyReactHooks.js */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nfunction useChannel(channelNameOrNameAndOptions, ...channelSubscriptionArguments) {\n    const ably = typeof channelNameOrNameAndOptions === 'string'\n        ? (0,_AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__.assertConfiguration)()\n        : (channelNameOrNameAndOptions.realtime || (0,_AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__.assertConfiguration)());\n    const channelName = typeof channelNameOrNameAndOptions === 'string'\n        ? channelNameOrNameAndOptions\n        : channelNameOrNameAndOptions.channelName;\n    const channel = typeof channelNameOrNameAndOptions === 'string'\n        ? ably.channels.get(channelName)\n        : ably.channels.get(channelName, channelNameOrNameAndOptions.options);\n    const onMount = () => __awaiter(this, void 0, void 0, function* () {\n        yield channel.subscribe.apply(channel, channelSubscriptionArguments);\n    });\n    const onUnmount = () => __awaiter(this, void 0, void 0, function* () {\n        yield channel.unsubscribe.apply(channel, channelSubscriptionArguments);\n        setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            // React is very mount/unmount happy, so if we just detatch the channel\n            // it's quite likely it will be reattached again by a subsequent onMount calls.\n            // To solve this, we set a timer, and if all the listeners have been removed, we know that the component\n            // has been removed for good and we can detatch the channel.\n            if (channel.listeners.length === 0) {\n                yield channel.detach();\n            }\n        }), 2500);\n    });\n    const useEffectHook = () => {\n        onMount();\n        return () => { onUnmount(); };\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(useEffectHook, [channelName]);\n    return [channel, ably];\n}\n//# sourceMappingURL=useChannel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvaG9va3MvdXNlQ2hhbm5lbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpQkFBaUIsU0FBSSxJQUFJLFNBQUk7QUFDN0IsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDa0M7QUFDeUI7QUFDcEQ7QUFDUDtBQUNBLFVBQVUsdUVBQW1CO0FBQzdCLG1EQUFtRCx1RUFBbUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvaG9va3MvdXNlQ2hhbm5lbC5qcz83MWQzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYXNzZXJ0Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9BYmx5UmVhY3RIb29rcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNoYW5uZWwoY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zLCAuLi5jaGFubmVsU3Vic2NyaXB0aW9uQXJndW1lbnRzKSB7XG4gICAgY29uc3QgYWJseSA9IHR5cGVvZiBjaGFubmVsTmFtZU9yTmFtZUFuZE9wdGlvbnMgPT09ICdzdHJpbmcnXG4gICAgICAgID8gYXNzZXJ0Q29uZmlndXJhdGlvbigpXG4gICAgICAgIDogKGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucy5yZWFsdGltZSB8fCBhc3NlcnRDb25maWd1cmF0aW9uKCkpO1xuICAgIGNvbnN0IGNoYW5uZWxOYW1lID0gdHlwZW9mIGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBjaGFubmVsTmFtZU9yTmFtZUFuZE9wdGlvbnNcbiAgICAgICAgOiBjaGFubmVsTmFtZU9yTmFtZUFuZE9wdGlvbnMuY2hhbm5lbE5hbWU7XG4gICAgY29uc3QgY2hhbm5lbCA9IHR5cGVvZiBjaGFubmVsTmFtZU9yTmFtZUFuZE9wdGlvbnMgPT09ICdzdHJpbmcnXG4gICAgICAgID8gYWJseS5jaGFubmVscy5nZXQoY2hhbm5lbE5hbWUpXG4gICAgICAgIDogYWJseS5jaGFubmVscy5nZXQoY2hhbm5lbE5hbWUsIGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucy5vcHRpb25zKTtcbiAgICBjb25zdCBvbk1vdW50ID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB5aWVsZCBjaGFubmVsLnN1YnNjcmliZS5hcHBseShjaGFubmVsLCBjaGFubmVsU3Vic2NyaXB0aW9uQXJndW1lbnRzKTtcbiAgICB9KTtcbiAgICBjb25zdCBvblVubW91bnQgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHlpZWxkIGNoYW5uZWwudW5zdWJzY3JpYmUuYXBwbHkoY2hhbm5lbCwgY2hhbm5lbFN1YnNjcmlwdGlvbkFyZ3VtZW50cyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gUmVhY3QgaXMgdmVyeSBtb3VudC91bm1vdW50IGhhcHB5LCBzbyBpZiB3ZSBqdXN0IGRldGF0Y2ggdGhlIGNoYW5uZWxcbiAgICAgICAgICAgIC8vIGl0J3MgcXVpdGUgbGlrZWx5IGl0IHdpbGwgYmUgcmVhdHRhY2hlZCBhZ2FpbiBieSBhIHN1YnNlcXVlbnQgb25Nb3VudCBjYWxscy5cbiAgICAgICAgICAgIC8vIFRvIHNvbHZlIHRoaXMsIHdlIHNldCBhIHRpbWVyLCBhbmQgaWYgYWxsIHRoZSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJlbW92ZWQsIHdlIGtub3cgdGhhdCB0aGUgY29tcG9uZW50XG4gICAgICAgICAgICAvLyBoYXMgYmVlbiByZW1vdmVkIGZvciBnb29kIGFuZCB3ZSBjYW4gZGV0YXRjaCB0aGUgY2hhbm5lbC5cbiAgICAgICAgICAgIGlmIChjaGFubmVsLmxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBjaGFubmVsLmRldGFjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgMjUwMCk7XG4gICAgfSk7XG4gICAgY29uc3QgdXNlRWZmZWN0SG9vayA9ICgpID0+IHtcbiAgICAgICAgb25Nb3VudCgpO1xuICAgICAgICByZXR1cm4gKCkgPT4geyBvblVubW91bnQoKTsgfTtcbiAgICB9O1xuICAgIHVzZUVmZmVjdCh1c2VFZmZlY3RIb29rLCBbY2hhbm5lbE5hbWVdKTtcbiAgICByZXR1cm4gW2NoYW5uZWwsIGFibHldO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlQ2hhbm5lbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/useChannel.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/usePresence.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/usePresence.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"usePresence\": function() { return /* binding */ usePresence; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-client)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AblyReactHooks.js */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nfunction usePresence(channelNameOrNameAndOptions, messageOrPresenceObject, onPresenceUpdated) {\n    const ably = typeof channelNameOrNameAndOptions === 'string'\n        ? (0,_AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__.assertConfiguration)()\n        : (channelNameOrNameAndOptions.realtime || (0,_AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_1__.assertConfiguration)());\n    const channelName = typeof channelNameOrNameAndOptions === 'string'\n        ? channelNameOrNameAndOptions\n        : channelNameOrNameAndOptions.channelName;\n    const channel = typeof channelNameOrNameAndOptions === 'string'\n        ? ably.channels.get(channelName)\n        : ably.channels.get(channelName, channelNameOrNameAndOptions.options);\n    const subscribeOnly = typeof channelNameOrNameAndOptions === 'string' ? false : channelNameOrNameAndOptions.subscribeOnly;\n    const [presenceData, updatePresenceData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const updatePresence = (message) => __awaiter(this, void 0, void 0, function* () {\n        const snapshot = yield channel.presence.get();\n        updatePresenceData(snapshot);\n        onPresenceUpdated === null || onPresenceUpdated === void 0 ? void 0 : onPresenceUpdated.call(this, message);\n    });\n    const onMount = () => __awaiter(this, void 0, void 0, function* () {\n        channel.presence.subscribe('enter', updatePresence);\n        channel.presence.subscribe('leave', updatePresence);\n        channel.presence.subscribe('update', updatePresence);\n        if (!subscribeOnly) {\n            yield channel.presence.enter(messageOrPresenceObject);\n        }\n        const snapshot = yield channel.presence.get();\n        updatePresenceData(snapshot);\n    });\n    const onUnmount = () => {\n        if (channel.state == 'attached') {\n            if (!subscribeOnly) {\n                channel.presence.leave();\n            }\n        }\n        channel.presence.unsubscribe('enter');\n        channel.presence.unsubscribe('leave');\n        channel.presence.unsubscribe('update');\n    };\n    const useEffectHook = () => {\n        onMount();\n        return () => { onUnmount(); };\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(useEffectHook, []);\n    const updateStatus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messageOrPresenceObject) => {\n        if (!subscribeOnly) {\n            channel.presence.update(messageOrPresenceObject);\n        }\n        else {\n            throw new Error(\"updateStatus can not be called while using the hook in subscribeOnly mode\");\n        }\n    }, [channel]);\n    return [presenceData, updateStatus];\n}\n//# sourceMappingURL=usePresence.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvaG9va3MvdXNlUHJlc2VuY2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUJBQWlCLFNBQUksSUFBSSxTQUFJO0FBQzdCLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ3lEO0FBQ0U7QUFDcEQ7QUFDUDtBQUNBLFVBQVUsdUVBQW1CO0FBQzdCLG1EQUFtRCx1RUFBbUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsK0NBQVE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLElBQUksZ0RBQVM7QUFDYix5QkFBeUIsa0RBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGFibHktbGFicy9yZWFjdC1ob29rcy9kaXN0L21qcy9ob29rcy91c2VQcmVzZW5jZS5qcz84MjBlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhc3NlcnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL0FibHlSZWFjdEhvb2tzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlUHJlc2VuY2UoY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zLCBtZXNzYWdlT3JQcmVzZW5jZU9iamVjdCwgb25QcmVzZW5jZVVwZGF0ZWQpIHtcbiAgICBjb25zdCBhYmx5ID0gdHlwZW9mIGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBhc3NlcnRDb25maWd1cmF0aW9uKClcbiAgICAgICAgOiAoY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zLnJlYWx0aW1lIHx8IGFzc2VydENvbmZpZ3VyYXRpb24oKSk7XG4gICAgY29uc3QgY2hhbm5lbE5hbWUgPSB0eXBlb2YgY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9uc1xuICAgICAgICA6IGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucy5jaGFubmVsTmFtZTtcbiAgICBjb25zdCBjaGFubmVsID0gdHlwZW9mIGNoYW5uZWxOYW1lT3JOYW1lQW5kT3B0aW9ucyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBhYmx5LmNoYW5uZWxzLmdldChjaGFubmVsTmFtZSlcbiAgICAgICAgOiBhYmx5LmNoYW5uZWxzLmdldChjaGFubmVsTmFtZSwgY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zLm9wdGlvbnMpO1xuICAgIGNvbnN0IHN1YnNjcmliZU9ubHkgPSB0eXBlb2YgY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zID09PSAnc3RyaW5nJyA/IGZhbHNlIDogY2hhbm5lbE5hbWVPck5hbWVBbmRPcHRpb25zLnN1YnNjcmliZU9ubHk7XG4gICAgY29uc3QgW3ByZXNlbmNlRGF0YSwgdXBkYXRlUHJlc2VuY2VEYXRhXSA9IHVzZVN0YXRlKFtdKTtcbiAgICBjb25zdCB1cGRhdGVQcmVzZW5jZSA9IChtZXNzYWdlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0geWllbGQgY2hhbm5lbC5wcmVzZW5jZS5nZXQoKTtcbiAgICAgICAgdXBkYXRlUHJlc2VuY2VEYXRhKHNuYXBzaG90KTtcbiAgICAgICAgb25QcmVzZW5jZVVwZGF0ZWQgPT09IG51bGwgfHwgb25QcmVzZW5jZVVwZGF0ZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uUHJlc2VuY2VVcGRhdGVkLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgfSk7XG4gICAgY29uc3Qgb25Nb3VudCA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY2hhbm5lbC5wcmVzZW5jZS5zdWJzY3JpYmUoJ2VudGVyJywgdXBkYXRlUHJlc2VuY2UpO1xuICAgICAgICBjaGFubmVsLnByZXNlbmNlLnN1YnNjcmliZSgnbGVhdmUnLCB1cGRhdGVQcmVzZW5jZSk7XG4gICAgICAgIGNoYW5uZWwucHJlc2VuY2Uuc3Vic2NyaWJlKCd1cGRhdGUnLCB1cGRhdGVQcmVzZW5jZSk7XG4gICAgICAgIGlmICghc3Vic2NyaWJlT25seSkge1xuICAgICAgICAgICAgeWllbGQgY2hhbm5lbC5wcmVzZW5jZS5lbnRlcihtZXNzYWdlT3JQcmVzZW5jZU9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSB5aWVsZCBjaGFubmVsLnByZXNlbmNlLmdldCgpO1xuICAgICAgICB1cGRhdGVQcmVzZW5jZURhdGEoc25hcHNob3QpO1xuICAgIH0pO1xuICAgIGNvbnN0IG9uVW5tb3VudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNoYW5uZWwuc3RhdGUgPT0gJ2F0dGFjaGVkJykge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVPbmx5KSB7XG4gICAgICAgICAgICAgICAgY2hhbm5lbC5wcmVzZW5jZS5sZWF2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoYW5uZWwucHJlc2VuY2UudW5zdWJzY3JpYmUoJ2VudGVyJyk7XG4gICAgICAgIGNoYW5uZWwucHJlc2VuY2UudW5zdWJzY3JpYmUoJ2xlYXZlJyk7XG4gICAgICAgIGNoYW5uZWwucHJlc2VuY2UudW5zdWJzY3JpYmUoJ3VwZGF0ZScpO1xuICAgIH07XG4gICAgY29uc3QgdXNlRWZmZWN0SG9vayA9ICgpID0+IHtcbiAgICAgICAgb25Nb3VudCgpO1xuICAgICAgICByZXR1cm4gKCkgPT4geyBvblVubW91bnQoKTsgfTtcbiAgICB9O1xuICAgIHVzZUVmZmVjdCh1c2VFZmZlY3RIb29rLCBbXSk7XG4gICAgY29uc3QgdXBkYXRlU3RhdHVzID0gdXNlQ2FsbGJhY2soKG1lc3NhZ2VPclByZXNlbmNlT2JqZWN0KSA9PiB7XG4gICAgICAgIGlmICghc3Vic2NyaWJlT25seSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wcmVzZW5jZS51cGRhdGUobWVzc2FnZU9yUHJlc2VuY2VPYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXBkYXRlU3RhdHVzIGNhbiBub3QgYmUgY2FsbGVkIHdoaWxlIHVzaW5nIHRoZSBob29rIGluIHN1YnNjcmliZU9ubHkgbW9kZVwiKTtcbiAgICAgICAgfVxuICAgIH0sIFtjaGFubmVsXSk7XG4gICAgcmV0dXJuIFtwcmVzZW5jZURhdGEsIHVwZGF0ZVN0YXR1c107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VQcmVzZW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/usePresence.js\n"));

/***/ }),

/***/ "(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ably-labs/react-hooks/dist/mjs/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Realtime\": function() { return /* reexport safe */ _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_0__.Realtime; },\n/* harmony export */   \"assertConfiguration\": function() { return /* reexport safe */ _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_0__.assertConfiguration; },\n/* harmony export */   \"configureAbly\": function() { return /* reexport safe */ _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_0__.configureAbly; },\n/* harmony export */   \"provideSdkInstance\": function() { return /* reexport safe */ _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_0__.provideSdkInstance; },\n/* harmony export */   \"useChannel\": function() { return /* reexport safe */ _hooks_useChannel_js__WEBPACK_IMPORTED_MODULE_1__.useChannel; },\n/* harmony export */   \"usePresence\": function() { return /* reexport safe */ _hooks_usePresence_js__WEBPACK_IMPORTED_MODULE_2__.usePresence; }\n/* harmony export */ });\n/* harmony import */ var _AblyReactHooks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AblyReactHooks.js */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/AblyReactHooks.js\");\n/* harmony import */ var _hooks_useChannel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hooks/useChannel.js */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/useChannel.js\");\n/* harmony import */ var _hooks_usePresence_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks/usePresence.js */ \"(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/hooks/usePresence.js\");\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vbm9kZV9tb2R1bGVzL0BhYmx5LWxhYnMvcmVhY3QtaG9va3MvZGlzdC9tanMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ0U7QUFDQztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGFibHktbGFicy9yZWFjdC1ob29rcy9kaXN0L21qcy9pbmRleC5qcz81YWY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQWJseVJlYWN0SG9va3MuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9ob29rcy91c2VDaGFubmVsLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaG9va3MvdXNlUHJlc2VuY2UuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-client)/./node_modules/@ably-labs/react-hooks/dist/mjs/index.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-client)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Frdzcn%2Fprojects%2Fpet%2Fonline-memory-game%2Fapp%2Fauthentication%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);